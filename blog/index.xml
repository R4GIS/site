<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Curso-R</title>
    <link>http://curso-r.com/blog/index.xml</link>
    <description>Recent content in Blog on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Apr 2017 13:07:31 +0200</lastBuildDate>
    <atom:link href="http://curso-r.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tratando erros: the tidy way</title>
      <link>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</link>
      <pubDate>Thu, 20 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</guid>
      <description>&lt;p&gt;Tratar erros no R é importante para identificar problemas nos códigos e evitar retrabalho. Quem nunca rodou um algoritmo pesadíssimo que deu errado na última iteração? Nesse artigo, veremos como trabalhar com erros no R e a versão &lt;code&gt;tidy&lt;/code&gt; dessas soluções.&lt;/p&gt;
&lt;div id=&#34;usando-try-e-trycatch&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usando &lt;code&gt;try()&lt;/code&gt; e &lt;code&gt;tryCatch()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A forma tradicional de tratar erros no R é com a função &lt;code&gt;tryCatch()&lt;/code&gt;. Essa função tem como primeiro argumento uma expressão a ser avaliada e argumentos diversos para trabalhar com os erros. A versão mais compacta do &lt;code&gt;tryCatch()&lt;/code&gt; é escrita assim:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tryCatch(sqrt(1), error = function(e) e)
## [1] 1
tryCatch(sqrt(&amp;#39;a&amp;#39;), error = function(e) e)
## &amp;lt;simpleError in sqrt(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;try()&lt;/code&gt; é uma simplificação de &lt;code&gt;tryCatch()&lt;/code&gt; que assume que não estamos interessados no erro, mas sim no resultado da função quando ela dá certo. O código abaixo não trava:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try(sqrt(1))
## [1] 1
try(sqrt(&amp;#39;a&amp;#39;))
## Error in sqrt(&amp;quot;a&amp;quot;) : non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existe até mesmo uma versão quieta do &lt;code&gt;try()&lt;/code&gt;, usando o parâmetro &lt;code&gt;silent =&lt;/code&gt;. Quando a expressão dá um erro, o &lt;code&gt;try()&lt;/code&gt; retorna a mensagem de erro de forma invisível, ou seja, sem mostrar explicitamente para o usuário.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- try(sqrt(&amp;#39;a&amp;#39;), silent = TRUE)
x
## [1] &amp;quot;Error in sqrt(\&amp;quot;a\&amp;quot;) : non-numeric argument to mathematical function\n&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;try-error&amp;quot;
## attr(,&amp;quot;condition&amp;quot;)
## &amp;lt;simpleError in sqrt(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usando-adverbios-do-purrr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usando advérbios do &lt;code&gt;purrr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Hoje em dia, o jeito mais arrumado de tratar erros é usando as funções &lt;code&gt;purrr::possibly()&lt;/code&gt; e suas amigas, &lt;code&gt;quietly()&lt;/code&gt; e &lt;code&gt;safely()&lt;/code&gt;. Note que todas essas palavras são advérbios: o objetivo delas é alterar o comportamento de outros verbos (outras funções). Essa forma de pensar nos nomes das funções (funções são verbos, modificadores de funções são advérbios) faz parte do &lt;a href=&#34;http://curso-r.com/blog/2017/02/15/2017-02-16-manifesto-tidy/&#34;&gt;princípio tidy&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safely()&lt;/code&gt; retorna uma lista com elementos &lt;code&gt;result&lt;/code&gt; e &lt;code&gt;error&lt;/code&gt;. Quando a função não dá erro, &lt;code&gt;error&lt;/code&gt; fica igual a &lt;code&gt;NULL&lt;/code&gt;. Quando a função dá erro, &lt;code&gt;error&lt;/code&gt; guarda a mensagem de erro e &lt;code&gt;result&lt;/code&gt; guarda o valor do parâmetro &lt;code&gt;otherwise =&lt;/code&gt;, que por padrão é &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;possibly()&lt;/code&gt; é uma versão mais otimista do &lt;code&gt;safely()&lt;/code&gt;, que exige a definição de &lt;code&gt;otherwise =&lt;/code&gt; e não guarda as mensagens de erro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quietly()&lt;/code&gt; não trata erros (ou seja, ela trava quando dá erro), mas guarda informações sobre &lt;em&gt;warnings&lt;/em&gt; e &lt;em&gt;messages&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-5&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-try_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;Admita, você não imaginava que teria de pensar em gramática para programar em R.&#34; width=&#34;768&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Admita, você não imaginava que teria de pensar em gramática para programar em R.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vamos ver as três funções colocadas em prática. Como exemplo usaremos a função &lt;code&gt;log&lt;/code&gt;, que i) retorna um número quando a entrada é um número positivo, ii) dá um warning quando a entrada é um número menor ou igual a zero, e iii) dá um erro se a entrada não é um número.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(10)
## [1] 2.302585
log(-1)
## Warning in log(-1): NaNs produced
## [1] NaN
log(&amp;#39;a&amp;#39;)
## Error in log(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos fazer as versões modificadas de &lt;code&gt;log&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)
safe_log &amp;lt;- safely(log) # outra forma fancy de escrever isso: log %&amp;gt;% safely()
possible_log &amp;lt;- possibly(log, otherwise = &amp;#39;putz&amp;#39;)
quiet_log &amp;lt;- quietly(log)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos mapear os seguintes elementos nessas funções:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;entradas &amp;lt;- list(10, -1, &amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, os resultados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Esse código vai travar
map(entradas, log) 
## Warning in .f(.x[[i]], ...): NaNs produced
## Error in .f(.x[[i]], ...): non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safely()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Retorna uma lista com erros e resultados NULL
map(entradas, safe_log)
## Warning in .f(...): NaNs produced
## [[1]]
## [[1]]$result
## [1] 2.302585
## 
## [[1]]$error
## NULL
## 
## 
## [[2]]
## [[2]]$result
## [1] NaN
## 
## [[2]]$error
## NULL
## 
## 
## [[3]]
## [[3]]$result
## NULL
## 
## [[3]]$error
## &amp;lt;simpleError in .f(...): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;possibly()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Retorna uma lista com os resultados que deram certo
map(entradas, possible_log)
## Warning in .f(...): NaNs produced
## [[1]]
## [1] 2.302585
## 
## [[2]]
## [1] NaN
## 
## [[3]]
## [1] &amp;quot;putz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quietly()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Também trava, mesmo problema de log
map(entradas, quiet_log) 
## Error in .f(...): non-numeric argument to mathematical function

## Quando funciona, retorna todos os warnings e messages
map(entradas[1:2], quiet_log)
## [[1]]
## [[1]]$result
## [1] 2.302585
## 
## [[1]]$output
## [1] &amp;quot;&amp;quot;
## 
## [[1]]$warnings
## character(0)
## 
## [[1]]$messages
## character(0)
## 
## 
## [[2]]
## [[2]]$result
## [1] NaN
## 
## [[2]]$output
## [1] &amp;quot;&amp;quot;
## 
## [[2]]$warnings
## [1] &amp;quot;NaNs produced&amp;quot;
## 
## [[2]]$messages
## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;combo-com-purrr-e-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combo com &lt;code&gt;purrr&lt;/code&gt; e &lt;code&gt;tibble&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Um combo que eu gosto bastante de usar é adicionar erros do código retornado por &lt;code&gt;safely()&lt;/code&gt; dentro de uma &lt;code&gt;tibble&lt;/code&gt;. Uma forma de fazer isso é com o código abaixo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)

# adiciona um resultado default caso dê erro. No caso, NA.
safe_log2 &amp;lt;- log %&amp;gt;% safely(otherwise = NA_real_)

d_result &amp;lt;- entradas %&amp;gt;% 
  map(safe_log2) %&amp;gt;% 
  # ao invés de uma lista de tamanho 3 com 2 elementos (result e error),
  # temos uma lista de tamanho 2 (result e error) com 3 elementos.
  transpose() %&amp;gt;%    
  # simplifica o vetor de resultados
  simplify_all() %&amp;gt;% 
  # converte para data frame
  as_tibble()

d_result
## # A tibble: 3 × 2
##     result             error
##      &amp;lt;dbl&amp;gt;            &amp;lt;list&amp;gt;
## 1 2.302585            &amp;lt;NULL&amp;gt;
## 2      NaN            &amp;lt;NULL&amp;gt;
## 3       NA &amp;lt;S3: simpleError&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, é possível guardar as informações dos erros de forma concisa, sem perder a informação dos erros.&lt;/p&gt;
&lt;p&gt;E é isso. Happy coding ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Até pouco tempo atrás eu usava a função &lt;code&gt;dplyr::failwith()&lt;/code&gt; para fazer o mesmo que &lt;code&gt;possibly()&lt;/code&gt;. Porém, descobri que essa função &lt;a href=&#34;https://github.com/tidyverse/dplyr/blob/master/NEWS.md#deprecated-and-defunct&#34;&gt;será retirada do &lt;code&gt;dplyr&lt;/code&gt; no futuro&lt;/a&gt;. Então se você é um usuário de &lt;code&gt;failwith()&lt;/code&gt;, está na hora de mudar!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Colando textos</title>
      <link>http://curso-r.com/blog/2017/04/17/2017-04-08-glue/</link>
      <pubDate>Mon, 17 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/17/2017-04-08-glue/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Uma tarefa muito comum no &lt;code&gt;R&lt;/code&gt; é colar textos. As funções mais importantes para isso são &lt;code&gt;paste()&lt;/code&gt; e &lt;code&gt;sprintf()&lt;/code&gt;, que vêm com o pacote &lt;code&gt;base&lt;/code&gt;. Nesse artigo, vamos falar dessas duas funções e de um novo pacote do &lt;code&gt;tidyverse&lt;/code&gt;, o &lt;code&gt;glue&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;paste&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;paste()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A função &lt;code&gt;paste()&lt;/code&gt; recebe um conjunto indeterminado de objetos como argumento através do &lt;code&gt;...&lt;/code&gt; e vai colando os objetos passados elemento a elemento. Isso significa que se você passar dois vetores de tamanho &lt;code&gt;n&lt;/code&gt;, a função &lt;code&gt;paste()&lt;/code&gt; retornará um vetor de tamanho &lt;code&gt;n&lt;/code&gt; sendo cada posição a colagem dos dois vetores nessa posição. Por padrão, a colagem é feita com um separador de espaço simples (&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;). Exemplo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste(c(1, 2, 3), c(4, 5, 6))
## [1] &amp;quot;1 4&amp;quot; &amp;quot;2 5&amp;quot; &amp;quot;3 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É possível alterar o separador pelo argumento &lt;code&gt;sep =&lt;/code&gt;. Um atalho útil para o separador vazio (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) é a função &lt;code&gt;paste0&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste0(c(1, 2, 3), c(4, 5, 6))
## [1] &amp;quot;14&amp;quot; &amp;quot;25&amp;quot; &amp;quot;36&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas vezes nosso interesse não é juntar vetores elemento a elemento, mas sim passar um vetor e colar todos seus elementos. Isso é feito com o parâmetro &lt;code&gt;collapse =&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste(c(1, 2, 3, 4, 5, 6), collapse = &amp;#39;@&amp;#39;)
## [1] &amp;quot;1@2@3@4@5@6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você passar mais de um vetor e mandar colapsar os elementos, o &lt;code&gt;paste()&lt;/code&gt; vai primeiro colar e depois colapsar:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste(c(1, 2, 3), c(4, 5, 6), collapse = &amp;#39;@&amp;#39;)
## [1] &amp;quot;1 4@2 5@3 6&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;cuidado&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cuidado&lt;/h3&gt;
&lt;p&gt;Tenha muito cuidado ao passar vetores com &lt;strong&gt;comprimentos diferentes&lt;/strong&gt; no &lt;code&gt;paste()&lt;/code&gt;! Assim como muitas funções do R, o &lt;code&gt;paste()&lt;/code&gt; faz reciclagem, ou seja, ele copia os elementos do menor vetor até ele ficar com o comprimento do maior vetor&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. O problema é que o &lt;code&gt;paste()&lt;/code&gt; faz isso silenciosamente e não avisa se você inserir um vetor com comprimento que não é múltiplo dos demais. Veja que resultado bizarro:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste(5:9, 1:3, 4:5)
## [1] &amp;quot;5 1 4&amp;quot; &amp;quot;6 2 5&amp;quot; &amp;quot;7 3 4&amp;quot; &amp;quot;8 1 5&amp;quot; &amp;quot;9 2 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por essas e outras que dizemos que às vezes o R funciona bem demais…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sprintf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;sprintf()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;O &lt;code&gt;sprintf()&lt;/code&gt; é similar ao &lt;code&gt;printf&lt;/code&gt; do &lt;code&gt;C&lt;/code&gt;. Primeiro escrevemos um texto com &lt;code&gt;%s&lt;/code&gt; no lugar das coisas que queremos substituir. Depois colocamos esses objetos nos outros argumentos da função, na ordem em que eles aparecem no texto.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sprintf(&amp;#39;Aba%ste&amp;#39;, &amp;#39;ca&amp;#39;)
## [1] &amp;quot;Abacate&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando o argumento é um vetor, a função retorna um vetor com as substituições ponto a ponto.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sprintf(&amp;#39;Aba%ste&amp;#39;, c(&amp;#39;ca&amp;#39;, &amp;#39;ixas&amp;#39;))
## [1] &amp;quot;Abacate&amp;quot;   &amp;quot;Abaixaste&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se o texto contém mais de um &lt;code&gt;%s&lt;/code&gt; e os objetos correspondentes são vetores, o &lt;code&gt;sprintf()&lt;/code&gt; tenta &lt;em&gt;reciclar&lt;/em&gt; os vetores para ficarem do mesmo tamanho. Isso só funciona quando todos os objetos têm comprimentos que são múltiplos do comprimento do maior objeto.&lt;/p&gt;
&lt;p&gt;Isso funciona:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sprintf(&amp;#39;Aba%s%s&amp;#39;, c(&amp;#39;ca&amp;#39;), c(&amp;#39;xi&amp;#39;, &amp;#39;te&amp;#39;)) # ca foi reciclado
## [1] &amp;quot;Abacaxi&amp;quot; &amp;quot;Abacate&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isso não funciona:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sprintf(&amp;#39;Aba%s%s&amp;#39;, c(&amp;#39;ca&amp;#39;, &amp;#39;ixaste&amp;#39;), c(&amp;#39;xi&amp;#39;, &amp;#39;te&amp;#39;, &amp;#39;.&amp;#39;))
## Error in sprintf(&amp;quot;Aba%s%s&amp;quot;, c(&amp;quot;ca&amp;quot;, &amp;quot;ixaste&amp;quot;), c(&amp;quot;xi&amp;quot;, &amp;quot;te&amp;quot;, &amp;quot;.&amp;quot;)): arguments cannot be recycled to the same length&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nem sempre queremos substituir pedaços do nosso texto por outros textos. No lugar do &lt;code&gt;%s&lt;/code&gt;, é possível colocar padrões para números, por exemplo. Eu uso bastante o &lt;code&gt;%d&lt;/code&gt;, que recebe inteiros. Uma funcionalidade legal do &lt;code&gt;%d&lt;/code&gt; é a possibilidade de adicionar zeros à esquerda quando um número não atinge certa quantidade de dígitos. Assim, quando ordenamos um vetor de textos que começa com números, a ordenação é a mesma da versão numérica do vetor.&lt;/p&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nums &amp;lt;- 1:11
sort(as.character(nums))    # ordenado pela string: 10 vem antes de 2
##  [1] &amp;quot;1&amp;quot;  &amp;quot;10&amp;quot; &amp;quot;11&amp;quot; &amp;quot;2&amp;quot;  &amp;quot;3&amp;quot;  &amp;quot;4&amp;quot;  &amp;quot;5&amp;quot;  &amp;quot;6&amp;quot;  &amp;quot;7&amp;quot;  &amp;quot;8&amp;quot;  &amp;quot;9&amp;quot;
sort(sprintf(&amp;#39;%02d&amp;#39;, nums)) # ordenado pela string: 02 vem antes de 10
##  [1] &amp;quot;01&amp;quot; &amp;quot;02&amp;quot; &amp;quot;03&amp;quot; &amp;quot;04&amp;quot; &amp;quot;05&amp;quot; &amp;quot;06&amp;quot; &amp;quot;07&amp;quot; &amp;quot;08&amp;quot; &amp;quot;09&amp;quot; &amp;quot;10&amp;quot; &amp;quot;11&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;glue&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;glue&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;O &lt;a href=&#34;https://github.com/tidyverse/glue&#34;&gt;&lt;code&gt;glue&lt;/code&gt;&lt;/a&gt; é um pacote recente. Sua primeira aparição no GitHub foi em 23/12/2016! Isso significa que é provável que algumas coisas mudem, mas isso não nos impede de aproveitar o que a ferramenta tem de bom.&lt;/p&gt;
&lt;p&gt;A função &lt;code&gt;glue()&lt;/code&gt; é uma generalização do &lt;code&gt;sprintf()&lt;/code&gt; que permite chamar objetos do R diretamente ao invés de utilizar o &lt;code&gt;%s&lt;/code&gt;. Os objetos podem estar no &lt;em&gt;global environment&lt;/em&gt; ou descritos por meio de objetos nomeados nos argumentos do &lt;code&gt;glue()&lt;/code&gt;. Basta inserir os objetos entre chaves &lt;code&gt;{}&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(glue)
planeta &amp;lt;- &amp;#39;mundo&amp;#39;
glue(&amp;#39;Olá {planeta} pela {y}a vez&amp;#39;, y = 1)
## Olá mundo pela 1a vez&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tembém é possível adicionar expressões dentro das chaves:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- 1.123123123
glue(&amp;#39;{p * 100}% das pessoas adoram R.&amp;#39;)
## 112.3123123% das pessoas adoram R.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glue(&amp;#39;{scales::percent(p)} das pessoas adoram R.&amp;#39;)
## 112% das pessoas adoram R.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;collapse()&lt;/code&gt; é parecida com o &lt;code&gt;paste()&lt;/code&gt; quando &lt;code&gt;collapse = &#39;&#39;&lt;/code&gt;, mas só aceita um objeto como entrada:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- collapse(1:10)
x
## [1] &amp;quot;12345678910&amp;quot;
all.equal(x, paste(1:10, collapse = &amp;#39;&amp;#39;))
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se quiser colar os objetos elemento a elemento e depois colapsar, faça isso explicitamente em duas operações:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glue(&amp;#39;{letters}/{LETTERS}&amp;#39;) %&amp;gt;% 
  collapse(&amp;#39;, &amp;#39;)
## [1] &amp;quot;a/A, b/B, c/C, d/D, e/E, f/F, g/G, h/H, i/I, j/J, k/K, l/L, m/M, n/N, o/O, p/P, q/Q, r/R, s/S, t/T, u/U, v/V, w/W, x/X, y/Y, z/Z&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;glue&lt;/code&gt; também tem uma função extra para trabalhar melhor com o &lt;code&gt;%&amp;gt;%&lt;/code&gt;, o &lt;code&gt;glue_data()&lt;/code&gt;. O primeiro argumento dessa função é uma lista ou &lt;code&gt;data.frame&lt;/code&gt;, e seus nomes são utilizados como variáveis para alimentar as chaves das strings. Use o &lt;code&gt;.&lt;/code&gt; para fazer operações com toda a base de dados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  head() %&amp;gt;% 
  glue_data(&amp;#39;O carro {row.names(.)} rende {mpg} milhas por galão.&amp;#39;)
## O carro Mazda RX4 rende 21 milhas por galão.
## O carro Mazda RX4 Wag rende 21 milhas por galão.
## O carro Datsun 710 rende 22.8 milhas por galão.
## O carro Hornet 4 Drive rende 21.4 milhas por galão.
## O carro Hornet Sportabout rende 18.7 milhas por galão.
## O carro Valiant rende 18.1 milhas por galão.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;resumo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resumo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;paste()&lt;/code&gt; para colar ou colapsar elementos usando um separador fixado.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;sprintf()&lt;/code&gt; quando quiser colocar objetos dentro de um texto complexo.&lt;/li&gt;
&lt;li&gt;Em todos os casos existe uma solução usando &lt;code&gt;glue&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Atualmente sempre que tenho um problema desse tipo uso o &lt;code&gt;glue&lt;/code&gt;. Até o momento, não encontrei nenhum problema ou dificuldade. A vida do cientista de dados é mais feliz no &lt;code&gt;tidyverse&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;É isso. Happy coding ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extra&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extra:&lt;/h2&gt;
&lt;p&gt;O &lt;a href=&#34;https://github.com/duarteguilherme&#34;&gt;Guilherme Jardim Duarte&lt;/a&gt; fez uma ótima sugestão logo após a publicação deste artigo. No pacote &lt;code&gt;stringi&lt;/code&gt; existe um operador &lt;code&gt;%s+%&lt;/code&gt; que cola textos iterativamente, com uma sintaxe similar à linguagem &lt;code&gt;python&lt;/code&gt;, que permite a colagem de textos usando um simples &lt;code&gt;+&lt;/code&gt;. Exemplo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringi)
&amp;#39;a&amp;#39; %s+%
  &amp;#39;ba&amp;#39; %s+%
  &amp;#39;ca&amp;#39; %s+%
  &amp;#39;xi&amp;#39;
## [1] &amp;quot;abacaxi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode adicionar esse operador como um atalho no RStudio, análogo ao &lt;code&gt;Ctrl+Shift+M&lt;/code&gt; que usamos para escrever o &lt;code&gt;%&amp;gt;%&lt;/code&gt;. Para isso, veja &lt;a href=&#34;https://rstudio.github.io/rstudioaddins/&#34;&gt;esse tutorial sobre RStudio Addins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Mais sobre isso no livro &lt;a href=&#34;http://www.burns-stat.com/pages/Tutor/R_inferno.pdf&#34;&gt;R inferno&lt;/a&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Análise das emoções de Aécio Neves</title>
      <link>http://curso-r.com/blog/2017/04/15/2017-04-09-aecio/</link>
      <pubDate>Sat, 15 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/15/2017-04-09-aecio/</guid>
      <description>&lt;p&gt;Aécio Neves é um político importante no Brasil. Por muito pouco não foi eleito Presidente da República em 2014 e é certamente um nome bem influente na atualidade. Mas sério, toda vez que eu vejo esse cara falando, não dou a mínima para quem ele é. Eu apenas fico pensando: ‘Por que ele sempre faz tanta cara de dor?’&lt;/p&gt;
&lt;p&gt;Pensando nisso, decidi pegar algumas fotos famosas dele e aplicar um algoritmo de Inteligência Artificial para reconhecimento de emoções. Se minha hipótese estiver correta, provavelmente esse algoritmo retornaria emoções como “dor”, “tristeza” ou “descontentamento”.&lt;/p&gt;
&lt;p&gt;A API escolhida para essa tarefa foi a &lt;a href=&#34;https://www.microsoft.com/cognitive-services/en-us/emotion-api&#34;&gt;Microsoft Emotions API&lt;/a&gt;. O motivo por trás da escolha não é nada especial: foi o primeiro resultado que apareceu no Google para mim!&lt;/p&gt;
&lt;p&gt;As imagens utilizadas para testar o algoritmo contra minha hipótese são essas aqui:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-4.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-5.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-6.png&#34; width=&#34;33%&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;obtencao-das-emocoes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obtenção das emoções&lt;/h2&gt;
&lt;p&gt;Pacotes carregados para essa análise:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(httr)
library(forcats)
library(grid)
library(gridExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obter os resultados, foi necessário entrar na &lt;a href=&#34;https://www.microsoft.com/cognitive-services/en-us/emotion-api&#34;&gt;página de APIs de visão da Microsoft&lt;/a&gt; e obter uma chave de acesso, guardando-a no objeto &lt;code&gt;key&lt;/code&gt;. Depois disso, montei a função &lt;code&gt;pegar_emocoes()&lt;/code&gt;, que recebe a URL de uma imagem da internet e uma chave de acesso, e retorna uma &lt;code&gt;tibble&lt;/code&gt; com as proporções das emoções em cada coluna.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pegar_emocoes &amp;lt;- function(u_img, key) {
  u_api &amp;lt;- &amp;#39;https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize&amp;#39;
  result &amp;lt;- httr::POST(
    url = u_api,
    httr::content_type(&amp;#39;application/json&amp;#39;), 
    httr::add_headers(.headers = c(&amp;#39;Ocp-Apim-Subscription-Key&amp;#39; = key)),
    body = list(url = u_img),
    encode = &amp;#39;json&amp;#39;
  )
  tibble::as_tibble(httr::content(result, &amp;#39;parsed&amp;#39;)[[1]]$scores)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, apliquei a função num vetor de links usando o funcional &lt;code&gt;purrr::map_df&lt;/code&gt;. Como resultado, temos essa base de dados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d_emocoes &amp;lt;- map_df(u_imagens, pegar_emocoes, key = key, .id = &amp;#39;id&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;anger&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;contempt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;disgust&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;fear&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;happiness&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;neutral&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sadness&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;surprise&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0004080&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000004&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9994901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000025&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1466579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1385524&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1392320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000411&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2569676&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3143989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0032987&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008515&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0759952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0321533&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0072514&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000727&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0007214&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6251250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2585501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0001311&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0772784&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1994352&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0216270&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008681&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0124632&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6709319&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0042846&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0131115&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0476197&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0467561&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0026372&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000568&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008743&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8483697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0532359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0004504&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2786264&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0922678&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0087203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0119777&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000222&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4820632&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0069891&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1193333&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;resultados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:media&#34;&gt;1&lt;/a&gt; mostra a média de cada emoção nas seis fotos. Para minha surpresa, a emoção com maior proporção média foi “neutro”, com peso de quase 50%. As emoções seguintes são “felicidade”, “raiva” e “desdém”. A emoção “tristeza”, que achei que seria frequente por conta da cara de dor do Aécio, ficou com uma proporção média de apenas 5,5%.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:media&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/media-1.png&#34; alt=&#34;Média de cada emoção nas seis fotos baixadas.&#34; width=&#34;864&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Média de cada emoção nas seis fotos baixadas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:each&#34;&gt;2&lt;/a&gt; mostra os resultados individuais das imagens. O primeiro resultado faz sentido, já que o Aécio está nitidamente rindo. Em todos os casos, é possível interpretar os resultados olhando a imagem. Por exemplo, o caso com “tristeza” mais alto é o que observamos as sombrancelhas mais caídas.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:each&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/each-1.png&#34; alt=&#34;Emoções do Aécio em cada imagem.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Emoções do Aécio em cada imagem.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusao&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Aparentemente minha hipótese estava errada. Aécio é um cara neutro e feliz, com acessos raiva de vez em quando (por favor, não interprete isso seriamente, é uma brincadeira!). Mas, sinceramente, achei que faltou na API uma emoção “cara de dor” para captar perfeitamente a expressão do Aécio. De qualquer forma, foi uma análise rápida e muito divertida de fazer. Se quiser replicá-la para outras imagens, acesse o &lt;a href=&#34;https://github.com/curso-r/site&#34;&gt;código fonte no repositório do GitHub que gera esse site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É isso. Happy coding ;)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Você está a menos de 1 km de um Hambúrguer?</title>
      <link>http://curso-r.com/blog/2017/04/10/2017-04-13-o-que-tem-a-um-km/</link>
      <pubDate>Mon, 10 Apr 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/10/2017-04-13-o-que-tem-a-um-km/</guid>
      <description>&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Se você estiver no centro de São Paulo, quanto será que você precisa andar para achar uma hamburgueria? Será que a sua casa fica a menos de 1 km de hospitais, delagacias ou corpo de bombeiros? Neste post, veremos como utilizar uma das APIs do Google Maps para obter informações de geolocalização a partir de uma pesquisa simples. Em seguida, vamos gerar mapas com o pacote &lt;code&gt;leaflet&lt;/code&gt; para visualizar os dados coletados e responder essas perguntas.&lt;/p&gt;
&lt;div id=&#34;passo-1-configurar-a-api-do-google-places&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 1: configurar a API do Google Places&lt;/h2&gt;
&lt;p&gt;A API que vamos utilizar para acessar os dados do Google Maps é a &lt;a href=&#34;https://developers.google.com/places/web-service/?hl=pt-br&#34;&gt;Google Places&lt;/a&gt;. Para configurá-la, você precisa fazer o seguinte:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;criar um projeto no &lt;a href=&#34;https://console.developers.google.com/iam-admin/projects&#34;&gt;Google APIs&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;adicionar a &lt;strong&gt;Google Places API Web Service&lt;/strong&gt; à sua biblioteca de APIs;&lt;/li&gt;
&lt;li&gt;obter uma &lt;a href=&#34;https://support.google.com/googleapi/answer/6158862&#34;&gt;chave de API&lt;/a&gt;; e&lt;/li&gt;
&lt;li&gt;enviar uma requisição.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para mais informações sobre os itens 1, 2 e 3, bastar acessar os links acima. Aqui, vamos focar em como fazer o item 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-2-baixar-os-dados-da-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 2: baixar os dados da API&lt;/h2&gt;
&lt;p&gt;A API do Google Places permite fazer &lt;a href=&#34;https://developers.google.com/places/web-service/search&#34;&gt;alguns tipos de buscas&lt;/a&gt;, como estabelecimentos específicos próximos a um local ou dentro de uma região pré-delimitada. Nosso objetivo aqui é requisitar os dados de todos os estabelecimentos, como hospitais, delegacias, supermercados, escolas etc, dentro de um raio de busca em torno de um ponto específico. Neste contexto, a requisição deve ser feita a partir de um link da forma&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://maps.googleapis.com/maps/api/place/radarsearch/output?parameters&#34; class=&#34;uri&#34;&gt;https://maps.googleapis.com/maps/api/place/radarsearch/output?parameters&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;substituindo &lt;em&gt;output&lt;/em&gt; pelo formato da saída, &lt;code&gt;xml&lt;/code&gt; ou &lt;code&gt;json&lt;/code&gt;, e &lt;em&gt;parameters&lt;/em&gt; pelos parâmetros de busca. Utilizaremos aqui o formato &lt;code&gt;json&lt;/code&gt;, &lt;em&gt;Javascript Object Notation&lt;/em&gt;. Para mais informações sobre JSON, consulte &lt;a href=&#34;http://www.devmedia.com.br/introducao-ao-formato-json/25275&#34;&gt;este link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Utilizaremos as seguintes bibliotecas nesta análise:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
library(magrittr)
library(dplyr)
library(stringr)
library(purrr)
library(RCurl)
library(jsonlite)
library(leaflet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que precisamos fazer é criar a url de requisição, acessá-la, guardar os dados no formato &lt;code&gt;json&lt;/code&gt; em um objeto e convertê-lo para um data frame. A função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; abaixo faz exatamente isso. Mais especificamente, ela recebe os parâmetros de busca, uma chave de API e retorna um data frame com os dados de geolocalização (latitude e longitude) dos resultados encontrados.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O argumento &lt;code&gt;keyword=&lt;/code&gt; recebe o termo a ser pesquisado, isto é, se estivermos pesquisando por escolas, esse argumento receberá a string &lt;code&gt;&#39;escola&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;type=&lt;/code&gt; recebe um termo para filtrar os estabelecimentos pesquisados. Por exemplo: &lt;code&gt;keyword = &#39;restaurante&#39;&lt;/code&gt; e &lt;code&gt;type = &#39;vegetariano&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Os argumentos &lt;code&gt;central_lat=&lt;/code&gt; e &lt;code&gt;central_log=&lt;/code&gt; representam, respectivamente, a latitude e a longitude do ponto central da busca. Os valores &lt;em&gt;default&lt;/em&gt; são os do centro da cidade de São Paulo.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;radius=&lt;/code&gt; indica o raio máximo de busca. O &lt;em&gt;default&lt;/em&gt; é 15 Km.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;key=&lt;/code&gt; deve receber a sua chave de API.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_googlemaps_data &amp;lt;- function(keyword, type = &amp;quot;&amp;quot;, central_lat = -23.55052, 
                                central_log = -46.63331, radius = 15000, key) {
  
  basic_url = &amp;quot;https://maps.googleapis.com/maps/api/place/radarsearch/json?&amp;quot;
  
  if(type != &amp;quot;&amp;quot;) {
    
    type %&amp;lt;&amp;gt;%
      str_replace_all(&amp;quot; &amp;quot;, &amp;quot;+&amp;quot;) %&amp;gt;%  # Os espaços precisam ser 
      str_c(&amp;quot;&amp;amp;type=&amp;quot;, .)             # substituídos por &amp;#39;+&amp;#39;.
  }
  
  complete_url &amp;lt;- str_c(basic_url,        # Criando a url de requisição
                       &amp;quot;location=&amp;quot;,       # com os parâmetros de busca.
                       central_lat,
                       &amp;quot;,&amp;quot;,
                       central_log,
                       &amp;quot;&amp;amp;radius=&amp;quot;,
                       radius,
                       type,
                       &amp;quot;&amp;amp;keyword=&amp;quot;,
                       str_replace_all(keyword, &amp;quot; &amp;quot;, &amp;quot;+&amp;quot;),
                       &amp;quot;&amp;amp;key=&amp;quot;,
                       key)
  
  json &amp;lt;- RCurl::getURL(complete_url)            # Acessando a URL.
  list_info &amp;lt;- jsonlite::fromJSON(json)   # Transformando json em lista.
  
  
  
  # Guardando a latitude e longitude em um df, assim como o lugar pesquisado.
  df &amp;lt;- tibble::tibble(lat = list_info$results$geometry$location$lat,
               long = list_info$results$geometry$location$lng,
               place = keyword)
   
  return(df)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; em mão, basta rodar o código &lt;code&gt;get_googlemaps_data(&amp;quot;mercado&amp;quot;, key = sua_API_key)&lt;/code&gt; para obter a geolocalização de até 200 mercados em um raio de até 15 Km do centro de São Paulo. Sim, o limite é de 200 resultados. Não encontrei maneiras de aumentar esse limite.&lt;/p&gt;
&lt;p&gt;Também podemos utilizar a função &lt;code&gt;purrr:map_df()&lt;/code&gt; para gerar um data frame com várias buscas. A função &lt;em&gt;map&lt;/em&gt; mapeia uma determinada função em cada elemento de um vetor/lista, retornando um data frame. Ainda não estamos construindo os mapas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;places &amp;lt;- c(&amp;quot;pronto socorro&amp;quot;, &amp;quot;delegacia&amp;quot;, &amp;quot;bombeiros&amp;quot;, &amp;quot;hamburguer&amp;quot;, &amp;quot;pizza&amp;quot;)

df_places &amp;lt;- places %&amp;gt;% 
  purrr::map_df(.f = get_googlemaps_data, key = key)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Às vezes, a requisição pode retornar com algum erro. Não consegui descobrir o porquê isso acontece. Nestes casos, a função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; também retornará um erro, provavelmente na construção do data frame. Se isso acontecer, basta rodar a função novamente, gerando uma nova requisição.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-3-os-mapas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 3: os mapas&lt;/h2&gt;
&lt;p&gt;Para construir os mapas, vamos utilizar a função &lt;code&gt;leaflet::leaflet()&lt;/code&gt;. A ideia é, para cada ponto da pesquisa, adicionar um círculo de raio igual a 1 Km. Dessa forma, se você estiver fora desses círculos, quer dizer que você estará a mais de um quilômetro de um dos estabelecimentos pesquisados. Veja os exemplos a seguir.&lt;/p&gt;
&lt;div id=&#34;hospitais&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hospitais&lt;/h3&gt;
&lt;p&gt;Eu pesquisei por “pronto socorro” porque a pesquisa hospitais também resulta em hospitais veterinários. Um desafio para quem for reproduzir a análise: coletar apenas a geolocalização de hospitais públicos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;pronto socorro&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5119153,-23.5373825,-23.5905932,-23.5980238,-23.5661976,-23.5845127,-23.4900198,-23.5307666,-23.6059136,-23.5312467,-23.5326516,-23.5705023,-23.6335601,-23.534041,-23.5633472,-23.5651576,-23.5672702,-23.5633193,-23.471358,-23.4714753,-23.5344188,-23.6610511,-23.5387329,-23.6053209,-23.5047759,-23.597356,-23.5254203,-23.4786019,-23.5836116,-23.5441918,-23.5686565,-23.5955258,-23.6166254,-23.5750806,-23.5595911,-23.513787,-23.6688347,-23.569463,-23.5498011,-23.5305855,-23.5305078,-23.5280111,-23.6055052,-23.6409921,-23.5910656,-23.5318183,-23.6334139,-23.5350449,-23.569428,-23.6591257,-23.5821893,-23.5965097,-23.6012416,-23.5317336,-23.5821425,-23.5556018,-23.6553285,-23.6563346,-23.5351773,-23.532219,-23.5280111,-23.5726548,-23.5696204,-23.480409,-23.4897055,-23.5730884,-23.4812918,-23.6247641,-23.546276,-23.6271409,-23.5467703,-23.522846,-23.627863,-23.6001558,-23.5637551,-23.5256167,-23.5952007,-23.5649897,-23.5498492,-23.527939,-23.656156,-23.569428,-23.4857742,-23.596556,-23.6234922,-23.5577053,-23.5390111,-23.6035905,-23.4880345,-23.5693739,-23.6247256,-23.665295,-23.5763024,-23.5563961,-23.5857137,-23.5974124,-23.5575111,-23.532343,-23.4622515,-23.4956783,-23.6025886,-23.5697277,-23.6134365,-23.6751151,-23.613621,-23.5571698,-23.6533311,-23.5686923,-23.5832658,-23.485263,-23.5608918,-23.681394,-23.5368947,-23.6502386,-23.5848796,-23.6057328,-23.5778832,-23.5736788,-23.6361573,-23.6055779,-23.5388485,-23.4786665,-23.5331447,-23.5342429,-23.5256207,-23.4659604,-23.5632955,-23.5730539,-23.5317657,-23.5048116,-23.6139389,-23.5737579,-23.544043,-23.5374351,-23.5488919,-23.570874,-23.5655057,-23.574066,-23.5718713,-23.5848044,-23.5359999,-23.5908277,-23.5635485,-23.4873362,-23.4626237,-23.5227691,-23.5236666,-23.6500238,-23.5312246,-23.5843036,-23.6515538,-23.5814177,-23.6058157,-23.600342,-23.5928542,-23.5146009,-23.572769,-23.5348803,-23.524877],[-46.626602,-46.7222414,-46.673017,-46.6437783,-46.682266,-46.7389951,-46.6886567,-46.6856687,-46.6763323,-46.6527279,-46.6774696,-46.53894,-46.6076853,-46.6880346,-46.5898581,-46.642401,-46.7769605,-46.5899109,-46.5291812,-46.528803,-46.5664698,-46.563856,-46.7767891,-46.6756819,-46.6251452,-46.629591,-46.7110851,-46.5508029,-46.6518868,-46.585348,-46.5857234,-46.6517141,-46.7772604,-46.6690268,-46.6554808,-46.764427,-46.5292085,-46.58553,-46.6595009,-46.697351,-46.697102,-46.6713828,-46.6759325,-46.527937,-46.7036527,-46.621152,-46.6076329,-46.6544871,-46.6616889,-46.6983633,-46.6411569,-46.6536998,-46.6614068,-46.6211242,-46.614028,-46.6728642,-46.5741254,-46.5576687,-46.6601049,-46.7807695,-46.6713828,-46.7229714,-46.6872959,-46.592692,-46.7270244,-46.6960888,-46.7443021,-46.6836816,-46.764964,-46.6386548,-46.7623576,-46.681074,-46.698738,-46.6868637,-46.5904111,-46.5482745,-46.6443238,-46.740635,-46.659294,-46.671341,-46.527015,-46.6616889,-46.6167614,-46.5029179,-46.5653918,-46.6542899,-46.6836854,-46.6558622,-46.6272406,-46.6459197,-46.5640802,-46.527457,-46.6942676,-46.6668833,-46.7177055,-46.6437032,-46.6700211,-46.7769437,-46.5326045,-46.6253623,-46.6518983,-46.6455781,-46.6204509,-46.6856038,-46.6680398,-46.68009,-46.645613,-46.6218602,-46.6117961,-46.6951351,-46.650708,-46.6765187,-46.5894992,-46.7050412,-46.6633198,-46.7505598,-46.7080483,-46.6440605,-46.6947841,-46.675879,-46.6620469,-46.5515213,-46.5663969,-46.6880714,-46.711545,-46.5500737,-46.5899932,-46.6435409,-46.7816035,-46.6251289,-46.6500781,-46.64404,-46.5855476,-46.7769366,-46.558181,-46.6417978,-46.6797014,-46.6391822,-46.5901717,-46.6511464,-46.5752707,-46.6724233,-46.6341114,-46.622235,-46.5198252,-46.5426888,-46.702101,-46.7041659,-46.652742,-46.6115469,-46.7048926,-46.6402724,-46.7624952,-46.678413,-46.637764,-46.7785894,-46.6533613,-46.6747363,-46.693907],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.681394,-23.4622515],&#34;lng&#34;:[-46.7816035,-46.5029179]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;delegacias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Delegacias&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;delegacia&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5383123,-23.5297102,-23.5491121,-23.5661229,-23.5688572,-23.4833831,-23.5818477,-23.5298608,-23.5676202,-23.5736771,-23.6227807,-23.4973232,-23.5480212,-23.6791763,-23.5307283,-23.5232008,-23.4783837,-23.601847,-23.5539712,-23.536114,-23.6017882,-23.5098708,-23.4947088,-23.4828219,-23.540883,-23.4673945,-23.6708491,-23.6724756,-23.5987292,-23.5618211,-23.5005049,-23.5568327,-23.653363,-23.5384537,-23.5282851,-23.530853,-23.6468868,-23.6741719,-23.5176746,-23.672469,-23.621305,-23.4731505,-23.6544644,-23.5677311,-23.5384589,-23.6631936,-23.4536045,-23.5489679,-23.5587444,-23.5483289,-23.5459635,-23.5330143,-23.5582539,-23.6737026,-23.5618494,-23.5384554,-23.5231331,-23.579318,-23.6038083,-23.5004539,-23.593785,-23.5361383,-23.6084084,-23.6044058,-23.6565533,-23.5618494,-23.6152646,-23.5500639,-23.5539385,-23.517843,-23.5393787,-23.5023122,-23.6536219,-23.5370451,-23.4947663,-23.6851638,-23.6244069,-23.579318,-23.6717429,-23.5704692,-23.6082049,-23.5353879,-23.579318,-23.4986159,-23.5436404,-23.667303,-23.639554,-23.5393787,-23.5624913,-23.5032441,-23.6153852,-23.6015128,-23.4819928,-23.5459648,-23.5630819,-23.6082362,-23.5388766,-23.5880807,-23.4722036,-23.5289099,-23.6620073,-23.639544,-23.5791521,-23.563454,-23.5430169,-23.6526437,-23.5590782,-23.4556602,-23.6661731,-23.5361564,-23.5311036,-23.5397311,-23.6629003,-23.5310719,-23.536939,-23.5569805,-23.6074999,-23.6567851,-23.5898128,-23.5905868,-23.494313,-23.5587444,-23.4586306,-23.675735,-23.5224255,-23.671542,-23.4536083,-23.53119,-23.5703925,-23.5866997,-23.5054754,-23.6417051,-23.645051,-23.6560117,-23.496984,-23.6219196,-23.6238475,-23.4691728,-23.5282622,-23.5655047,-23.6391001,-23.5126143,-23.469647,-23.5308639,-23.4821316,-23.5361804,-23.5550709,-23.5633395,-23.5382476,-23.5020195,-23.607243,-23.4697691,-23.6741952,-23.4826847,-23.5548435,-23.5120658,-23.4632301,-23.61534,-23.5291141,-23.5234202,-23.6623062,-23.5480535,-23.5384403,-23.532582,-23.5470754,-23.4457197,-23.4635218,-23.5914264,-23.6592795,-23.5351522,-23.6527115,-23.6652897,-23.5377226,-23.6329062,-23.53297,-23.552832,-23.538416,-23.5480557,-23.6673949,-23.5280618,-23.524188,-23.4881236],[-46.6352041,-46.6123622,-46.6374832,-46.6693192,-46.5845768,-46.5899152,-46.6745046,-46.6124474,-46.6237268,-46.5576533,-46.6021564,-46.7457932,-46.6315625,-46.7126109,-46.6427928,-46.6443684,-46.6211789,-46.6377563,-46.4922562,-46.7751834,-46.6377661,-46.4978574,-46.6976676,-46.7280477,-46.6295377,-46.5225908,-46.5476651,-46.6057142,-46.5332901,-46.6912479,-46.64915,-46.6342131,-46.5509209,-46.6350792,-46.7685576,-46.7811049,-46.7074536,-46.5414885,-46.772271,-46.6057579,-46.5578478,-46.5443008,-46.5434002,-46.6717472,-46.6350712,-46.7562845,-46.5554563,-46.537173,-46.7467745,-46.5937954,-46.6350048,-46.6452216,-46.5701152,-46.6598129,-46.6913228,-46.6350996,-46.5187069,-46.5176508,-46.5949903,-46.6492117,-46.5671434,-46.5634063,-46.7360393,-46.6929346,-46.6138111,-46.6913228,-46.6749929,-46.5677175,-46.4922485,-46.5848652,-46.6396037,-46.6156983,-46.6332473,-46.5266046,-46.6977393,-46.6374671,-46.5275439,-46.5176508,-46.5129268,-46.5916434,-46.5710604,-46.5845374,-46.5176508,-46.7710681,-46.7772102,-46.6089909,-46.5626729,-46.6396037,-46.5452257,-46.6129232,-46.67501,-46.637479,-46.7252233,-46.6350021,-46.6544211,-46.5008084,-46.7310141,-46.7268396,-46.5356924,-46.5547585,-46.6869911,-46.6432063,-46.6508845,-46.6978678,-46.6439468,-46.574482,-46.4887345,-46.5131197,-46.586866,-46.5633416,-46.7750776,-46.6452333,-46.7561995,-46.7815275,-46.6653663,-46.6343713,-46.75687,-46.6690569,-46.5532082,-46.6087861,-46.6779309,-46.7467745,-46.5852411,-46.7122978,-46.7058875,-46.5132349,-46.555436,-46.7749852,-46.5915033,-46.5802153,-46.6281239,-46.5288368,-46.525143,-46.5453301,-46.74604,-46.5202035,-46.5369112,-46.6897364,-46.7686436,-46.6380865,-46.5596799,-46.7690733,-46.5378169,-46.7810029,-46.7253273,-46.5634639,-46.6617883,-46.6966132,-46.6341476,-46.6269636,-46.7378895,-46.5241902,-46.5413976,-46.5385258,-46.4922591,-46.6224467,-46.5029513,-46.5723998,-46.7730005,-46.7104606,-46.6869197,-46.6485013,-46.6350638,-46.660818,-46.6332689,-46.717044,-46.6788482,-46.6069425,-46.5263037,-46.57783,-46.5334081,-46.5242607,-46.5291609,-46.7704662,-46.5260099,-46.7738949,-46.6348528,-46.7615798,-46.608524,-46.7100248,-46.688206,-46.5492603],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6851638,-23.4457197],&#34;lng&#34;:[-46.7815275,-46.4887345]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;bombeiros&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bombeiros&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;delegacia&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5383123,-23.5297102,-23.5491121,-23.5661229,-23.5688572,-23.4833831,-23.5818477,-23.5298608,-23.5676202,-23.5736771,-23.6227807,-23.4973232,-23.5480212,-23.6791763,-23.5307283,-23.5232008,-23.4783837,-23.601847,-23.5539712,-23.536114,-23.6017882,-23.5098708,-23.4947088,-23.4828219,-23.540883,-23.4673945,-23.6708491,-23.6724756,-23.5987292,-23.5618211,-23.5005049,-23.5568327,-23.653363,-23.5384537,-23.5282851,-23.530853,-23.6468868,-23.6741719,-23.5176746,-23.672469,-23.621305,-23.4731505,-23.6544644,-23.5677311,-23.5384589,-23.6631936,-23.4536045,-23.5489679,-23.5587444,-23.5483289,-23.5459635,-23.5330143,-23.5582539,-23.6737026,-23.5618494,-23.5384554,-23.5231331,-23.579318,-23.6038083,-23.5004539,-23.593785,-23.5361383,-23.6084084,-23.6044058,-23.6565533,-23.5618494,-23.6152646,-23.5500639,-23.5539385,-23.517843,-23.5393787,-23.5023122,-23.6536219,-23.5370451,-23.4947663,-23.6851638,-23.6244069,-23.579318,-23.6717429,-23.5704692,-23.6082049,-23.5353879,-23.579318,-23.4986159,-23.5436404,-23.667303,-23.639554,-23.5393787,-23.5624913,-23.5032441,-23.6153852,-23.6015128,-23.4819928,-23.5459648,-23.5630819,-23.6082362,-23.5388766,-23.5880807,-23.4722036,-23.5289099,-23.6620073,-23.639544,-23.5791521,-23.563454,-23.5430169,-23.6526437,-23.5590782,-23.4556602,-23.6661731,-23.5361564,-23.5311036,-23.5397311,-23.6629003,-23.5310719,-23.536939,-23.5569805,-23.6074999,-23.6567851,-23.5898128,-23.5905868,-23.494313,-23.5587444,-23.4586306,-23.675735,-23.5224255,-23.671542,-23.4536083,-23.53119,-23.5703925,-23.5866997,-23.5054754,-23.6417051,-23.645051,-23.6560117,-23.496984,-23.6219196,-23.6238475,-23.4691728,-23.5282622,-23.5655047,-23.6391001,-23.5126143,-23.469647,-23.5308639,-23.4821316,-23.5361804,-23.5550709,-23.5633395,-23.5382476,-23.5020195,-23.607243,-23.4697691,-23.6741952,-23.4826847,-23.5548435,-23.5120658,-23.4632301,-23.61534,-23.5291141,-23.5234202,-23.6623062,-23.5480535,-23.5384403,-23.532582,-23.5470754,-23.4457197,-23.4635218,-23.5914264,-23.6592795,-23.5351522,-23.6527115,-23.6652897,-23.5377226,-23.6329062,-23.53297,-23.552832,-23.538416,-23.5480557,-23.6673949,-23.5280618,-23.524188,-23.4881236],[-46.6352041,-46.6123622,-46.6374832,-46.6693192,-46.5845768,-46.5899152,-46.6745046,-46.6124474,-46.6237268,-46.5576533,-46.6021564,-46.7457932,-46.6315625,-46.7126109,-46.6427928,-46.6443684,-46.6211789,-46.6377563,-46.4922562,-46.7751834,-46.6377661,-46.4978574,-46.6976676,-46.7280477,-46.6295377,-46.5225908,-46.5476651,-46.6057142,-46.5332901,-46.6912479,-46.64915,-46.6342131,-46.5509209,-46.6350792,-46.7685576,-46.7811049,-46.7074536,-46.5414885,-46.772271,-46.6057579,-46.5578478,-46.5443008,-46.5434002,-46.6717472,-46.6350712,-46.7562845,-46.5554563,-46.537173,-46.7467745,-46.5937954,-46.6350048,-46.6452216,-46.5701152,-46.6598129,-46.6913228,-46.6350996,-46.5187069,-46.5176508,-46.5949903,-46.6492117,-46.5671434,-46.5634063,-46.7360393,-46.6929346,-46.6138111,-46.6913228,-46.6749929,-46.5677175,-46.4922485,-46.5848652,-46.6396037,-46.6156983,-46.6332473,-46.5266046,-46.6977393,-46.6374671,-46.5275439,-46.5176508,-46.5129268,-46.5916434,-46.5710604,-46.5845374,-46.5176508,-46.7710681,-46.7772102,-46.6089909,-46.5626729,-46.6396037,-46.5452257,-46.6129232,-46.67501,-46.637479,-46.7252233,-46.6350021,-46.6544211,-46.5008084,-46.7310141,-46.7268396,-46.5356924,-46.5547585,-46.6869911,-46.6432063,-46.6508845,-46.6978678,-46.6439468,-46.574482,-46.4887345,-46.5131197,-46.586866,-46.5633416,-46.7750776,-46.6452333,-46.7561995,-46.7815275,-46.6653663,-46.6343713,-46.75687,-46.6690569,-46.5532082,-46.6087861,-46.6779309,-46.7467745,-46.5852411,-46.7122978,-46.7058875,-46.5132349,-46.555436,-46.7749852,-46.5915033,-46.5802153,-46.6281239,-46.5288368,-46.525143,-46.5453301,-46.74604,-46.5202035,-46.5369112,-46.6897364,-46.7686436,-46.6380865,-46.5596799,-46.7690733,-46.5378169,-46.7810029,-46.7253273,-46.5634639,-46.6617883,-46.6966132,-46.6341476,-46.6269636,-46.7378895,-46.5241902,-46.5413976,-46.5385258,-46.4922591,-46.6224467,-46.5029513,-46.5723998,-46.7730005,-46.7104606,-46.6869197,-46.6485013,-46.6350638,-46.660818,-46.6332689,-46.717044,-46.6788482,-46.6069425,-46.5263037,-46.57783,-46.5334081,-46.5242607,-46.5291609,-46.7704662,-46.5260099,-46.7738949,-46.6348528,-46.7615798,-46.608524,-46.7100248,-46.688206,-46.5492603],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6851638,-23.4457197],&#34;lng&#34;:[-46.7815275,-46.4887345]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;hamburguerias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hamburguerias&lt;/h3&gt;
&lt;p&gt;Repare que o único local na região mais central de SP em que você pode ficar a mais de um quilômetro de uma hamburgueria é no meio do parque Ibirapuera.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;hamburguer&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.591146,-23.5336461,-23.5838986,-23.5503624,-23.6592217,-23.542275,-23.5797476,-23.596576,-23.5338269,-23.4733347,-23.5266223,-23.5665607,-23.6085312,-23.5553724,-23.506423,-23.4543601,-23.504678,-23.573054,-23.4381869,-23.6018597,-23.578114,-23.485509,-23.5634841,-23.580141,-23.5010416,-23.5346422,-23.5041882,-23.5355418,-23.6089377,-23.5132051,-23.562808,-23.5852957,-23.5613203,-23.5711904,-23.616063,-23.6531883,-23.5090555,-23.5689164,-23.5793803,-23.6262204,-23.5627803,-23.5971131,-23.5678876,-23.628948,-23.5734327,-23.5648008,-23.6009047,-23.556679,-23.6463528,-23.5527839,-23.5465054,-23.5629637,-23.5850463,-23.5599597,-23.6012908,-23.5884194,-23.6240267,-23.566246,-23.5353525,-23.573761,-23.5514768,-23.5373816,-23.5653794,-23.588201,-23.5865903,-23.564753,-23.5147827,-23.5840682,-23.588146,-23.5658447,-23.490545,-23.5821723,-23.592777,-23.6104166,-23.6283446,-23.5389528,-23.5265647,-23.5909182,-23.5578,-23.5742941,-23.5838378,-23.6221529,-23.6448208,-23.595291,-23.6205597,-23.5854537,-23.5543718,-23.5416911,-23.5496606,-23.6532202,-23.5277805,-23.5951434,-23.559425,-23.5553229,-23.5640467,-23.5527584,-23.4836366,-23.5644229,-23.548505,-23.6317016,-23.5638728,-23.5390531,-23.603755,-23.5443723,-23.5828457,-23.5072434,-23.5569599,-23.5805003,-23.5610006,-23.5750971,-23.60095,-23.5693968,-23.616657,-23.58057,-23.5249596,-23.4888868,-23.5895836,-23.6477982,-23.5030827,-23.5700128,-23.5017743,-23.601558,-23.6027181,-23.6059682,-23.568254,-23.4576,-23.5629422,-23.582909,-23.5861822,-23.5934347,-23.5754347,-23.5562148,-23.5398958,-23.5453293,-23.4571858,-23.5831264,-23.5842987,-23.5939793,-23.663584,-23.585636,-23.4581943,-23.5837427,-23.561829,-23.572453,-23.6571708,-23.6107976,-23.653277,-23.5524716,-23.5955253,-23.628859,-23.5879004,-23.504576,-23.595446,-23.6605752,-23.5807706,-23.6136682,-23.535474,-23.5840187,-23.5735392,-23.6126085,-23.5348174,-23.6775988,-23.581018,-23.6324146,-23.5733291,-23.5667822,-23.5571388,-23.5938663,-23.5476359,-23.557399,-23.4595221,-23.5354543,-23.5581649,-23.591519,-23.6570493,-23.539445,-23.591926,-23.5552675,-23.5606171,-23.5604561,-23.5272591,-23.603121,-23.6838816,-23.4943751,-23.4888327,-23.5388857,-23.6083724,-23.4916797,-23.5545398,-23.6454166,-23.5753351,-23.5705675,-23.5739331,-23.5776088,-23.5850495],[-46.606932,-46.6789657,-46.6715329,-46.721243,-46.691653,-46.671616,-46.6401764,-46.645059,-46.6765012,-46.6181558,-46.6809673,-46.6847769,-46.6689898,-46.6672214,-46.6050108,-46.5086841,-46.766024,-46.6957717,-46.5103477,-46.6856274,-46.5864917,-46.6099852,-46.6526611,-46.594538,-46.6234912,-46.6803639,-46.6397583,-46.6682289,-46.6380647,-46.6634067,-46.664692,-46.6851425,-46.6940645,-46.6562935,-46.637284,-46.5741857,-46.6272089,-46.6489332,-46.6749766,-46.6716679,-46.5933429,-46.6679397,-46.6887612,-46.735678,-46.6559783,-46.6813804,-46.6591207,-46.6585153,-46.5411584,-46.6604487,-46.6488861,-46.6671203,-46.67572,-46.6966738,-46.6481923,-46.7178619,-46.6707122,-46.6891856,-46.674463,-46.643287,-46.6512416,-46.6717551,-46.6660143,-46.6070784,-46.6748572,-46.596838,-46.586678,-46.6798554,-46.6807579,-46.6828788,-46.650642,-46.6835917,-46.620418,-46.7270365,-46.6884155,-46.7059855,-46.7087878,-46.680252,-46.6482,-46.5862013,-46.6726088,-46.6716779,-46.7167793,-46.686661,-46.6722255,-46.6884378,-46.6574396,-46.6581628,-46.5732107,-46.715117,-46.6858916,-46.6864676,-46.69182,-46.6671431,-46.6791396,-46.5878087,-46.6142181,-46.6650737,-46.68556,-46.7356058,-46.6955912,-46.7065395,-46.637025,-46.662176,-46.6699937,-46.5891467,-46.6365449,-46.6748554,-46.6978423,-46.6231729,-46.66784,-46.7790474,-46.5617949,-46.639328,-46.5484904,-46.632508,-46.6771678,-46.5330954,-46.6331541,-46.5918849,-46.7387239,-46.645919,-46.6365449,-46.6716015,-46.663007,-46.5035,-46.6689186,-46.649674,-46.6801062,-46.6378852,-46.6214206,-46.6874742,-46.5722354,-46.5662897,-46.5375642,-46.6762251,-46.6812884,-46.6893669,-46.5278969,-46.6844028,-46.6163259,-46.5746757,-46.663569,-46.696094,-46.692626,-46.6857479,-46.715073,-46.5732339,-46.6703355,-46.7323372,-46.6340808,-46.6404152,-46.6665919,-46.5382408,-46.6386028,-46.661306,-46.774918,-46.5787994,-46.6317331,-46.6674626,-46.6967788,-46.6979911,-46.676953,-46.7067056,-46.6896656,-46.5041049,-46.6590561,-46.684693,-46.5405164,-46.6616889,-46.5255218,-46.6584795,-46.6795316,-46.690243,-46.6794921,-46.6815967,-46.689909,-46.6630835,-46.6776155,-46.6536749,-46.6747875,-46.667028,-46.5576865,-46.622905,-46.5485872,-46.7810428,-46.6707483,-46.5789318,-46.6886172,-46.6725334,-46.6232265,-46.6435321,-46.6052905,-46.6863864,-46.6849714],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6838816,-23.4381869],&#34;lng&#34;:[-46.7810428,-46.5035]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;pizzarias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pizzarias&lt;/h3&gt;
&lt;p&gt;Se a busca devolvesse todos os resultados possíveis, esse mapa teria um círculo azul com ~15 km de raio formado por milhares de círculos menores. =D&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;pizza&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.6377832,-23.4462145,-23.5424359,-23.4774627,-23.5419111,-23.6024847,-23.541106,-23.6457094,-23.509009,-23.553901,-23.50269,-23.5329118,-23.5422104,-23.5661403,-23.5452462,-23.5577665,-23.6636748,-23.493779,-23.5705867,-23.6504283,-23.5802283,-23.5569862,-23.6518754,-23.430156,-23.6023253,-23.5556,-23.6132131,-23.5295159,-23.640748,-23.477944,-23.6220978,-23.646009,-23.5600239,-23.5594337,-23.602824,-23.5436359,-23.6852789,-23.5517875,-23.5513039,-23.625363,-23.5396657,-23.5358895,-23.5517621,-23.564383,-23.5506128,-23.5412163,-23.5582873,-23.5303699,-23.564862,-23.532627,-23.5895741,-23.5433224,-23.5949926,-23.602252,-23.5004078,-23.4821581,-23.4982069,-23.5071623,-23.5126657,-23.611988,-23.5372528,-23.5590171,-23.5220143,-23.5770825,-23.6637534,-23.6503046,-23.5190645,-23.4820189,-23.5194119,-23.5653705,-23.584995,-23.6172893,-23.6474922,-23.570713,-23.5295945,-23.5665179,-23.6149595,-23.569128,-23.5835924,-23.605047,-23.5478937,-23.583501,-23.5393727,-23.4732888,-23.549809,-23.4895174,-23.5631008,-23.4927203,-23.532557,-23.587089,-23.5419694,-23.6456114,-23.6209898,-23.6148053,-23.5539137,-23.5500438,-23.5640781,-23.5990557,-23.5821783,-23.6150855,-23.4411447,-23.5683413,-23.5727553,-23.523788,-23.5494877,-23.5123431,-23.5295488,-23.5065289,-23.54339,-23.532351,-23.5834382,-23.5567547,-23.4434337,-23.5572059,-23.6359365,-23.5311848,-23.5795604,-23.5719321,-23.6100783,-23.5974629,-23.6101259,-23.4717705,-23.487415,-23.5819812,-23.5553385,-23.466982,-23.5284249,-23.6332724,-23.547883,-23.599827,-23.4674635,-23.5919894,-23.560073,-23.562154,-23.6185319,-23.6157414,-23.5624923,-23.492689,-23.5444475,-23.5317319,-23.637594,-23.5927858,-23.6131211,-23.4502679,-23.6304068,-23.4431003,-23.5411737,-23.5452338,-23.5595533,-23.574389,-23.5397174,-23.5108,-23.654038,-23.6449382,-23.6230042,-23.5696743,-23.5264596,-23.6101022,-23.5266181,-23.604193,-23.5354641,-23.6452682,-23.547914,-23.5420478,-23.5650258,-23.645387,-23.618032,-23.6227371,-23.6043214,-23.533478,-23.5430459,-23.4996677,-23.607763,-23.6800724,-23.5299556,-23.525889,-23.572832,-23.5466296,-23.5405145,-23.6241098,-23.5338992,-23.4963454,-23.5866832,-23.5518073,-23.4958908,-23.6381805,-23.4663278,-23.5352615,-23.6037182,-23.5991756,-23.5346009,-23.6614632,-23.5608229,-23.5001646],[-46.6547524,-46.5332262,-46.657693,-46.620587,-46.5588801,-46.6198086,-46.569886,-46.6078521,-46.777435,-46.754586,-46.584696,-46.6912456,-46.7707031,-46.652538,-46.7628693,-46.6591531,-46.688653,-46.631612,-46.6434567,-46.5388143,-46.5943854,-46.6326943,-46.5349826,-46.656682,-46.6719859,-46.647515,-46.495481,-46.6857871,-46.6409195,-46.545149,-46.5743651,-46.545329,-46.6636453,-46.6728148,-46.6932222,-46.5619613,-46.562003,-46.544057,-46.5627324,-46.58666,-46.4884504,-46.4974936,-46.5959409,-46.547359,-46.5647461,-46.7437258,-46.6753184,-46.5162473,-46.594627,-46.6897196,-46.6317874,-46.6728329,-46.6313316,-46.661709,-46.6213143,-46.5832032,-46.76981,-46.6708127,-46.6618355,-46.588661,-46.52505,-46.5979523,-46.5220586,-46.5876893,-46.5279125,-46.5389086,-46.7807405,-46.6222273,-46.6763059,-46.6827195,-46.618676,-46.6738651,-46.5161353,-46.6260225,-46.6791571,-46.6542167,-46.7427533,-46.6889177,-46.6889935,-46.66462,-46.5664101,-46.685952,-46.5892121,-46.5448818,-46.6450709,-46.5945648,-46.5476234,-46.7153071,-46.659038,-46.633976,-46.5479707,-46.5073347,-46.67349,-46.7669403,-46.6891084,-46.554711,-46.6795783,-46.6373388,-46.6792503,-46.6675042,-46.5564483,-46.6578993,-46.69551,-46.693134,-46.6458761,-46.5147357,-46.5274241,-46.7184862,-46.7687562,-46.685107,-46.7505034,-46.7531604,-46.5441554,-46.7486309,-46.7121613,-46.6827964,-46.7386436,-46.6268869,-46.6882732,-46.7317588,-46.666563,-46.6373485,-46.6332363,-46.7327819,-46.5880192,-46.6034698,-46.5271221,-46.7049679,-46.657564,-46.6728546,-46.5160969,-46.643832,-46.698603,-46.646222,-46.571754,-46.6435343,-46.6676688,-46.629935,-46.6214891,-46.7177885,-46.5468276,-46.6449969,-46.5762207,-46.5443476,-46.7359753,-46.5493277,-46.5896285,-46.6518954,-46.6816634,-46.726939,-46.7796091,-46.508914,-46.534698,-46.7149926,-46.5726881,-46.5456595,-46.7669566,-46.5324295,-46.6966314,-46.669199,-46.7124692,-46.5933522,-46.753617,-46.7776072,-46.6809555,-46.5742119,-46.6789757,-46.639773,-46.7494812,-46.704333,-46.5526644,-46.6438895,-46.573151,-46.6550872,-46.7284971,-46.687889,-46.540983,-46.6387818,-46.6509312,-46.5578388,-46.6931313,-46.7255467,-46.5805153,-46.7500256,-46.6669341,-46.5434583,-46.5601988,-46.5096595,-46.6580583,-46.6116123,-46.64933,-46.6946439,-46.5846951,-46.5243514],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6852789,-23.430156],&#34;lng&#34;:[-46.7807405,-46.4884504]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Sem dúvidas, a utilização dos dados aqui foi bem superficial, apenas ilustrativa. O ideal seria juntar essas informações de geolocalização com dados de criminalidade, saúde pública, socioeconômicos, consumo etc. Dependendo da disponibilidade de dados, há espaço para muitas análises interessantes utilizando essas informações do Google Maps. Com certeza voltaremos neste assunto em posts futuros. =)&lt;/p&gt;
&lt;p&gt;Comentários? Sugestões? Críticas? Você está a menos de um quilômetro dos comentários! Deixe a sua mensagem!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>As barras do progresso</title>
      <link>http://curso-r.com/blog/2017/04/10/2017-04-08-progress/</link>
      <pubDate>Mon, 10 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/10/2017-04-08-progress/</guid>
      <description>&lt;p&gt;Na jornada da ciência de dados, muitas vezes precisamos rodar um mesmo algoritmo em vários objetos distintos. Quando o algoritmo é pesado ou a lista de objetos é longa, é importante saber em que passo estamos e quanto vai demorar para terminar.&lt;/p&gt;
&lt;p&gt;Uma forma de resolver esse problema é usando o pacote &lt;code&gt;progress&lt;/code&gt;. O objeto &lt;code&gt;progress_bar&lt;/code&gt; desse pacote é do tipo &lt;a href=&#34;https://cran.r-project.org/web/packages/R6/vignettes/Introduction.html&#34;&gt;&lt;code&gt;R6&lt;/code&gt;&lt;/a&gt; e tem um método &lt;code&gt;new()&lt;/code&gt; para criar objetos do tipo “barra”. Uma barra criada também é do tipo &lt;code&gt;R6&lt;/code&gt; e possui o método &lt;code&gt;tick()&lt;/code&gt; para imprimir uma barra de progresso no console.&lt;/p&gt;
&lt;p&gt;No exemplo abaixo, nosso interesse é aplicar a função &lt;code&gt;funcao_demorada&lt;/code&gt; nos números &lt;code&gt;1:5&lt;/code&gt; (um de cada vez, sem usar vetorização) e guardá-los numa lista.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;funcao_demorada &amp;lt;- function(x) {
  Sys.sleep(0.5)
  x ^ 2
}
nums &amp;lt;- 1:5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos fazer isso usando o pacote &lt;code&gt;progress&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barra &amp;lt;- progress::progress_bar$new(total = length(nums)) # cria a barra

resultados &amp;lt;- list()
for (x in nums) {
  barra$tick() # dá um passo
  resultados[[x]] &amp;lt;- funcao_demorada(x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como resultados, temos:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resultados
## [[1]]
## [1] 1
## 
## [[2]]
## [1] 4
## 
## [[3]]
## [1] 9
## 
## [[4]]
## [1] 16
## 
## [[5]]
## [1] 25&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No entanto, sabemos que os laços &lt;code&gt;for&lt;/code&gt; e &lt;code&gt;while&lt;/code&gt; do &lt;code&gt;R&lt;/code&gt; &lt;a href=&#34;http://stackoverflow.com/questions/7142767/why-are-loops-slow-in-r&#34;&gt;são problemáticos&lt;/a&gt;. A melhor e mais estilosa forma de fazer esse tipo de operação no &lt;code&gt;R&lt;/code&gt; é usando &lt;em&gt;funcionais&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Funcionais são funções de funções. Usamos esses caras sempre que queremos aplicar uma função a diversos objetos. Eles são alternativas mais concisas, elegantes e muitas vezes mais eficientes do que os conhecidos &lt;code&gt;for&lt;/code&gt; e &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exemplos de funcionais são os objetos da família &lt;code&gt;**ply&lt;/code&gt; (&lt;code&gt;lapply&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;sapply&lt;/code&gt; etc.) Os funcionais do R básico foram generalizados no pacote &lt;code&gt;plyr&lt;/code&gt;, que apresenta uma sintaxe organizada e intuitiva.&lt;/p&gt;
&lt;p&gt;Uma vantagem do &lt;code&gt;plyr&lt;/code&gt; é a possibilidade de adicionar barras de progresso como um parâmetro dos funcionais.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resultados &amp;lt;- plyr::llply(nums, funcao_demorada, .progress = &amp;#39;text&amp;#39;)
## 
  |                                                                       
  |                                                                 |   0%
  |                                                                       
  |=============                                                    |  20%
  |                                                                       
  |==========================                                       |  40%
  |                                                                       
  |=======================================                          |  60%
  |                                                                       
  |====================================================             |  80%
  |                                                                       
  |=================================================================| 100%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Os resultados são idênticos e foram omitidos. Bem mais simples, não?&lt;/p&gt;
&lt;div id=&#34;usando-purrmap-no-lugar-de-plyrllply&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usando &lt;code&gt;purr::map&lt;/code&gt; no lugar de &lt;code&gt;plyr::llply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Recentemente, boa parte das funções do &lt;code&gt;plyr&lt;/code&gt; foram substituídas por alternativas nos pacotes &lt;code&gt;dplyr&lt;/code&gt; (operações envolvendo &lt;code&gt;data.frame&lt;/code&gt;s) e &lt;code&gt;purrr&lt;/code&gt; (operações envolvendo vetores e listas). Esses pacotes apresentam uma sintaxe mais próxima da &lt;a href=&#34;http://curso-r.com/blog/2017/02/15/2017-02-16-manifesto-tidy/&#34;&gt;filosofia &lt;code&gt;tidy&lt;/code&gt;&lt;/a&gt; e portanto faz sentido estudá-los!&lt;/p&gt;
&lt;p&gt;Infelizmente, as funções do &lt;code&gt;purrr&lt;/code&gt; ainda&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; não têm um parâmetro para barras de progresso. Enquanto isso, podemos utilizar o &lt;code&gt;progress::progress_bar&lt;/code&gt; mesmo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barra &amp;lt;- progress::progress_bar$new(total = length(nums))
resultados &amp;lt;- purrr::map(nums, ~{
  barra$tick()
  funcao_demorada(.x)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O código fica parecido com solução usando &lt;code&gt;for()&lt;/code&gt;, mas pelo menos estamos usando os pacotes mais recentes ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;eficiencia&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eficiência&lt;/h2&gt;
&lt;p&gt;As soluções que mostrei acima apresentam diferenças importantes de eficiência. Abaixo, encapsulei os códigos em funções e mudei levemente a operação que queremos fazer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nums &amp;lt;- 1:100
funcao_rapida &amp;lt;- function(x) {
  x ^ 2
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;for()&lt;/code&gt;, com e sem progresso:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for_com &amp;lt;- function(nums) {
  barra &amp;lt;- progress::progress_bar$new(total = length(nums))
  resultados &amp;lt;- list()
  for(x in nums) {
    barra$tick()
    resultados[[x]] &amp;lt;- funcao_rapida(x)
  }
  resultados
}
for_sem &amp;lt;- function(nums) {
  resultados &amp;lt;- list()
  for(x in nums) resultados[[x]] &amp;lt;- funcao_rapida(x)
  resultados
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;plyr::llply()&lt;/code&gt;, com e sem progresso:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plyr_com &amp;lt;- function(nums) {
  plyr::llply(nums, funcao_rapida, .progress = &amp;#39;text&amp;#39;)
}
plyr_sem &amp;lt;- function(nums) {
  plyr::llply(nums, funcao_rapida)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;purrr::map()&lt;/code&gt;, com e sem progresso:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purrr_com &amp;lt;- function(nums) {
  barra &amp;lt;- progress::progress_bar$new(total = length(nums))
  purrr::map(nums, ~{
    barra$tick()
    funcao_rapida(.x)
  })
}
purrr_sem &amp;lt;- function(nums) {
  purrr::map(nums, funcao_rapida)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para testar a eficiência dos algoritmos, utilizamos a função &lt;code&gt;microbenchmark::microbenchmark()&lt;/code&gt;. Essa função calcula o tempo de execução do algoritmo cem vezes e obtém algumas estatísticas básicas dos tempos obtidos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;benchmark &amp;lt;- microbenchmark::microbenchmark(
  for_com(nums), for_sem(nums),
  plyr_com(nums), plyr_sem(nums),
  purrr_com(nums), purrr_sem(nums)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Os resultados da Tabela &lt;a href=&#34;#tab:eficiencia&#34;&gt;1&lt;/a&gt; são surpreendentes. Primeiro, as funções que não usam barras de progresso são muito mais rápidas, chegando a quase 10 vezes em alguns casos. A função do &lt;code&gt;plyr&lt;/code&gt; é mais lenta que o &lt;code&gt;for()&lt;/code&gt; quando usamos barras de progresso, mas é mais rápida quando não usamos. O &lt;code&gt;purrr&lt;/code&gt; é o mais rápido nos dois casos.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:eficiencia&#34;&gt;Table 1: &lt;/span&gt;Resultados do benchmark. Os tempos estão em milisegundos.&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Função&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Média&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mediana&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Máximo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;for_com(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.666&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.367&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.155&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;for_sem(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.161&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.196&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.211&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;plyr_com(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.193&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.754&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.511&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.386&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;plyr_sem(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.116&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.155&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.156&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.271&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;purrr_com(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.776&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.982&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.424&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;purrr_sem(nums)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.131&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.538&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mas não leve esses resultados tão a sério. Na prática, a parte mais demorada fica na função aplicada e não no funcional utilizado, implicando que essas diferenças sejam ignoráveis. Só recomendo mesmo abandonar o &lt;code&gt;for()&lt;/code&gt; para operações desse tipo, pois o tempo de execução não cresce &lt;strong&gt;linearmente&lt;/strong&gt; com o tamanho dos objetos, como é possível ver na Figura &lt;a href=&#34;#fig:for&#34;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:for&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-08-progress_files/figure-html/for-1.png&#34; alt=&#34;Tempo do for em função do número de inputs&#34; width=&#34;768&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Tempo do for em função do número de inputs
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;resumo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resumo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use o objeto &lt;code&gt;progress::progress_bar&lt;/code&gt; sempre que quiser fazer barras de progresso.&lt;/li&gt;
&lt;li&gt;Use o método &lt;code&gt;$new(total = n)&lt;/code&gt; para criar uma barra.&lt;/li&gt;
&lt;li&gt;Use o método &lt;code&gt;$tick()&lt;/code&gt; dentro do loop para mostrar que andou um passo do algoritmo.&lt;/li&gt;
&lt;li&gt;Tome cuidado com a eficiência do algoritmo quando usa barras de progresso.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;outros-links&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Outros links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Veja &lt;code&gt;?dplyr::progress_estimated&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gaborcsardi/progress&#34;&gt;Pacote &lt;code&gt;progress&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://adv-r.had.co.nz/Functional-programming.html&#34;&gt;Programação funcional&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;É provável que o &lt;code&gt;purrr&lt;/code&gt; ganhe essa funcionalidade num futuro próximo. &lt;a href=&#34;https://github.com/tidyverse/purrr/issues/149&#34;&gt;Veja essa discussão&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Top 10 dicas do Curso R de verão 2017</title>
      <link>http://curso-r.com/blog/2017/04/08/2017-04-08-top10-dicas-verao-2017/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/08/2017-04-08-top10-dicas-verao-2017/</guid>
      <description>&lt;p&gt;Em fevereiro desse ano ministramos o Curso de R de Verão 2017, parte do programa dos Cursos de Verão do IME-USP. Abaixo segue um compilado das 10 melhores dicas dadas durante este curso.&lt;/p&gt;
&lt;div id=&#34;conheca-e-domine-a-filosofia-por-tras-do-tidyverse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. Conheça e domine a filosofia por trás do Tidyverse&lt;/h3&gt;
&lt;p&gt;O conceito “tidy” deu o oriente do curso de verão e não foi à toa: o &lt;em&gt;tidyverse&lt;/em&gt;, carinhosamente chamado de “universo arrumadinho”, está intimamente associado ao dia-a-dia de um analista de dados e sua implementação em R é tida como uma pequena revolução para os R-eiros.&lt;/p&gt;
&lt;p&gt;A postagem &lt;a href=&#34;http://curso-r.com/blog/2017/02/15/2017-02-16-manifesto-tidy/&#34;&gt;Manifesto Tidy&lt;/a&gt; resume bem os motivos pelos quais valem a pena aprender os princípios e os pacotes do &lt;em&gt;tidyverse&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-shiny-e-uma-grande-alternativa-as-ferramentas-de-bi-e-dashboards&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. R + Shiny é uma grande alternativa às ferramentas de BI e Dashboards&lt;/h3&gt;
&lt;p&gt;Se você ainda tem alguma dúvida sobre o poder do R em montar dashboards interativos, se dê a chance de visitar alguns exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pollingdata.com.br/&#34;&gt;Polling Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shiny.platipus.com.br:3838/platipus/viscarf5&#34;&gt;VisCARF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rich.shinyapps.io/college_map/&#34;&gt;College Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gallery.shinyapps.io/087-crandash/&#34;&gt;CRAN Dash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esses exemplos mostram que é possível fazer desde simples gráficos de barras até sofisticados mapas a lá Google Maps. Esse potencial é imenso e tudo isso está a disposição de um mero mortal (e não mais apenas de um desenvolvedor de software especialista em web).&lt;/p&gt;
&lt;p&gt;E quando digo que o potencial é imenso, pode acreditar. O shiny coloca a disposição ao mesmo tempo inúmeros pacotes JavaScript de visualização e o R inteiro, interagindo entre si e aceitando receber informação de usuários em tempo real.&lt;/p&gt;
&lt;p&gt;PS: todos esses sites de exemplo foram feitos com R e apenas R, nenhum outro conhecimento foi pré-requisito.&lt;/p&gt;
&lt;p&gt;Se restou alguma dúvida se o R + Shiny é uma grande alternativa às ferramentas de BI e Dashboards, por favor jogue nos comentários para discutirmos!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot2-e-tidyr-tem-tudo-a-ver&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. ggplot2 e tidyr tem tudo a ver&lt;/h3&gt;
&lt;p&gt;A função &lt;code&gt;gather()&lt;/code&gt; do pacote tidyr é frequentemente utilizada para deixar data.frames prontos para serem “plotados”. Veja um exemplo:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correlação entre a variável &lt;code&gt;mpg&lt;/code&gt; versus todas as outras do data.frame &lt;code&gt;mtcars&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)
library(ggplot2)
library(dplyr)

mtcars_para_grafico &amp;lt;- mtcars %&amp;gt;%
  gather(variavel, valor, -mpg)

ggplot(mtcars_para_grafico, aes(x = valor, y = mpg)) +
  geom_point(aes(colour = variavel), show.legend = FALSE) +
  geom_smooth(se = FALSE) +
  facet_wrap(~variavel, scales = &amp;quot;free_x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-08-top10-dicas-verao-2017_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Frequentemente o que se quer é construir um gráfico do mesmo tipo para diferentes colunas, por isso o &lt;code&gt;gather()&lt;/code&gt; é útil nesses casos. E o &lt;code&gt;facet_wrap()&lt;/code&gt; do ggplot2 faz o serviço de construir um gráfico para cada coluna.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;web-scraping-e-uma-habilidade-visada-no-mercado&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4. Web Scraping é uma habilidade visada no mercado&lt;/h3&gt;
&lt;p&gt;A internet é uma fonta riquíssima de dados e são as técnicas de &lt;em&gt;web scraping&lt;/em&gt; que permite ao analista explorar seu potencial por inteiro. Em resumo, &lt;em&gt;Web scraping&lt;/em&gt; é o ato de “raspar” dados disponíveis em sites da internet.&lt;/p&gt;
&lt;p&gt;Os dados são o principal ingrediente para um bom modelo estatístico e faz parte da responsabilidade do cientista de dados utilizar o máximo de informação disponível.&lt;/p&gt;
&lt;p&gt;Cada vez mais as empresas estão reconhecendo o valor que os dados disponíveis publicamente na internet têm. Há empresas especializadas nisso e não é raro encontrar freelances envolvendo extração e estruturação de dados espalhados na rede.&lt;/p&gt;
&lt;p&gt;Os profissinais capazes de encarar esses desafios ainda são escaços, então fica a dica! &lt;a href=&#34;https://www.youtube.com/watch?v=o2fFUw8aSHE&#34;&gt;Esse webinar&lt;/a&gt; dado pelo nosso professor Julio Trecenti é um bom ponto de partida para aprender como fazer &lt;em&gt;web scraping&lt;/em&gt; no R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;avalie-muito-bem-o-problema-antes-de-decidir-que-se-trata-de-um-problema-de-big-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5. Avalie muito bem o problema antes de decidir que se trata de um problema de BIG DATA&lt;/h3&gt;
&lt;p&gt;Big Data é um termo que ainda procura por uma definição oficial, mas já existe uma classe de obstáculos que são devidos a grandes volumes de dados. Então a pergunta primordial aqui é: como saber se seu problema é de Big Data?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Big data is extremely overhyped and not terribly well defined. Many people think they have big data, when they actually don’t.” - Hadley Wickham&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como Hadley Wickham aponta, muitas pessoas acham que possuem um problema de big data quando na verdade não possuem. Ele resume o problema em três classes distintas:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Problema de Big Data que na verdade é um problema comum se for feita uma amostragem/sumarização apropriada.
&lt;ul&gt;
&lt;li&gt;Ferramentas apropriadas: hive, impala, terada, dplyr.&lt;/li&gt;
&lt;li&gt;90% dos problemas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Problema de Big Data que na verdade são vários problemas comuns. Exemplo: ajustar um modelo de regressão por indivíduo, para milhares ou milhões de indivíduos.
&lt;ul&gt;
&lt;li&gt;Paralelização é o que será necessário.&lt;/li&gt;
&lt;li&gt;Ferramentas: foreach, doParallel, doMC, Spark, Hadoop.&lt;/li&gt;
&lt;li&gt;9% dos problemas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Problemas de Big Data que realmente dependem de todos os dados juntos no mesmo lugar.
&lt;ul&gt;
&lt;li&gt;Exemplo: sistemas de recomendação em que se faz necessário a procura de relações bem raras e específicas entre transações.&lt;/li&gt;
&lt;li&gt;Ferramentas: geralmente sistemas dedicados e próprios para o problema.&lt;/li&gt;
&lt;li&gt;1% dos problemas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E quanto ao tamanho do dado propriamente dito, para nós usuários de R a regra de bolso é simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se seus dados cabem na memória, então é “small data”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;saber-pedir-ajuda-e-o-topico-mais-importante&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;6. Saber pedir ajuda é o tópico mais importante&lt;/h3&gt;
&lt;p&gt;Por mais completo que seja um curso de R, nunca alguém chegará no ponto em que não restará dúvidas sobre como fazer alguma coisa no R, até porque há novidades a cada minuto no mundo do R. Por isso aprender a pedir ajuda é essencial. No curso foram passados os melhores jeitos de se obter ajuda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Help / documentação do R (comandos &lt;code&gt;help(funcao)&lt;/code&gt; ou &lt;code&gt;?funcao&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;Coleginha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usem e abusem do fato de a comunidade R ser gigante e ativa.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rmarkdown-e-github-vao-bem-no-dia-a-dia-do-r-eiro&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;7. RMarkdown e Github vão bem no dia a dia do R-eiro&lt;/h3&gt;
&lt;p&gt;A palavra de ordem aqui é &lt;strong&gt;Organização&lt;/strong&gt;. RMarkdown ajuda a organizar melhor as ideias e conteúdos e o Github ajuda a organizar melhor os códigos.&lt;/p&gt;
&lt;p&gt;Referência para você aprender as ferramentas:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/&#34;&gt;&lt;strong&gt;RMarkdown&lt;/strong&gt;&lt;/a&gt;, de autoria do nosso queridíssimo RStudio Inc., transforma rascunho de códigos em documentos apresentáveis. Como já dito antes, todas as postagens deste blog são feitas em RMarkdown.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://github.com/&#34;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt; oferece uma inteligência sobre o versionamento dos códigos de um projeto. Isso permite que diversos colaboradores não se percam nas milhares de contribuições. Não existirão mais os &lt;code&gt;arquivos_final_final_v5_com_novas_analises_definitivo3.docx&lt;/code&gt; e você ganhará no controle de quem, quando e o que foi alterado em cada uma das versões.&lt;/p&gt;
&lt;p&gt;Hoje em dia ele é amplamente utilizado por empresas de tecnologia e está sendo cada vez mais comum em equipes de empresas mais tradicionais.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aprenda-regex&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;8. Aprenda Regex&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Reg&lt;/strong&gt;ular &lt;strong&gt;Ex&lt;/strong&gt;pressions servem para descrever padrões de textos. Por exemplo, para pedir para o R encontrar “todas as palavras que comecem com a letra A” em &lt;em&gt;regex&lt;/em&gt; escrevemos &lt;code&gt;str_detect(palavras, &amp;quot;^A&amp;quot;)&lt;/code&gt;. O pequeno pedaço de símbolos &lt;code&gt;&amp;quot;^A&amp;quot;&lt;/code&gt; é a maneira de traduzir em regex o padrão “palavras que começam em A”.&lt;/p&gt;
&lt;p&gt;Para quem quiser se aprofundar no assunto, consulte a documentação do regex no R: &lt;code&gt;?regex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Os pacotes &lt;code&gt;stringi&lt;/code&gt; e &lt;code&gt;stringr&lt;/code&gt; tiram proveito do &lt;em&gt;regex&lt;/em&gt; e valem a pena serem explorados! Data mining passará a ser mamão com açúcar.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;de-preferencia-aos-funcionais-em-vez-de-fors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;9. Dê preferência aos funcionais em vez de for’s&lt;/h3&gt;
&lt;p&gt;Na postagem &lt;a href=&#34;http://curso-r.com/blog/2017/02/21/2017-02-21-top10-pacotes-para-data-science/&#34;&gt;Top 10 pacotes para Data Science&lt;/a&gt; foi destacado o pacote &lt;code&gt;purrr&lt;/code&gt; e seu impacto ao fim do “for” nos códigos de R.&lt;/p&gt;
&lt;p&gt;“Usar funcionais” significa usar funções que aceitam funções como argumentos. Ambos os exemplos abaixo geram uma tabela para cada coluna do data.frame &lt;code&gt;iris&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;versão sem funcionais&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tabelas1 &amp;lt;- list()
nomes_iris &amp;lt;- names(iris)
for(i in 1:length(iris)){
  tabelas1[[nomes_iris[i]]] &amp;lt;- table(iris[,i])
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;versão com funcionais&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tabelas2 &amp;lt;- purrr::map(iris, table)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do exemplo acima notamos que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;há um grande ganho de legibilidade do código usando o funcional &lt;code&gt;map()&lt;/code&gt; em vez de um &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;não foi preciso nenhum objeto auxiliar como &lt;code&gt;tabelas1 &amp;lt;- list()&lt;/code&gt; e &lt;code&gt;nomes_iris&lt;/code&gt; no segundo exemplo.&lt;/li&gt;
&lt;li&gt;não há resquícios de índices como o &lt;code&gt;i&lt;/code&gt; para percorrer vetores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quanto mais aptidão em funcionais um usuário tiver, mais ágil e produtivo ele será. Então aprendam funcionais!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;coloque-seus-codigos-em-funcoes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;10. Coloque seus códigos em funções&lt;/h3&gt;
&lt;p&gt;Colocar pedaços de códigos, longos ou curtos, beneficia o desenvolvimento, a leitura e a manutenção do código. No R, fazer função é simples e sem burocracia, então não há muito argumento para não fazer! Algumas dicas para identificar quando você precisa criar uma função:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excesso de CTRL+C/CTRL+V da mesma coisa no código, “só mudando umas coisinhas”. Essas “coisinhas” que mudam seriam os argumentos da sua função.&lt;/li&gt;
&lt;li&gt;Projetos distintos reutilizando partes de código de um projeto mais antigo.&lt;/li&gt;
&lt;li&gt;Um bloco de código faz uma tarefa muito bem definida e que daria para colocar um nome para ela. Por exemplo, suponha que &lt;code&gt;x &amp;lt;- c(1:10)&lt;/code&gt;. Seria melhor de entender &lt;code&gt;x %&amp;gt;% eh_par&lt;/code&gt; do que &lt;code&gt;x %% 2 == 0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Multas em São Paulo</title>
      <link>http://curso-r.com/blog/2017/04/01/2017-04-01-multas-em-sp/</link>
      <pubDate>Sat, 01 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/01/2017-04-01-multas-em-sp/</guid>
      <description>&lt;p&gt;Há bastante tempo tenho vontade de fazer análises usando dados de multas de São Paulo. O problema é: estes dados estão disponíveis? Na teoria, sim. Os dados de multas, como quantidade de multas por tipo de infração, dia e horário, e outros são divulgados no &lt;a href=&#34;http://mobilidadesegura.prefeitura.sp.gov.br/QvAJAXZfc/opendoc.htm?document=Painel_Mobilidade_Segura.qvw&amp;amp;host=QVS%40c65v27i&amp;amp;anonymous=true&#34;&gt;portal da Mobilidade Segura&lt;/a&gt; da Prefeitura de São Paulo. Na prática, é um pouco diferente. Apesar do site fornecer uma opção de exportação, a tabela exportada não é completa e muitas informações ficam faltando. Dá bastante trabalho para exportar todas as informações.&lt;/p&gt;
&lt;p&gt;Para não ter o trabalho de exportar tabela por tabela, fiz uma requisição para a prefeitura, por meio da Lei de Acesso à Informação, pedindo acesso direto ao banco de dados que fornece as informações para o Portal. A resposta foi a seguinte:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prezado Senhor Daniel, Agradecemos o contato e informamos que o seu pedido foi indeferido com fundamento no art. 16, inciso III, do Decreto nº 53.623/2012, pois a base de dados contém informações pessoais que não podem ser disponibilizadas a terceiros. Os demais dados encontram-se inseridos no Painel Mobilidade Segura para consulta pelos interessados com a possibilidade de exportar arquivos. Informamos ainda que na época da sua solicitação, os painéis se encontravam atualizados, visto que a atualização mensal ocorre após os 70 dias da data da infração&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A resposta ao meu ver é totalmente contraditória: ao mesmo tempo que eu não posso receber os dados porque eles são confidenciais, eu posso obtê-los pelo site, que “oferece possibilidade de exportação de arquivos”. (???)&lt;/p&gt;
&lt;p&gt;Antes mesmo de pedir acesso ao banco de dados tinha pensado em desenvolver um webscrapper para fazer o download automático das planilhas, mas a tecnologia com a qual o portal foi desenvolvido (QlikView) dificulta muito o desenvolviento.&lt;/p&gt;
&lt;p&gt;Sobrou fazer o download manual mesmo. Até agora fiz o download de todos as planilhas de 2014 a 2016 contendo infrações capturadas tanto eletrônica quanto manualmente de carros (ainda faltam ônibus, utilitários, etc.) por hora do dia. Isso quer dizer que já temos planilhas suficientes para criar uma tabela:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tipo de veículo (sempre seria carro)&lt;/li&gt;
&lt;li&gt;data (2014 a 2016)&lt;/li&gt;
&lt;li&gt;hora do dia&lt;/li&gt;
&lt;li&gt;eletronica/manual&lt;/li&gt;
&lt;li&gt;motivo da multa&lt;/li&gt;
&lt;li&gt;localizacao da multa (quando for um radar)&lt;/li&gt;
&lt;li&gt;quantidade de multas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disponibilizei esses dados &lt;a href=&#34;https://github.com/dfalbel/spmultas&#34;&gt;neste repositório&lt;/a&gt; do Github.&lt;/p&gt;
&lt;p&gt;Agora com as análises a seguir, espero criar curiosidade e interesse para que mais pessoas possam ajudar no download completo dos dados. Na página inicial do repositório, adicionei, um mini-tutorial de como você pode ajudar fazendo os downloads.&lt;/p&gt;
&lt;p&gt;Vamos às análises.&lt;/p&gt;
&lt;div id=&#34;obter-os-dados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obter os dados&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://github.com/dfalbel/spmultas/raw/master/data/carros_eletronicas.rda&amp;quot;, &amp;quot;carros_eletronicas.rda&amp;quot;)
load(&amp;quot;carros_eletronicas.rda&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A partir de agora, você possui carregado um &lt;code&gt;data.frame&lt;/code&gt; chamado &lt;code&gt;carros_eletronicas&lt;/code&gt; que possui as informações das multas para carros de forma eletrônica.&lt;/p&gt;
&lt;p&gt;Em primeiro lugar, vamos analisar a quantidade de multas por dia em São Paulo desde 2014.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizar-a-serie&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizar a série&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;%
  group_by(data) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(data, qtd)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vemos nesse gráfico que o número de multas (por radar) era sempre por volta de 10.000 durante 2014, em 2015 foi aumentando bastante durante o ano e em 2016 se estabilizou. Vamos ver agora, por tipo de enquadramento, isto é, por motivo da multa.&lt;/p&gt;
&lt;p&gt;Existem 11 tipos de enquadramentos eletrônicos. Para a visualização ficar mais fácil, vamos primeiro agrupar em grandes temas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avançar o sinal vermelho&lt;/li&gt;
&lt;li&gt;Executar conversão proibida&lt;/li&gt;
&lt;li&gt;Parar sobre faixa de pedestres&lt;/li&gt;
&lt;li&gt;Rodízio&lt;/li&gt;
&lt;li&gt;Velocidade&lt;/li&gt;
&lt;li&gt;Transitar em faixa de ônibus ou exclusiva p/ determinado veículo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O agrupamento final ficou assim:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;depara &amp;lt;- carros_eletronicas %&amp;gt;%
  group_by(enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;% 
  arrange(qtd) %&amp;gt;%
  select(-qtd)
depara$agrup_enquadramento &amp;lt;- c(&amp;quot;Conversão proibida&amp;quot;, &amp;quot;Velocidade&amp;quot;, &amp;quot;Faixa de Pedestres&amp;quot;, 
                                &amp;quot;Faixa de ônibus&amp;quot;, &amp;quot;Sinal vermelho&amp;quot;, &amp;quot;Faixa de ônibus&amp;quot;,
                                &amp;quot;Conversão proibida&amp;quot;, &amp;quot;Faixa de ônibus&amp;quot;, &amp;quot;Velocidade&amp;quot;,
                                &amp;quot;Rodízio&amp;quot;, &amp;quot;Velocidade&amp;quot;
                                )

depara %&amp;gt;% knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;enquadramento&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;agrup_enquadramento&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Executar Operacao De Conversao A Esquerda Em Local Proibido Pela Sinalizacao&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Conversão proibida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Mais De 50%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Parar Sobre Faixa De Pedestres Na Mudanca De Sinal Luminoso (Fisc Eletronica)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de Pedestres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa/Pista Da Esquerda Regul Circulacao Exclusiva Determ Veiculo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avancar O Sinal Vermelho Do Semaforo - Fiscalizacao Eletronica&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sinal vermelho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa/Pista Da Direita Regul Circulacao Exclusiva Determ Veiculo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Executar Operacao De Conversao A Direita Em Local Proibido Pela Sinalizacao&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Conversão proibida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa Ou Via Exclusiva Regulam P/Transp Publ Coletivo Passag&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Mais De 20% Ate 50%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Local/Horario Nao Permitido Pela Regulamentacao - Rodizio&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Rodízio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Ate 20%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;%
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(data, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(data, qtd, color = agrup_enquadramento)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No gráfico, vemos que em 2015, o tipo de multa que mais aumentou em quantidade foi velocidade e rodízio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;curiosidades&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Curiosidades&lt;/h2&gt;
&lt;p&gt;Anteriormente vimos como se comportou o número de multas de maneira geral na cidade. Vamos agora matar algumas curiosidades.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Quais são os horários com mais multas em SP?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  group_by(hora) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = hora, y = qtd)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notamos que o maior número de multas ocorre justamente na hora do rush. Isto é, entre 7 e 10 da manhã e 17h e 19h. Isso até faz sentido, mas nessas horas o trânsito da cidade está todo parado. Será que a distribuição fica diferente por tipo de multa? Principalmente as de velocidade.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(hora, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = hora, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Veja que interessante! O grande responsável pelo pico da hora do rush é o rodízio. (Essa é justamente a hora em que ele está valendo.) As multas de velocidade diminuem um pouco durante o trânsito e acontecem mais durante o dia e não durante a noite como poderíamos imaginar. Vemos também que as multas de farol vermelho acontecem mais durante a madrugada.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Qual é o dia da semana com mais multas?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(dia_da_semana = wday(data), agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = dia_da_semana, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O dia da semana com mais multas é quinta feira. Nos finais de semana, aumenta muito o número de multas por excesso de velocidade (claro, as ruas estão mais vazias).&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Quais são os radares que mais multam em SP? E porque?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top10_locais &amp;lt;- carros_eletronicas %&amp;gt;%
  group_by(local) %&amp;gt;%
  summarise(n = sum(qtd)) %&amp;gt;%
  arrange(desc(n)) %&amp;gt;%
  slice(1:10)
knitr::kable(top10_locais)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;local&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avenida Assis Chateaubriand X Acesso Pte Das Bandeiras, A.Sen/C. Bran&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;321629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avenida Assis Chateaubriand (A. Senna/C. Branco), Alca Da Ponte Das Bandeiras&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;318745&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Dos Bandeirantes(Marginal/Imigrantes) A Mais 34 Metros Da Av Washington Luis&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;291277&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Das Nacoes Unidas-Pista Central-(Interlagos/C.Branco) A Menos 7,3m Do Km 5,5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;162318&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Morvan D De Figueiredo (As/Cb), A Mais 3m R Amazonas Da Silva-Fx Excl Onibus&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;153131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Rua Hungria (Interlagos/Castelo Branco) A Menos 20 Metros Da Avenida Reboucas&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;139048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Morvan Dias De Figueiredo (As/Cb),A Mais 3m R Amazonas Da Silva&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;137064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Rodovia Presidente Dutra (As/Cb), A Menos 75m Da Pte Pr J Quadros&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;134454&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Aricanduva (Bairro/Centro), A Mais15m Da Av Matapi - Fx Exclusiva De Onibus&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;127690&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Embaixador Macedo Soares, Sob Ponte Nova Fepasa, Sentido C. Branco/A. Senna&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;124927&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Agora vamos ver os motivos, em cada um desses lugares.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top10_locais %&amp;gt;%
  left_join(carros_eletronicas, by = &amp;quot;local&amp;quot;) %&amp;gt;%
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  mutate(local = stringr::str_wrap(local, width = 20) %&amp;gt;% 
           forcats::fct_reorder(-n)) %&amp;gt;%
  group_by(local, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = local, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1000px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Por incrível que pareça, nos dois radares com mais multas, o motivo da multa é conversão proibida. A foto de onde fica esse radar saiu em uma &lt;a href=&#34;http://www1.folha.uol.com.br/cotidiano/2015/07/1660793-radar-campeao-aplica-375-mil-multas-em-um-ano-na-ponte-das-bandeiras.shtml&#34;&gt;notícia sobre o mesmo tema&lt;/a&gt; na Folha de São Paulo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Requisições seguras</title>
      <link>http://curso-r.com/blog/2017/03/31/2017-03-31-ssl/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/31/2017-03-31-ssl/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;No mundo do web scraping, muitas vezes precisamos acessar sites &lt;code&gt;HTTPS&lt;/code&gt;, a versão &lt;code&gt;S&lt;/code&gt;egura do &lt;code&gt;HTTP&lt;/code&gt; (Hyper Text Transfer Protocol). Esse protocolo é utilizado para encriptar as mensagens trocadas por usuário e servidor.&lt;/p&gt;
&lt;p&gt;O pacote &lt;code&gt;httr&lt;/code&gt; utiliza um padrão &lt;code&gt;SSL&lt;/code&gt; (Secure Sockets Layer) para lidar com &lt;code&gt;HTTPS&lt;/code&gt;. O SSL nada mais é que uma forma de informar ao servidor que você é você, garantindo que suas mensagens só possam ser interpretadas por esse servidor, e vice-versa. O padrão do &lt;code&gt;httr&lt;/code&gt; funciona bem para a maioria dos sites, permitindo o acesso sem sofrimento.&lt;/p&gt;
&lt;p&gt;No entanto, alguns sites dão o seguinte erro:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;httr::GET(&amp;quot;https://esaj.tjsp.jus.br&amp;quot;)
## Error in curl::curl_fetch_memory(url, handle = handle): Peer certificate cannot be authenticated with given CA certificates&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A solução para esse problema é bem simples. Basta mandar o &lt;code&gt;httr&lt;/code&gt; ignorar o protocolo &lt;code&gt;SSL&lt;/code&gt; usando a função &lt;code&gt;httr::config()&lt;/code&gt;. Ignorar o SSL costuma ser uma má ideia, pois faz com que as mensagens entre usuário e servidor voltem a ser em texto puro, como se fosse &lt;code&gt;HTTP&lt;/code&gt;. Mas no web scraping isso não é exatamente um problema.&lt;/p&gt;
&lt;p&gt;Para solucionar o problema acima, rode:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;httr::GET(&amp;quot;https://esaj.tjsp.jus.br&amp;quot;, httr::config(ssl_verifypeer = FALSE))
## Response [https://esaj.tjsp.jus.br/esaj/portal.do?servico=740000]
##   Date: 2017-04-20 22:29
##   Status: 200
##   Content-Type: text/html;charset=ISO-8859-1
##   Size: 37.3 kB
## 
## 
## 
## 
## 
## 
## 
## 
## &amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://w...
## 
## ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E… Feliz web scraping!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; Certa vez um amigo teve problema com SSL mesmo tentando a solução acima numa máquina com Ubuntu Resolvemos o problema reinstalando a biblioteca &lt;code&gt;libcurl4-openssl-dev&lt;/code&gt; via &lt;code&gt;apt-get&lt;/code&gt; e o pacote &lt;code&gt;curl&lt;/code&gt; do R. Assim:&lt;/p&gt;
&lt;p&gt;No terminal:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install libcurl4-openssl-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;curl&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lollapalooza segundo Spotify - Web Scraping, API do Spotify e tidyverse</title>
      <link>http://curso-r.com/blog/2017/03/27/2017-03-27-lollapalooza-sp-2017-segundo-spotify/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/27/2017-03-27-lollapalooza-sp-2017-segundo-spotify/</guid>
      <description>&lt;p&gt;No dia em que fui ao Lollapalooza eu descobri o &lt;a href=&#34;https://github.com/tiagomendesdantas/Rspotify&#34;&gt;Rspotify&lt;/a&gt;, um wraper da API do Spotify e daí me veio a ideia de juntar infos dos dois assuntos.&lt;/p&gt;
&lt;p&gt;A brincadeira aqui vai envolver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web Scraping - para baixar e estruturar as tabelas de programação do Lolapalooza SP 2017&lt;/li&gt;
&lt;li&gt;API do Spotify - por meio do pacote Rspotify&lt;/li&gt;
&lt;li&gt;todos os pacotes do tidyverse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lollapalooza deste ano em São Paulo contou com 47 bandas distribuídas em quatro palcos. A graça é associar a programação do Lolla com as informações de popularidade das bandas fornecidas pelo Spotify. Abaixo eu vou descrever como peguei os dados, listar as três hipóteses que criei e gerar alguns gráficos pra discutí-las.&lt;/p&gt;
&lt;div id=&#34;base-de-dados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Base de dados&lt;/h2&gt;
&lt;div id=&#34;pre-requisitos&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pré-requisitos&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pacotes&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# instala o Rspotify
if(!require(&amp;quot;Rspotify&amp;quot;))
  devtools::install_github(&amp;quot;tiagomendesdantas/Rspotify&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rspotify)
library(magrittr)
library(forcats)
library(stringi)
library(lubridate)
library(httr)
library(rvest)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;Rspotify&lt;/code&gt; é um pacote novo e que ainda não está no CRAN, mas já está funcional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conta no Spotify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para utilizar a API do Spotify é necessário ter um cadastro no site deles, como se pode imaginar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;App no Spotify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para você receber um código de acesso para usar a API deles é preciso criar um &lt;em&gt;App&lt;/em&gt; dentro da sua conta do Spotify, esse é o pré-requisito mais burocrático de todos. Eu aprendi a fazer isso seguindo os passos do README do próprio pacote &lt;code&gt;Rspotify&lt;/code&gt; no Github &lt;a href=&#34;https://github.com/tiagomendesdantas/Rspotify&#34;&gt;(veja aqui)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No fim, você terá um &lt;code&gt;app_id&lt;/code&gt;, um &lt;code&gt;client_id&lt;/code&gt; e um &lt;code&gt;client_secret&lt;/code&gt; em mãos.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extraindo-programacao-do-lollapalooza-sp-2017&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extraindo programação do Lollapalooza SP 2017&lt;/h3&gt;
&lt;p&gt;O objetivo aqui é termos uma versão em &lt;code&gt;data.frame&lt;/code&gt; das tabelas contidas no site &lt;a href=&#34;https://www.lollapaloozabr.com/lineup-horarios/&#34;&gt;lollapaloozabr.com/lineup-horarios/&lt;/a&gt;. Lá tem a agenda completa dos dois dias do evento.&lt;/p&gt;
&lt;p&gt;Vamos ao código! Dica: a melhor maneira de aprender o que cada passo do código faz é ir rodando linha a linha e observando o resultado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# programacao do site do lollapalooza 2017 ----------------------

lolla2017_programacao &amp;lt;- &amp;quot;https://www.lollapaloozabr.com/lineup-horarios/&amp;quot; %&amp;gt;%
  GET() %&amp;gt;% 
  read_html() %&amp;gt;%
  html_table() %&amp;gt;%
  set_names(c(&amp;quot;sabado&amp;quot;, &amp;quot;domingo&amp;quot;)) %&amp;gt;%
  at_depth(2, ~ .x %&amp;gt;% 
             stri_replace_all_regex(&amp;quot; {2,}&amp;quot;, &amp;quot;&amp;quot;) %&amp;gt;% 
             stri_replace_all_regex(&amp;quot;[\\n]{1}&amp;quot;, &amp;quot;,&amp;quot;) %&amp;gt;% 
             stri_replace_all_regex(&amp;quot;[,]{2,}&amp;quot;, &amp;quot;\\\n&amp;quot;) %&amp;gt;% 
             read.csv(text = ., header = FALSE, 
                      col.names = c(&amp;quot;artist&amp;quot;, &amp;quot;hora&amp;quot;))) %&amp;gt;%
  map(~ .x[-1] %&amp;gt;% 
        data_frame(palco = names(.), programacao_palco = .) %&amp;gt;% 
        unnest(programacao_palco)) %&amp;gt;%
  data_frame(dia = names(.), programacao = .) %&amp;gt;%
  unnest(programacao) %&amp;gt;%
  separate(hora, c(&amp;quot;hora_ini&amp;quot;, &amp;quot;hora_fim&amp;quot;), sep = &amp;quot;-&amp;quot;) %&amp;gt;%
  mutate(artist = artist %&amp;gt;% tolower,
         hora_ini = paste(if_else(dia %in% &amp;quot;sabado&amp;quot;, &amp;quot;2017-03-25&amp;quot;, &amp;quot;2017-03-26&amp;quot;), hora_ini) %&amp;gt;% ymd_hm(),
         hora_ini = if_else(hour(hora_ini) &amp;lt; 12, hora_ini + hours(12), hora_ini),
         hora_fim = paste(if_else(dia %in% &amp;quot;sabado&amp;quot;, &amp;quot;2017-03-25&amp;quot;, &amp;quot;2017-03-26&amp;quot;), hora_fim) %&amp;gt;% ymd_hm(),
         hora_fim = if_else(hour(hora_fim) &amp;lt; 12, hora_fim + hours(12), hora_fim),
         dia = fct_relevel(dia, c(&amp;quot;sabado&amp;quot;, &amp;quot;domingo&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Resultado&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;dia&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;palco&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;artist&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hora_ini&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hora_fim&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cage the elephant&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 16:25:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 17:25:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;metallica&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 21:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 23:00:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;doctor pheabes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 12:05:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 13:05:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rancid&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 18:35:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 19:35:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;suricato&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 14:15:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 15:15:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the 1975&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 17:30:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 18:30:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the outs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 13:10:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 14:10:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the xx&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 19:40:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 20:55:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;É interessante reparar que para gerar essa simples tabelinha utilizamos os pacotes &lt;code&gt;httr&lt;/code&gt;, &lt;code&gt;rvest&lt;/code&gt;, &lt;code&gt;purrr&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt;, &lt;code&gt;lubridate&lt;/code&gt;, &lt;code&gt;stringi&lt;/code&gt; e &lt;code&gt;forcats&lt;/code&gt;. Só faltou o &lt;code&gt;ggplot2&lt;/code&gt; para zerar o tidyverse.&lt;/p&gt;
&lt;p&gt;OBS: 89 fm não é uma banda, era só um espaço reservado para fins de publicidade da rádio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extraindo-a-popularidade-das-bandas-do-lollapalooza-no-spotify&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extraindo a popularidade das bandas do Lollapalooza no Spotify&lt;/h3&gt;
&lt;p&gt;Agora vamos usar o pacote &lt;code&gt;Rspotify&lt;/code&gt; para extrair as popularidades das bandas que estão listadas no data.frame &lt;code&gt;lolla2017_programacao&lt;/code&gt;. Para tanto, usei uma playlist oficial no Spotify feita pela própria equipe do Lollapalooza. Essa playlist é identificada pelo id &lt;code&gt;1mHoPn6JpbtWtoBuvSXrVm&lt;/code&gt; lá no banco de dados do Spotify.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meu_token &amp;lt;- spotifyOAuth(app_id, client_id, client_secret) # coloque aqui suas infos fornecidas pelo Spotify.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lolla2017_playlist &amp;lt;- getPlaylistSongs(&amp;quot;lollabr&amp;quot;, &amp;quot;1mHoPn6JpbtWtoBuvSXrVm&amp;quot;, token = meu_token) %&amp;gt;%
  mutate(artistInfo = map(artistId, getArtistinfo),
         artist = artist %&amp;gt;% tolower) %&amp;gt;%
  rename(track_popularity = popularity,
         track_id = id) %&amp;gt;%
  unnest(artistInfo) %&amp;gt;%
  select(artist, id, name, popularity, followers)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas bandas ficaram de fora da playlist e por isso fiz uma pesquisa por nome do artista na própria API do Spotify para recuperar o respectivo id. A função que faz isso é a &lt;code&gt;searchArtist()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# recuperando infos dos artistas esquecidos pela playlist ----------------------

possibly_searchArtist &amp;lt;- possibly(searchArtist, NA_character_)

artistas_fora_da_playlist &amp;lt;- lolla2017_programacao %&amp;gt;% 
  filter(!artist %in% lolla2017_playlist$artist) %$% 
  artist %&amp;gt;% 
  data_frame(artist = .) %&amp;gt;%
  mutate(search_artist = map(artist, ~ .x %&amp;gt;% possibly_searchArtist),
         artist_info = map2(search_artist, artist, ~ {
           if(.x %&amp;gt;% is.na) {data.frame(search_artist = NA)} else {
           .x %&amp;gt;%
             mutate(name = name %&amp;gt;% tolower) %&amp;gt;%
             filter(name %in% .y) %&amp;gt;%
             head(1)
         }})) %&amp;gt;%
  select(-search_artist) %&amp;gt;%
  unnest(artist_info) %&amp;gt;%
  select(artist, id, name, popularity, followers) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Resultado&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;artist&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;popularity&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;followers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ricci&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1EUMh6DZo2CfpolG75YQBL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ricci&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;jimmy eat world&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3Ayl7mCk0nScecqOzvNp6s&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;jimmy eat world&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;361785&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;89 fm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;martin garrix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;60d24wfXkVzDSfLS6hyCjZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;martin garrix&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2244761&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;illusionize&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3RloA7E4XMItSP4FjMBv3L&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;illusionize&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30054&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;juntando-tudo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Juntando tudo&lt;/h3&gt;
&lt;p&gt;Agora vamos juntar a programação do Lolla com as infos do Spotify. A chave é &lt;code&gt;artist&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lolla2017 &amp;lt;- left_join(lolla2017_programacao,
                       lolla2017_playlist %&amp;gt;% bind_rows(artistas_fora_da_playlist),
                       by = &amp;quot;artist&amp;quot;) %&amp;gt;%
  select(-id, -name) %&amp;gt;%
  dplyr::filter(followers %&amp;gt;% is.na %&amp;gt;% not) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Base final&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;dia&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;palco&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;artist&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hora_ini&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hora_fim&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;popularity&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;followers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cage the elephant&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 16:25:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 17:25:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;745453&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;metallica&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 21:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 23:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3047126&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;doctor pheabes&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 12:05:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 13:05:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;313&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rancid&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 18:35:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 19:35:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220182&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Skol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;suricato&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 14:15:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 15:15:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52326&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the 1975&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 17:30:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 18:30:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1600845&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the outs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 13:10:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 14:10:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3788&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sabado&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Palco Onix&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the xx&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 19:40:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2017-03-25 20:55:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2383923&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;resultados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;div id=&#34;hipotese-i&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hipótese I&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hipótese I:&lt;/strong&gt; a organização usou a estratégia de distribuir a popularidade das bandas uniformemente no dia.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Um dos vários desafios logísticos que o evento tem é a alocação das bandas na grade horária nos quatro diferentes palcos.&lt;/p&gt;
&lt;p&gt;Eu fui no evento no sábado e ouvi falar que a banda &lt;em&gt;Cage The Elephant&lt;/em&gt; tinha sido uma das primeiras bandas a se apresentar. Sabia da popularidade da banda (segundo o Spotify, está mais popular do que &lt;em&gt;The Strokes&lt;/em&gt;) e na hora estranhei a decisão do evento de colocá-los para tocar tão cedo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lolla2017_grafico &amp;lt;- lolla2017 %&amp;gt;%
  mutate(hora = map2(hora_ini, hora_fim, ~ seq(.x, .y, 30*60) %&amp;gt;% floor_date(&amp;quot;30 minutes&amp;quot;))) %&amp;gt;%
  unnest(hora) %&amp;gt;%
  group_by(dia, hora, palco) %&amp;gt;%
  summarise(artist = first(artist),
            n = n(),
            mean_popularity = mean(popularity))

lolla2017_grafico %&amp;gt;%
  ggplot(aes(x = ymd_hm(format(hora, &amp;quot;2017-03-26 %H%M&amp;quot;)), y = mean_popularity, colour = palco)) +
  geom_line() +
  geom_point() +
  geom_point(data = lolla2017_grafico %&amp;gt;% filter(artist %in% &amp;quot;cage the elephant&amp;quot;), colour = &amp;quot;red&amp;quot;, size = 2) +
  geom_text(data = lolla2017_grafico %&amp;gt;% filter(artist %in% &amp;quot;cage the elephant&amp;quot;) %&amp;gt;% head(1), aes(label = artist), colour = &amp;quot;red&amp;quot;, hjust = 0, vjust = -1) +
  facet_wrap(~dia) +
  labs(x = &amp;quot;Hora do dia&amp;quot;, y = &amp;quot;Popularidade média&amp;quot;) +
  theme(text = element_text(size = 16))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-27-lollapalooza-sp-2017-segundo-spotify_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O gráfico acima vai de acordo com o senso comum de que os populares ficam para o final, não ajudando a confirmar a hipótese de que o &lt;em&gt;Cage The Elefant&lt;/em&gt; estava mal posicionado.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hipotese-ii&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hipótese II&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hipótese II:&lt;/strong&gt; em termos de popularidade das bandas, o dia de domingo estava melhor do que o dia de sábado.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em conversas com amigos e conhecidos reparei que a maioria ou iria no domingo ou preferiria ir no domingo caso tivesse oportunidade. Isso me fez levantar a dúvida se realmente havia maior concentração de bandas boas no domingo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(lolla2017 %&amp;gt;%
         mutate(artist = artist %&amp;gt;% fct_reorder(popularity, .desc = TRUE))) +
  geom_bar(aes(x = artist, y = popularity, fill = dia), stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  theme(text = element_text(size = 16),
        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.4))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-27-lollapalooza-sp-2017-segundo-spotify_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(lolla2017) +
 geom_density(aes(fill = dia, x = popularity, colour = dia), fill = NA) +
  theme(text = element_text(size = 16),
        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.4))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-27-lollapalooza-sp-2017-segundo-spotify_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Conclusão: nada indica que houve desbalanceamento. Acho que meu círculo de amigos tem algum viés estranho.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hipotese-iii&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hipótese III&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hipótese III:&lt;/strong&gt; a popularidade das bandas nos diferentes palcos estava equilibrada.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quando me questionei da hipótese I também pensei na dificuldade de posicionar as bandas nos diferentes palcos. Já que teriam milhares de pessoas disputando espaço, seria do interesse da organização deixá-los o mais espalhado possível por vários motivos: melhor fluxo das filas, maior conforto, menos risco de acidentes, entre outros, e um bom jeito de fazer isso seria deixando os palcos igualmente atrativos para não haver uma grande aglomeração em um único ponto.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(lolla2017 %&amp;gt;%
         mutate(palco = palco %&amp;gt;% as.factor %&amp;gt;% fct_reorder(popularity, mean))) +
  geom_boxplot(aes(fill = palco, y = popularity, x = 1)) +
  theme(text = element_text(size = 16),
        axis.text.x = element_blank()) +
  labs(x = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-27-lollapalooza-sp-2017-segundo-spotify_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O palco Skol teve menor variação de popularidade, costumou contar sempre com artistas de média a alta popularidade, mas os palcos AXE e Onix foram visitados por artista de peso. O palco Perry’s foi o mais visitado por artistas de menor expressão.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;consideracoes-finais&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O tema tratado aqui não foi útil, concordo, mas passamos por quase todas as etapas existentes em um processo típico de análise de dados. Fizemos web scraping, usamos APIs, arrumamos os dados, estruturamos as informações, criamos variáveis e geramos gráficos. Só ficou de fora a parte de modelagem. E não à toa todos os pacotes do tidyverse foram úteis nesse trabalho.&lt;/p&gt;
&lt;p&gt;A lição pra casa é encontrar uns dados interessantes na internet e aplicar as etapas que aprendemos aqui!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Knitr: mudando o diretório de trabalho</title>
      <link>http://curso-r.com/blog/2017/03/25/2017-03-25-knitr-mudando-diretorio-de-trabalho/</link>
      <pubDate>Sat, 25 Mar 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/25/2017-03-25-knitr-mudando-diretorio-de-trabalho/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;O pacote &lt;code&gt;knitr&lt;/code&gt; é um mecanismo rápido, elegante e flexível para gerar relatórios dinâmicos no R. Ele trabalha lado a lado com o &lt;code&gt;rmarkdown&lt;/code&gt; para transformar arquivos &lt;code&gt;.Rmd&lt;/code&gt; em diversos formatos, como html, pdf e até mesmo word. Misturando &lt;em&gt;chunks&lt;/em&gt; de código em R com texto puro, LaTeX e html, a tarefa de criar outputs para análises estatísticas no R ficou muito mais simples.&lt;/p&gt;
&lt;p&gt;Quando estamos trabalhando com arquivos Rmarkdown no Rstudio, o diretório de trabalho é a própria pasta onde o &lt;code&gt;Rmd&lt;/code&gt; está salvo. Assim, se o nosso relatório tem algum input (banco de dados, arquivos com código em R ou imagens, por exemplo), esses arquivos precisam estar nessa pasta. Isso pode ser uma chateação se você está dentro de um projeto e organizou os arquivos de forma diferente: banco de dados em uma pasta, &lt;code&gt;.R&lt;/code&gt; em outra, imagens em outra, outputs em outra…&lt;/p&gt;
&lt;p&gt;A primeira ideia que vem à cabeça é usar a função &lt;code&gt;setwd()&lt;/code&gt; dentro de algum chunk para mudar o diretório de trabalho dentro do arquivo &lt;code&gt;Rmd&lt;/code&gt;. No entanto, se fizermos isso, o diretório de trabalho será mudado para aquele chunk, mas voltará a ser a pasta do arquivo &lt;code&gt;.Rmd&lt;/code&gt; após a sua execução. Veja o &lt;code&gt;warning&lt;/code&gt; abaixo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;#39;../&amp;#39;)

# Warning message: you changed the working directory 
# to C:/novo_diretorio (probably via setwd()). 
# It will be restored to C:/diretorio_do_Rdm. 
# See the Note section in ?knitr::knit.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lendo a seção “Note” do &lt;code&gt;?knitr:knit&lt;/code&gt;, verificamos que mudar o diretório de trabalho via &lt;code&gt;setwd()&lt;/code&gt; pode levar a &lt;strong&gt;terríveis consequências&lt;/strong&gt;. Basicamente, figuras e arquivos de cache podem ser salvos no lugar errado, e o seu relatório não será gerado corretamente. Ainda lendo a seção “Note”, encontramos a maneira correta de mudar o diretório de trabalho: setar a opção &lt;code&gt;opts_knit$set(root.dir = ...)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;opts_knit$set(root.dir = &amp;#39;../&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vale ainda ressaltar que a mudança do diretório só vai ser definida para os chunks seguintes, isto é, se você fizer a mudança &lt;code&gt;opts_knit$set(root.dir = &#39;../&#39;)&lt;/code&gt; e, no mesmo chunk, tentar ler um arquivo no diretório pai (&lt;code&gt;source(input.R)&lt;/code&gt;, por exemplo), o arquivo não vai ser encontrado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Porta dos Fundos está em decadência?</title>
      <link>http://curso-r.com/blog/2017/03/20/2017-03-20-porta-dos-fundos-decadencia/</link>
      <pubDate>Mon, 20 Mar 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/20/2017-03-20-porta-dos-fundos-decadencia/</guid>
      <description>&lt;p&gt;Há alguns anos eu acompanho o canal Porta dos fundos no YouTube, assistindo os vídeos quase sempre no dia de lançamento. Mesmo dividido entre esquetes boas e ruins, me considero um fã da trupe de humoristas (e do Totoro também), principalmente pelo humor sarcástico e pela satirização de diversos tabus da nossa sociedade.&lt;/p&gt;
&lt;p&gt;Nos últimos meses, no entanto, meu entusiasmo com o canal vem diminuindo. A necessidade de postar três vídeos por semana para se manter relevante no sistema de recomendações do YouTube, o que mantém o canal rentável, me faz perdoar um ou outro conteúdo sem graça ou rasteiro, mas sinto que o que era exceção começou a virar regra.&lt;/p&gt;
&lt;p&gt;Não sei se eu que fiquei chato ou se outras pessoas compartilham a minha opinião. Então resolvi scrapear informações do canal e montar algumas visualizações para tirar essa dúvida.&lt;/p&gt;
&lt;p&gt;Segue um passo a passo de como fiz isso utilizando o R.&lt;/p&gt;
&lt;div id=&#34;passo-1-instalar-e-configurar-o-pacote-tuber&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 1: instalar e configurar o pacote &lt;code&gt;tuber&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;O pacote &lt;code&gt;tuber&lt;/code&gt; contém funções que permitem acessar a API do YouTube utilizando o R. Assim, podemos ter acesso a diversas estatísticas como número de likes, número de views, comentários de vídeos, entre outras.&lt;/p&gt;
&lt;p&gt;Para instalar o pacote, rode o código &lt;code&gt;install.packages(&amp;quot;tuber&amp;quot;)&lt;/code&gt; ou &lt;code&gt;devtools::install_github(&amp;quot;soodoku/tuber&amp;quot;, build_vignettes = TRUE)&lt;/code&gt; para baixar a versão de desenvolvimento mais recente.&lt;/p&gt;
&lt;p&gt;Para utilizar o &lt;code&gt;tuber&lt;/code&gt; é preciso um &lt;em&gt;id&lt;/em&gt; e um &lt;em&gt;secret&lt;/em&gt; do &lt;a href=&#34;https://developers.google.com/youtube/v3/getting-started&#34;&gt;Console de Desenvolvimento da Google&lt;/a&gt;. Após criar uma conta, basta habilitar todas as APIs do YouTube e a Freebase API.&lt;/p&gt;
&lt;p&gt;Feito isso, rode o código abaixo com o &lt;em&gt;id&lt;/em&gt; e &lt;em&gt;secret&lt;/em&gt; obtidos pela plataforma para configurar o acesso do &lt;code&gt;tuber&lt;/code&gt; à API.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tuber)

yt_oauth(app_id = &amp;quot;seu_app_id&amp;quot;, 
         app_secret = &amp;quot;seu_app_secret&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se tudo foi configurado corretamente, ele abrirá uma aba no seu navegador confirmando a autenticação, e você poderá voltar ao R para começar a scrapear.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-2-buscar-o-id-dos-videos-do-canal&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 2: buscar o id dos vídeos do canal&lt;/h1&gt;
&lt;p&gt;Para organizar as informações dos vídeos em um banco de dados e gerar as visualizações, vamos utilizar as seguintes bibliotecas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)          # Manipulação de dados
library(tidyr)          # Manipulação de dados
library(tibble)         # Criação de dataframes
library(lubridate)      # Manipulação de datas
library(purrr)          # Funcionais
library(ggplot2)        # Gráficos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Precisamos do &lt;em&gt;id&lt;/em&gt; de cada vídeo do Porta dos Fundos para baixar as suas estatísticas. A função &lt;code&gt;tuber::yt_search()&lt;/code&gt; pesquisa por vídeos e suas informações. Rodando &lt;code&gt;yt_search(term = &amp;quot;Porta dos fundos&amp;quot;)&lt;/code&gt;, obtemos informações de alguns vídeos do canal, inclusive que o seu &lt;em&gt;channel id&lt;/em&gt; é “UCEWHPFNilsT0IfQfutVzsag”. O &lt;em&gt;channel id&lt;/em&gt; é essencial para obtermos todos os vídeos do Porta.&lt;/p&gt;
&lt;p&gt;Por default, a função &lt;code&gt;yt_search()&lt;/code&gt; retorna no máximo 50 resultados. Contudo, se setarmos os parâmetros &lt;code&gt;type = &amp;quot;video&amp;quot;&lt;/code&gt; e &lt;code&gt;channal_id = &amp;quot;id_de_algum_canal&amp;quot;&lt;/code&gt;, o número máximo passa a ser 500 resultados.&lt;/p&gt;
&lt;p&gt;Para facilitar o trabalho, eu criei a função &lt;code&gt;get_videos_porta()&lt;/code&gt;. Ela recebe uma data de início e de término (em um dataframe com apenas uma linha) e devolve todos os vídeos do canal Porta dos Fundos nesse período.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_videos_porta &amp;lt;- function(dates) {
  
  yt_search(term = &amp;quot;&amp;quot;, 
            type = &amp;quot;video&amp;quot;,
            channel_id = &amp;quot;UCEWHPFNilsT0IfQfutVzsag&amp;quot;,
            published_after = dates$start,
            published_before = dates$end)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada linha do dataframe de datas a seguir representa períodos de um ano, de 2012 a 2017. Isso implica que, em cada busca, vou receber os vídeos do Porta dos Fundos para cada um desses anos. O mutate formata as datas no padrão exigido pela função &lt;code&gt;yt_search()&lt;/code&gt;. Veja &lt;code&gt;help(yt_search)&lt;/code&gt; para mais informações.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dates &amp;lt;- tibble(start = seq(ymd(&amp;quot;2012-01-01&amp;quot;), ymd(&amp;quot;2017-01-01&amp;quot;), by = &amp;quot;years&amp;quot;),
                        end = seq(ymd(&amp;quot;2012-12-31&amp;quot;), ymd(&amp;quot;2017-12-31&amp;quot;), by = &amp;quot;years&amp;quot;)) %&amp;gt;% 
  mutate(start = paste(start, &amp;quot;T0:00:00Z&amp;quot;, sep = &amp;quot;&amp;quot;),
         end = paste(end, &amp;quot;T0:00:00Z&amp;quot;, sep = &amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por fim, atribuímos ao objeto &lt;code&gt;videos&lt;/code&gt; as informações de todos os videos do canal de 2012 a 2017.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
videos &amp;lt;- by_row(.d = dates, ..f = get_videos_porta, .to = &amp;quot;videos_info&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-3-pegar-as-estatisticas-de-cada-video&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 3: pegar as estatísticas de cada vídeo&lt;/h1&gt;
&lt;p&gt;Para facilitar essa etapa, eu criei a função &lt;code&gt;get_videos_stats()&lt;/code&gt;, que recebe um dataframe de uma linha contendo uma coluna &lt;code&gt;$video_id&lt;/code&gt; e, usando a função &lt;code&gt;tuber::get_stats()&lt;/code&gt;, faz o scrape das estatísticas do vídeo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_videos_stats &amp;lt;- function(df_row) {
  
  get_stats(video_id = df_row$video_id)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada elemento da coluna &lt;code&gt;$video_info&lt;/code&gt; contém um dataframe com as informações dos vídeos de um determinado ano. Com a função &lt;code&gt;dplyr::bind_rows()&lt;/code&gt;, juntamos esses dataframes em um só. Então selecionamos as colunas de interesse: &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;publishedAt&lt;/em&gt; e &lt;em&gt;video_id&lt;/em&gt;. Por fim, utilizamos os &lt;em&gt;id’s&lt;/em&gt; para baixar as estatísticas de cada vídeo usando a função &lt;code&gt;get_videos_stats()&lt;/code&gt;. As estatísticas são salvas na coluna &lt;code&gt;$videos_stats&lt;/code&gt; do objeto &lt;code&gt;dados&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- bind_rows(videos$videos_info) %&amp;gt;% 
  select(title, publishedAt, video_id) %&amp;gt;%
  by_row(..f = get_videos_stats, .to = &amp;quot;videos_stats&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-4-as-visualizacoes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 4: as visualizações&lt;/h1&gt;
&lt;p&gt;A primeira visualização que resolvi fazer foi um gráfico do número de visualizações pela data de publicação. Uma análise descuidada desse gráfico pode indicar uma clara redução dos números de views ao longo do tempo. No entanto, é preciso levar em conta que vídeos mais antigos tendem a ter mais views por simplesmente estarem disponíveis há mais tempo. Apesar disso, dois fatores me fazem acreditar que a magnitude do número de views de um vídeo é alcançada nos primeiros dias após o lançamento. O primeiro se deve ao sistema de recomendações do YouTube. Na página inicial, nem sempre os vídeos recomendados são dos canais que você se inscreveu. Na página de canais inscritos, se você tiver muitas inscrições, é fácil perder um vídeo ou outro de um dos canais que acompanha. O segundo se deve à enorme quantidade de conteúdo disponível hoje em dia, muito² maior do que há quatro, cinco anos. Eu, por exemplo, sou inscrito em mais de vinte canais e não consigo acompanhar nem cinco deles. Para quem não pode ficar o dia todo vendo vídeos, realmente há muita competição por espaço no YouTube.&lt;/p&gt;
&lt;p&gt;E apresento ainda um terceiro fator, contrariando a expectativa de existirem apenas dois. Vivemos na era do &lt;em&gt;hype&lt;/em&gt;. O que é velho, o que é notícia da semana passada, já não interessa mais.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;% 
  mutate(views = map(videos_stats, .f = &amp;#39;viewCount&amp;#39;)) %&amp;gt;% 
  unnest(views) %&amp;gt;% 
  mutate(views = as.numeric(views),
         publishedAt = as_date(publishedAt)) %&amp;gt;% 
  ggplot(aes(x = publishedAt, y = views)) +
  geom_line(aes(y = 1000000, colour = &amp;quot;1 Milhão&amp;quot;)) +
  geom_line(aes(y = 10000000, colour = &amp;#39;10 Milhões&amp;#39;)) +
  geom_line(aes(y = 20000000, colour = &amp;#39;20 Milhões&amp;#39;)) +
  geom_line() +
  labs(x = &amp;quot;Data de publicação&amp;quot;, y = &amp;quot;Visualizações&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-20-porta-dos-fundos-decadencia_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Também fiz um gráfico da proporção likes/dislikes pela data de publicação do vídeo. Parece haver uma leve redução dessa proporção no último ano, mas é arriscado tirar uma conclusão. Refazendo essa análise no fim de 2017, talvez fique mais claro se o público do canal concorda comigo sobre a qualidade do conteúdo nos últimos tempos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;% 
  mutate(likes = map(videos_stats, .f = &amp;#39;likeCount&amp;#39;),
         dislikes = map(videos_stats, .f = &amp;#39;dislikeCount&amp;#39;)) %&amp;gt;% 
  unnest(likes, dislikes) %&amp;gt;% 
  mutate(likes = as.numeric(likes),
         dislikes = as.numeric(dislikes),
         publishedAt = as_date(publishedAt),
         prop = likes/dislikes) %&amp;gt;% 
  ggplot(aes(x = publishedAt)) +
  geom_line(aes(y = prop)) +
  labs(x = &amp;quot;Data de publicação&amp;quot;, y = &amp;quot;Likes/Dislikes&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-20-porta-dos-fundos-decadencia_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O Porta dos Fundos é sem dúvida um gigante no YouTube, mas os indícios dessa sucinta análise colaboram com a minha opinião de que o canal já viveu dias (bem) melhores. Apesar de essa decadência poder ser só uma fase ruim, nunca é cedo para se reinventar, ter novas ideias, definir as regras do jogo, assim como eles fizeram no início.&lt;/p&gt;
&lt;p&gt;E se faltar ideias, vídeos com o Totoro são sempre uma boa alternativa.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Paralelização no R</title>
      <link>http://curso-r.com/blog/2017/03/19/2017-03-14-parallel/</link>
      <pubDate>Sun, 19 Mar 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/19/2017-03-14-parallel/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Programadores eficientes não precisam escrever algoritmos que rodam rápido. Recomendo fortemente a leitura do livro &lt;a href=&#34;https://csgillespie.github.io/efficientR/&#34;&gt;Efficient R&lt;/a&gt;, que discute eficiência com o R de forma exaustiva. Também gosto muito da primeira parte &lt;a href=&#34;https://www.youtube.com/watch?v=wki0BqlztCo&#34;&gt;dessa palestra do Hadley&lt;/a&gt;, onde ele defende que o cientista de dados deve usar seu tempo pensando no problema e não na forma que vai escrever seu código.&lt;/p&gt;
&lt;p&gt;Com isso em mente, vamos investigar o tema &lt;em&gt;paralelização&lt;/em&gt;. Quando rodamos coisas em paralelo, mandamos os núcleos de processamento da máquina calcularem coisas diferentes ao mesmo tempo. A vantagem disso é que o tempo de execução dos algoritmos é dividido pelo número de núcleos disponíveis, sem exigir grandes mudanças no código utilizado.&lt;/p&gt;
&lt;p&gt;Vamos mostrar como paralelizar um código usando a função &lt;code&gt;llply()&lt;/code&gt; do pacote &lt;code&gt;plyr&lt;/code&gt;. Essa função funciona de forma idêntica ao &lt;code&gt;lapply()&lt;/code&gt;, ou seja, recebe uma lista ou vetor como input, aplica uma função em cada elemento, e retorna os resultados numa lista com o mesmo comprimento.&lt;/p&gt;
&lt;p&gt;A função &lt;code&gt;dormir()&lt;/code&gt; manda o R esperar &lt;code&gt;seg&lt;/code&gt; segundos antes de concluir, retornando &lt;code&gt;seg&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dormir &amp;lt;- function(seg = 1) {
  Sys.sleep(seg)
  return(seg)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É intuitivo afirmar que o tempo de execução de &lt;code&gt;dormir()&lt;/code&gt; é compatível com &lt;code&gt;seg&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
  dormir()
})
##    user  system elapsed 
##   0.000   0.000   1.001&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nosso interesse é aplicar &lt;code&gt;dormir()&lt;/code&gt; em cada elemento do vetor &lt;code&gt;c(1, 2)&lt;/code&gt;. Esse algoritmo demora &lt;code&gt;1 + 2 = 3&lt;/code&gt; segundos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;segundos &amp;lt;- c(1, 2)
system.time({
  plyr::llply(segundos, dormir)
})
##    user  system elapsed 
##   0.004   0.004   3.010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora vamos executar o mesmo código usando paralelização. Antes, precisamos&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;criar e registrar as cópias de R que rodam em paralelo; e&lt;/li&gt;
&lt;li&gt;adicionar o parâmetro &lt;code&gt;.parallel = TRUE&lt;/code&gt; no &lt;code&gt;llply()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O primeiro passo é resolvido com os pacotes &lt;code&gt;parallel&lt;/code&gt; e &lt;code&gt;doParallel&lt;/code&gt;. Veja como fica o código:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- parallel::makePSOCKcluster(2) # cria as cópias do R que rodam em paralelo
doParallel::registerDoParallel(cl)  # registra as cópias do R para serem usadas no plyr

system.time({
  plyr::llply(segundos, dormir, .parallel = TRUE)
})
##    user  system elapsed 
##   0.016   0.004   2.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O tempo total de execução foi de ~2.2 segundos, um pouco mais do que &lt;code&gt;dormir(2)&lt;/code&gt;. Os dois décimos de segundo adicionais são necessários para preparar o terreno da paralelização. Inclusive, se você rodar o código em paralelo novamente, o tempo adicional cai para quase nada:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
  plyr::llply(segundos, dormir, .parallel = TRUE)
})
##    user  system elapsed 
##   0.008   0.000   2.011&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se quiser parar de rodar coisas em paralelo, basta rodar &lt;code&gt;stopCluster()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parallel::stopCluster(cl) # pára de rodar coisas em paralelo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E é isso, caros errantes. Rappy coding :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rstudio::conf: Sessão Final</title>
      <link>http://curso-r.com/blog/2017/03/16/2017-02-18-all-things-r-and-rstudio/</link>
      <pubDate>Thu, 16 Mar 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/16/2017-02-18-all-things-r-and-rstudio/</guid>
      <description>&lt;p&gt;No início de Janeiro desse ano ocorreu a primeira &lt;a href=&#34;https://www.rstudio.com/conference/&#34;&gt;rstudio::conf&lt;/a&gt;, uma conferência sobre R promovida pela Rstudio. A conferência parece ter sido bem animada! Teve até um passeio para o parque do Harry Potter na Florida, e surgiram memes como a imagem abaixo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-02-18-all-things-r-and-rstudio_files/figure-html/hadley-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Em termos de conteúdo, parece que foi sensacional. Para quem não teve oportunidade de ir, os videos da conferência foram divulgados &lt;a href=&#34;https://www.rstudio.com/resources/webinars/#rstudioconf&#34;&gt;aqui&lt;/a&gt; como bem lembrado pelo &lt;a href=&#34;https://analisereal.com/2017/02/16/videos-da-rstudio-conference-disponiveis/&#34;&gt;blog Análise Real&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Eu ainda não tive tempo de passar por todas as palestras e comecei pelo fim. Vi o &lt;a href=&#34;https://www.rstudio.com/resources/videos/all-things-r-and-rstudio/&#34;&gt;vídeo&lt;/a&gt; da última sessão da conferência que era nada mais nada menos do que uma sessão de perguntas com J.J. Allaire, Hadley Wickham e Joe Cheng. Para quem não conhece, o primeiro é fundador do RStudio, outro é o criador do &lt;code&gt;tidyverse&lt;/code&gt;, &lt;code&gt;ggplot2&lt;/code&gt;, etc e o último é o criador do Shiny.&lt;/p&gt;
&lt;p&gt;A discussão foi muito interessante, tratando de importantes temas sobre o desenvolvimento do R. Vou resumir as minhas impressões nesse post, mas ressalvo que vale muito a pena ver &lt;a href=&#34;https://www.rstudio.com/resources/videos/all-things-r-and-rstudio/&#34;&gt;o vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A sessão começa com 2 perguntas do moderador &lt;a href=&#34;https://www.rstudio.com/rviews/author/josephrickert/&#34;&gt;Joseph Rickert&lt;/a&gt;. A primeira falando sobre a conferência em que J.J., Joe e Hadley, é claro, estão muito satisfeitos. Gosto bastante da resposta do Hadley para essa pergunta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nossa métrica de sucesso é o seu sucesso e é muito bom ver vocês usando as ferramentas que desenvolvemos para resolver problemas importantes. Isso é fantástico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A segunda pergunta é filosófica, mas o objetivo é saber dos participantes o que os motiva nos trabalhos open-source. J.J. Allaire argumenta que desenvolver software &lt;em&gt;open-source&lt;/em&gt; é muito gratificante porque estes são duráveis, não estão ligados ao sucesso ou fracasso de nenhuma companhia. Ele acha que se você quer encontrar significado no seu trabalho e ver que seu software teve impacto na comunidade não tem nada melhor do que desenvolver &lt;em&gt;open-source&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir daí as perguntas são abertas ao público (11 min do vídeo). A primeira pergunta é bem interessante: Quais são os limites do R? A resposta do J.J. Allaire é muito boa e está razoavelmente bem explicada &lt;a href=&#34;https://www.rstudio.com/rviews/2016/10/12/interview-with-j-j-allaire/&#34;&gt;nessa entrevista&lt;/a&gt; que ele deu para o blog do RStudio em Outubro do ano passado. Basicamente, ele diz que se o R for encarado como uma linguagem de programação ele possui limites bem claros, porque o R não foi desenvolvido para ser uma linguagem de programação e sim para ser uma interface de usuário. O R, quando ainda era S, foi desenvolvido para ser uma interface para códigos em Fortran. Como interface de usuário, segundo Allaire, o R pode ser interligado sempre à melhor ferramenta de computação que existir. Portanto, se pensarmos no R como interface de usuário, não há limites. Ainda nesta pergunta, Joe Cheng fez uma comparação interessante entre R, Python e Go.&lt;/p&gt;
&lt;p&gt;Uma outra pergunta interessante é sobre como convencer quem usa Excel a começar a usar o R. As respostas são muito legais! O Hadley pensa que a primeira parte é mostrar o como com o R você pode ter facilidade para fazer diversas coisas, apresentar as comodidades que ele trás. O JJ Allaire, ressalta que a curva de aprendizado do R é muito mais lenta, por isso, educar e ajduar a tornar o processo de aprendizagem mais simples é crucial para que a adoção do R aumente quando comparado ao Excel.&lt;/p&gt;
&lt;p&gt;Enfim, a palestra passa por muitos outros assuntos interessantes como Deep Learning no R, o futuro do R quanto a tipagem (relacionando com TypeScript, etc.), ferramentas de teste para Shiny, inovação e empoderamento no R, R Users Group, paralelização, CRAN e Github e planos do RStudio para os próximos anos.&lt;/p&gt;
&lt;p&gt;Enfim, espero que este post tenha dado vontade de assistir o vídeo. Convido-os a comentar as partes que vocês acharam mais interessantes!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Medidas-resumo no tidyverse</title>
      <link>http://curso-r.com/blog/2017/03/11/2017-02-20-quartis/</link>
      <pubDate>Sat, 11 Mar 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/11/2017-02-20-quartis/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Hoje estava fazendo uma análise exploratória e precisava estudar os quartis de uma variável contínua. A solução usando o &lt;code&gt;tidyverse&lt;/code&gt; é tão elegante que valeu um post no blog.&lt;/p&gt;
&lt;p&gt;Usaremos os pacotes &lt;code&gt;tibble&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt; e &lt;code&gt;purrr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
library(dplyr)
library(tidyr)
library(purrr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse exemplo, usamos a famosa base &lt;code&gt;mtcars&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tab &amp;lt;- mtcars %&amp;gt;% 
  group_by(am, vs) %&amp;gt;% 
  nest() %&amp;gt;% 
  mutate(quartis = map(data, ~enframe(quantile(.x$mpg, 1:3 / 4)))) %&amp;gt;% 
  unnest(quartis) %&amp;gt;% 
  spread(name, value)
tab
## # A tibble: 4 × 5
##      am    vs  `25%` `50%`  `75%`
## * &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     0     0 14.050 15.20 16.625
## 2     0     1 18.650 21.40 22.150
## 3     1     0 16.775 20.35 21.000
## 4     1     1 25.050 30.40 31.400&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;A função &lt;code&gt;dplyr::group_by()&lt;/code&gt; faz um grupo para cada combinação de &lt;code&gt;am&lt;/code&gt; e &lt;code&gt;vs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;tidyr::nest()&lt;/code&gt; guarda os dados de cada grupo numa &lt;em&gt;list-column&lt;/em&gt; chamada &lt;code&gt;data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;purrr::map()&lt;/code&gt; aplica elegantemente a função &lt;code&gt;quantile()&lt;/code&gt; para cada grupo de datas, sendo ajudada pela função &lt;code&gt;tibble::enframe()&lt;/code&gt;, que coloca o resultado de &lt;code&gt;quantile()&lt;/code&gt; em uma &lt;code&gt;tibble&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;tidyr::unnest()&lt;/code&gt; coloca os resultados de volta em colunas-vetores.&lt;/li&gt;
&lt;li&gt;Terminamos com &lt;code&gt;tidyr::spread()&lt;/code&gt; para espalhar os quartis nas colunas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O resultado pode ser jogado diretamente numa tabela:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(tab)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;25%&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;50%&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;75%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.050&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.625&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.775&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.050&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31.400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;É possível mudar esse código para ter outras medidas-resumo, por exemplo. Para isso, podemos usar a função &lt;code&gt;summary()&lt;/code&gt;, por exemplo, ou criar nossa própria função.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;%
  group_by(am, vs) %&amp;gt;% 
  nest() %&amp;gt;% 
  mutate(s = map(data, ~enframe(summary(.x$mpg)))) %&amp;gt;% 
  unnest(s) %&amp;gt;% 
  spread(name, value) %&amp;gt;% 
  knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1st Qu.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3rd Qu.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Max.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Min.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.74&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Como você resolveria essa task? Escreva nos comentários!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OBS&lt;/strong&gt;: Outra solução para a mesma task, mais concisa, usando &lt;code&gt;dplyr::do()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(am, vs) %&amp;gt;% 
  do(enframe(summary(.$mpg))) %&amp;gt;% 
  spread(name, value) %&amp;gt;% 
  knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1st Qu.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3rd Qu.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Max.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Min.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.74&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mas: tome cuidado! Se o Hadley diz…&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://lsru.github.io/r_workshop/img/purrr_do.png&#34; alt=&#34;&#34; /&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Modelando a variância da normal</title>
      <link>http://curso-r.com/blog/2017/03/09/2017-02-21-regressao-heterocedastica/</link>
      <pubDate>Thu, 09 Mar 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/09/2017-02-21-regressao-heterocedastica/</guid>
      <description>&lt;p&gt;Verificar as suposições dos modelos é muito importante quando fazemos inferência estatística. Em particular, a suposição de homocedasticidade&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; dos modelos de regressão linear é especialmente importante, pois modifica o cálculo de erros padrão, intervalos de confiança e valores-p.&lt;/p&gt;
&lt;p&gt;Neste post, vou mostrar três pacotes do R que ajustam modelos da forma&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ Y_i = \beta_0 + \sum_{k=1}^p\beta_kx_{ik} + \epsilon_i, \ i = 1,\ldots,n\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \epsilon_{i} \sim \textrm{N}(0,\sigma_i), \ i = 1,\ldots,n \ \textrm{independentes, com }\sigma_i^2 = \alpha x_i^2.  \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Além de mostrar como se faz, também vou ilustrar o desempenho dos pacotes em um exemplo simulado. O modelo que gerará os dados do exemplo terá a seguinte forma funcional&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ Y_i = \beta x_i + \epsilon_i, \ i = 1,...n \]&lt;/span&gt; &lt;span class=&#34;math display&#34;&gt;\[ \epsilon_i \sim N(0, \sigma_i)\text{ independentes, com }\sigma_i = \alpha\sqrt{|x_i|},\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;e os parâmetros do modelo serão os valores &lt;span class=&#34;math inline&#34;&gt;\(\beta = 1\)&lt;/span&gt; e &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 4\)&lt;/span&gt;. A heterocedasticidade faz com que os pontos desenhem um cone ao redor da reta de regressão.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

N &amp;lt;- 1000

set.seed(11071995)
X &amp;lt;- sample((N/100):(N*3), N)
Y &amp;lt;- rnorm(N,X,4*sqrt(X))

qplot(X,Y) + 
  theme_bw(15) + 
  geom_point(color = &amp;#39;darkorange&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-02-21-regressao-heterocedastica_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;X2 &amp;lt;- sqrt(X)
dataset &amp;lt;- data.frame(Y,X,X2)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;usando-o-pacote-gamlss&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Usando o pacote &lt;code&gt;gamlss&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quando se ajusta um GAMLSS, você pode modelar os parâmetros de locação, escala e curtose ao mesmo tempo em que escolhe a distribuição dos dados dentre uma grande gama de opções. Escolhendo a distribuição normal e modelando apenas os parâmetros de locação e escala, o GAMLSS ajusta modelos lineares normais com heterocedasticidade.&lt;/p&gt;
&lt;p&gt;No código abaixo, o parâmetro &lt;code&gt;formula = Y ~ X-1&lt;/code&gt; indica que a função de regressão será constituída por um preditor linear em &lt;code&gt;X&lt;/code&gt; sem intercepto. Já o parâmetro &lt;code&gt;sigma.formula = ~X2-1&lt;/code&gt; indica que o desvio padrão será modelado por um preditor linear em &lt;code&gt;X2&lt;/code&gt; (ou raiz de &lt;code&gt;X&lt;/code&gt;), também sem intercepto.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gamlss)

fit_gamlss &amp;lt;- gamlss::gamlss(formula = Y ~ X-1,
                             sigma.formula = ~X2-1,
                             data = dataset,
                             family = NO())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;GAMLSS-RS iteration 1: Global Deviance = 17872.29 
GAMLSS-RS iteration 2: Global Deviance = 17870.67 
GAMLSS-RS iteration 3: Global Deviance = 17870.67 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conforme descrito no sumário abaixo, a estimativa de alfa está muito abaixo do valor simulado.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(fit_gamlss)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;******************************************************************
Family:  c(&amp;quot;NO&amp;quot;, &amp;quot;Normal&amp;quot;) 

Call:  gamlss::gamlss(formula = Y ~ X - 1, sigma.formula = ~X2 -  
    1, family = NO(), data = dataset) 

Fitting method: RS() 

------------------------------------------------------------------
Mu link function:  identity
Mu Coefficients:
  Estimate Std. Error t value Pr(&amp;gt;|t|)    
X 0.996942   0.005131   194.3   &amp;lt;2e-16 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

------------------------------------------------------------------
Sigma link function:  log
Sigma Coefficients:
    Estimate Std. Error t value Pr(&amp;gt;|t|)    
X2 0.1791449  0.0009606   186.5   &amp;lt;2e-16 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

------------------------------------------------------------------
No. of observations in the fit:  1000 
Degrees of Freedom for the fit:  2
      Residual Deg. of Freedom:  998 
                      at cycle:  3 
 
Global Deviance:     17870.67 
            AIC:     17874.67 
            SBC:     17884.49 
******************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usando-o-pacote-dglm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Usando o pacote &lt;code&gt;dglm&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quando se ajusta um Modelo Linear Generalizado Duplo (MLGD em português e DGLM em inglês), você tem uma flexibilidade parecida com a de um GAMLSS. Entretanto, você não pode definir um modelo para a curtose e a classe de distribuições disponível é bem menor.&lt;/p&gt;
&lt;p&gt;O código abaixo, similar ao utilizado para ajustar o GAMLSS, ajusta um DGLM aos dados simulados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dglm)

fit &amp;lt;- dglm(Y~X-1, dformula = ~X2-1,data = dataset, family = gaussian, method = &amp;#39;reml&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Warning: glm.fit: algorithm did not converge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Novamente, verifica-se que o alfa estimado está muito distante do verdadeiro alfa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call: dglm(formula = Y ~ X - 1, dformula = ~X2 - 1, family = gaussian, 
    data = dataset, method = &amp;quot;reml&amp;quot;)

Mean Coefficients:
   Estimate  Std. Error t value Pr(&amp;gt;|t|)
X 0.9969432 0.008981392 111.001        0
(Dispersion Parameters for gaussian family estimated as below )

    Scaled Null Deviance: 27197.48 on 1000 degrees of freedom
Scaled Residual Deviance: 3090.08 on 999 degrees of freedom

Dispersion Coefficients:
    Estimate  Std. Error  z value Pr(&amp;gt;|z|)
X2 0.3577322 0.001166004 306.8019        0
(Dispersion parameter for Gamma family taken to be 2 )

    Scaled Null Deviance: 1628.301 on 1000 degrees of freedom
Scaled Residual Deviance: 6526.59 on 999 degrees of freedom

Minus Twice the Log-Likelihood: 17870.76 
Number of Alternating Iterations: 18 &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usando-o-pacote-rstan&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Usando o pacote &lt;code&gt;rstan&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; é uma linguagem de programação voltada para descrever e manipular objetos probabilísticos, como por exemplo variáveis aleatórias, processos estocásticos, distribuições de probabilidades etc. Essa linguagem foi projetada para tornar intuitivo e simples o ajuste de modelos estatísticos. Em particular, a forma de descrever modelos bayesianos é bem cômoda.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;stan&lt;/code&gt; possui várias interfaces para &lt;code&gt;R&lt;/code&gt;. A mais básica é o &lt;code&gt;rstan&lt;/code&gt;, que será utilizada aqui. A principal função desse pacote é a função &lt;code&gt;rstan&lt;/code&gt;, que possui dois parâmetros básicos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;um parâmetro &lt;code&gt;model_code =&lt;/code&gt;, que recebe um código que descreve o modelo na linguagem &lt;code&gt;stan&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;um parâmetro &lt;code&gt;data =&lt;/code&gt;, que recebe uma lista contendo os inputs do modelo, tais como dados coletados, parâmetros de distribuições a priori, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embora esse seja o mínimo que a função precisa, também podemos passar outras componentes. O parâmetro &lt;code&gt;verbose = FALSE&lt;/code&gt; faz com que a função não imprima nada enquanto roda e o parâmetro &lt;code&gt;control = list(...)&lt;/code&gt; passa uma lista de opções de controle para o algoritmo de ajuste.&lt;/p&gt;
&lt;p&gt;O retorno da função &lt;code&gt;stan()&lt;/code&gt; é um objeto do tipo &lt;code&gt;stanfit&lt;/code&gt;, que pode ser sumarizado da mesma forma que outros modelos em R, utilizando a função &lt;code&gt;summary()&lt;/code&gt; e a função &lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O código abaixo ilustra a aplicação da função &lt;code&gt;stan()&lt;/code&gt; ao nosso exemplo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rstan)

scode &amp;lt;- &amp;quot;data {
  int&amp;lt;lower=0&amp;gt; N;
  vector[N] y;
  vector[N] x;
}
parameters {
  real beta;
  real&amp;lt;lower=0&amp;gt; alpha;
}
model {
  beta ~ normal(0,10);
  alpha ~ gamma(1,1);

  y ~ normal(beta * x, alpha * sqrt(x));
}&amp;quot;

dados &amp;lt;- list(N = nrow(dataset), y = dataset$Y, x = dataset$X)

fit_stan &amp;lt;- rstan::stan(model_code = scode, verbose = FALSE, data = dados,
             control = list(adapt_delta = 0.99))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A figura abaixo descreve os intervalos de credibilidade obtidos para cada parâmetro do modelo. O ponto central de cada intervalo representa as estimativas pontuais dos parâmetros. Como se nota, as estimativas do modelo utilizando &lt;code&gt;stan&lt;/code&gt; estão bem próximas dos valores verdadeiros.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(fit_stan)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-02-21-regressao-heterocedastica_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Uma regressão linear é homocedástica quando a variabilidade dos erros não depende das covariáveis do modelo.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>