<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>William on Curso-R</title>
    <link>http://curso-r.com/author/william/index.xml</link>
    <description>Recent content in William on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <atom:link href="http://curso-r.com/author/william/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Você está a menos de 1 km de um Hambúrguer?</title>
      <link>http://curso-r.com/blog/2017/04/10/2017-04-13-o-que-tem-a-um-km/</link>
      <pubDate>Mon, 10 Apr 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/10/2017-04-13-o-que-tem-a-um-km/</guid>
      <description>&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;http://curso-r.com/rmarkdown-libs/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://curso-r.com/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Se você estiver no centro de São Paulo, quanto será que você precisa andar para achar uma hamburgueria? Será que a sua casa fica a menos de 1 km de hospitais, delagacias ou corpo de bombeiros? Neste post, veremos como utilizar uma das APIs do Google Maps para obter informações de geolocalização a partir de uma pesquisa simples. Em seguida, vamos gerar mapas com o pacote &lt;code&gt;leaflet&lt;/code&gt; para visualizar os dados coletados e responder essas perguntas.&lt;/p&gt;
&lt;div id=&#34;passo-1-configurar-a-api-do-google-places&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 1: configurar a API do Google Places&lt;/h2&gt;
&lt;p&gt;A API que vamos utilizar para acessar os dados do Google Maps é a &lt;a href=&#34;https://developers.google.com/places/web-service/?hl=pt-br&#34;&gt;Google Places&lt;/a&gt;. Para configurá-la, você precisa fazer o seguinte:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;criar um projeto no &lt;a href=&#34;https://console.developers.google.com/iam-admin/projects&#34;&gt;Google APIs&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;adicionar a &lt;strong&gt;Google Places API Web Service&lt;/strong&gt; à sua biblioteca de APIs;&lt;/li&gt;
&lt;li&gt;obter uma &lt;a href=&#34;https://support.google.com/googleapi/answer/6158862&#34;&gt;chave de API&lt;/a&gt;; e&lt;/li&gt;
&lt;li&gt;enviar uma requisição.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para mais informações sobre os itens 1, 2 e 3, bastar acessar os links acima. Aqui, vamos focar em como fazer o item 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-2-baixar-os-dados-da-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 2: baixar os dados da API&lt;/h2&gt;
&lt;p&gt;A API do Google Places permite fazer &lt;a href=&#34;https://developers.google.com/places/web-service/search&#34;&gt;alguns tipos de buscas&lt;/a&gt;, como estabelecimentos específicos próximos a um local ou dentro de uma região pré-delimitada. Nosso objetivo aqui é requisitar os dados de todos os estabelecimentos, como hospitais, delegacias, supermercados, escolas etc, dentro de um raio de busca em torno de um ponto específico. Neste contexto, a requisição deve ser feita a partir de um link da forma&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://maps.googleapis.com/maps/api/place/radarsearch/output?parameters&#34; class=&#34;uri&#34;&gt;https://maps.googleapis.com/maps/api/place/radarsearch/output?parameters&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;substituindo &lt;em&gt;output&lt;/em&gt; pelo formato da saída, &lt;code&gt;xml&lt;/code&gt; ou &lt;code&gt;json&lt;/code&gt;, e &lt;em&gt;parameters&lt;/em&gt; pelos parâmetros de busca. Utilizaremos aqui o formato &lt;code&gt;json&lt;/code&gt;, &lt;em&gt;Javascript Object Notation&lt;/em&gt;. Para mais informações sobre JSON, consulte &lt;a href=&#34;http://www.devmedia.com.br/introducao-ao-formato-json/25275&#34;&gt;este link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Utilizaremos as seguintes bibliotecas nesta análise:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
library(magrittr)
library(dplyr)
library(stringr)
library(purrr)
library(RCurl)
library(jsonlite)
library(leaflet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que precisamos fazer é criar a url de requisição, acessá-la, guardar os dados no formato &lt;code&gt;json&lt;/code&gt; em um objeto e convertê-lo para um data frame. A função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; abaixo faz exatamente isso. Mais especificamente, ela recebe os parâmetros de busca, uma chave de API e retorna um data frame com os dados de geolocalização (latitude e longitude) dos resultados encontrados.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O argumento &lt;code&gt;keyword=&lt;/code&gt; recebe o termo a ser pesquisado, isto é, se estivermos pesquisando por escolas, esse argumento receberá a string &lt;code&gt;&#39;escola&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;type=&lt;/code&gt; recebe um termo para filtrar os estabelecimentos pesquisados. Por exemplo: &lt;code&gt;keyword = &#39;restaurante&#39;&lt;/code&gt; e &lt;code&gt;type = &#39;vegetariano&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Os argumentos &lt;code&gt;central_lat=&lt;/code&gt; e &lt;code&gt;central_log=&lt;/code&gt; representam, respectivamente, a latitude e a longitude do ponto central da busca. Os valores &lt;em&gt;default&lt;/em&gt; são os do centro da cidade de São Paulo.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;radius=&lt;/code&gt; indica o raio máximo de busca. O &lt;em&gt;default&lt;/em&gt; é 15 Km.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;key=&lt;/code&gt; deve receber a sua chave de API.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_googlemaps_data &amp;lt;- function(keyword, type = &amp;quot;&amp;quot;, central_lat = -23.55052, 
                                central_log = -46.63331, radius = 15000, key) {
  
  basic_url = &amp;quot;https://maps.googleapis.com/maps/api/place/radarsearch/json?&amp;quot;
  
  if(type != &amp;quot;&amp;quot;) {
    
    type %&amp;lt;&amp;gt;%
      str_replace_all(&amp;quot; &amp;quot;, &amp;quot;+&amp;quot;) %&amp;gt;%  # Os espaços precisam ser 
      str_c(&amp;quot;&amp;amp;type=&amp;quot;, .)             # substituídos por &amp;#39;+&amp;#39;.
  }
  
  complete_url &amp;lt;- str_c(basic_url,        # Criando a url de requisição
                       &amp;quot;location=&amp;quot;,       # com os parâmetros de busca.
                       central_lat,
                       &amp;quot;,&amp;quot;,
                       central_log,
                       &amp;quot;&amp;amp;radius=&amp;quot;,
                       radius,
                       type,
                       &amp;quot;&amp;amp;keyword=&amp;quot;,
                       str_replace_all(keyword, &amp;quot; &amp;quot;, &amp;quot;+&amp;quot;),
                       &amp;quot;&amp;amp;key=&amp;quot;,
                       key)
  
  json &amp;lt;- RCurl::getURL(complete_url)            # Acessando a URL.
  list_info &amp;lt;- jsonlite::fromJSON(json)   # Transformando json em lista.
  
  
  
  # Guardando a latitude e longitude em um df, assim como o lugar pesquisado.
  df &amp;lt;- tibble::tibble(lat = list_info$results$geometry$location$lat,
               long = list_info$results$geometry$location$lng,
               place = keyword)
   
  return(df)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; em mão, basta rodar o código &lt;code&gt;get_googlemaps_data(&amp;quot;mercado&amp;quot;, key = sua_API_key)&lt;/code&gt; para obter a geolocalização de até 200 mercados em um raio de até 15 Km do centro de São Paulo. Sim, o limite é de 200 resultados. Não encontrei maneiras de aumentar esse limite.&lt;/p&gt;
&lt;p&gt;Também podemos utilizar a função &lt;code&gt;purrr:map_df()&lt;/code&gt; para gerar um data frame com várias buscas. A função &lt;em&gt;map&lt;/em&gt; mapeia uma determinada função em cada elemento de um vetor/lista, retornando um data frame. Ainda não estamos construindo os mapas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;places &amp;lt;- c(&amp;quot;pronto socorro&amp;quot;, &amp;quot;delegacia&amp;quot;, &amp;quot;bombeiros&amp;quot;, &amp;quot;hamburguer&amp;quot;, &amp;quot;pizza&amp;quot;)

df_places &amp;lt;- places %&amp;gt;% 
  purrr::map_df(.f = get_googlemaps_data, key = key)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Às vezes, a requisição pode retornar com algum erro. Não consegui descobrir o porquê isso acontece. Nestes casos, a função &lt;code&gt;get_googlemaps_data()&lt;/code&gt; também retornará um erro, provavelmente na construção do data frame. Se isso acontecer, basta rodar a função novamente, gerando uma nova requisição.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-3-os-mapas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Passo 3: os mapas&lt;/h2&gt;
&lt;p&gt;Para construir os mapas, vamos utilizar a função &lt;code&gt;leaflet::leaflet()&lt;/code&gt;. A ideia é, para cada ponto da pesquisa, adicionar um círculo de raio igual a 1 Km. Dessa forma, se você estiver fora desses círculos, quer dizer que você estará a mais de um quilômetro de um dos estabelecimentos pesquisados. Veja os exemplos a seguir.&lt;/p&gt;
&lt;div id=&#34;hospitais&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hospitais&lt;/h3&gt;
&lt;p&gt;Eu pesquisei por “pronto socorro” porque a pesquisa hospitais também resulta em hospitais veterinários. Um desafio para quem for reproduzir a análise: coletar apenas a geolocalização de hospitais públicos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;pronto socorro&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2a9f23a06acfc1e47475&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2a9f23a06acfc1e47475&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5119153,-23.5373825,-23.5905932,-23.5980238,-23.5661976,-23.5845127,-23.4900198,-23.5307666,-23.6059136,-23.5312467,-23.5326516,-23.5705023,-23.6335601,-23.534041,-23.5633472,-23.5651576,-23.5672702,-23.5633193,-23.471358,-23.4714753,-23.5344188,-23.6610511,-23.5387329,-23.6053209,-23.5047759,-23.597356,-23.5254203,-23.4786019,-23.5836116,-23.5441918,-23.5686565,-23.5955258,-23.6166254,-23.5750806,-23.5595911,-23.513787,-23.6688347,-23.569463,-23.5498011,-23.5305855,-23.5305078,-23.5280111,-23.6055052,-23.6409921,-23.5910656,-23.5318183,-23.6334139,-23.5350449,-23.569428,-23.6591257,-23.5821893,-23.5965097,-23.6012416,-23.5317336,-23.5821425,-23.5556018,-23.6553285,-23.6563346,-23.5351773,-23.532219,-23.5280111,-23.5726548,-23.5696204,-23.480409,-23.4897055,-23.5730884,-23.4812918,-23.6247641,-23.546276,-23.6271409,-23.5467703,-23.522846,-23.627863,-23.6001558,-23.5637551,-23.5256167,-23.5952007,-23.5649897,-23.5498492,-23.527939,-23.656156,-23.569428,-23.4857742,-23.596556,-23.6234922,-23.5577053,-23.5390111,-23.6035905,-23.4880345,-23.5693739,-23.6247256,-23.665295,-23.5763024,-23.5563961,-23.5857137,-23.5974124,-23.5575111,-23.532343,-23.4622515,-23.4956783,-23.6025886,-23.5697277,-23.6134365,-23.6751151,-23.613621,-23.5571698,-23.6533311,-23.5686923,-23.5832658,-23.485263,-23.5608918,-23.681394,-23.5368947,-23.6502386,-23.5848796,-23.6057328,-23.5778832,-23.5736788,-23.6361573,-23.6055779,-23.5388485,-23.4786665,-23.5331447,-23.5342429,-23.5256207,-23.4659604,-23.5632955,-23.5730539,-23.5317657,-23.5048116,-23.6139389,-23.5737579,-23.544043,-23.5374351,-23.5488919,-23.570874,-23.5655057,-23.574066,-23.5718713,-23.5848044,-23.5359999,-23.5908277,-23.5635485,-23.4873362,-23.4626237,-23.5227691,-23.5236666,-23.6500238,-23.5312246,-23.5843036,-23.6515538,-23.5814177,-23.6058157,-23.600342,-23.5928542,-23.5146009,-23.572769,-23.5348803,-23.524877],[-46.626602,-46.7222414,-46.673017,-46.6437783,-46.682266,-46.7389951,-46.6886567,-46.6856687,-46.6763323,-46.6527279,-46.6774696,-46.53894,-46.6076853,-46.6880346,-46.5898581,-46.642401,-46.7769605,-46.5899109,-46.5291812,-46.528803,-46.5664698,-46.563856,-46.7767891,-46.6756819,-46.6251452,-46.629591,-46.7110851,-46.5508029,-46.6518868,-46.585348,-46.5857234,-46.6517141,-46.7772604,-46.6690268,-46.6554808,-46.764427,-46.5292085,-46.58553,-46.6595009,-46.697351,-46.697102,-46.6713828,-46.6759325,-46.527937,-46.7036527,-46.621152,-46.6076329,-46.6544871,-46.6616889,-46.6983633,-46.6411569,-46.6536998,-46.6614068,-46.6211242,-46.614028,-46.6728642,-46.5741254,-46.5576687,-46.6601049,-46.7807695,-46.6713828,-46.7229714,-46.6872959,-46.592692,-46.7270244,-46.6960888,-46.7443021,-46.6836816,-46.764964,-46.6386548,-46.7623576,-46.681074,-46.698738,-46.6868637,-46.5904111,-46.5482745,-46.6443238,-46.740635,-46.659294,-46.671341,-46.527015,-46.6616889,-46.6167614,-46.5029179,-46.5653918,-46.6542899,-46.6836854,-46.6558622,-46.6272406,-46.6459197,-46.5640802,-46.527457,-46.6942676,-46.6668833,-46.7177055,-46.6437032,-46.6700211,-46.7769437,-46.5326045,-46.6253623,-46.6518983,-46.6455781,-46.6204509,-46.6856038,-46.6680398,-46.68009,-46.645613,-46.6218602,-46.6117961,-46.6951351,-46.650708,-46.6765187,-46.5894992,-46.7050412,-46.6633198,-46.7505598,-46.7080483,-46.6440605,-46.6947841,-46.675879,-46.6620469,-46.5515213,-46.5663969,-46.6880714,-46.711545,-46.5500737,-46.5899932,-46.6435409,-46.7816035,-46.6251289,-46.6500781,-46.64404,-46.5855476,-46.7769366,-46.558181,-46.6417978,-46.6797014,-46.6391822,-46.5901717,-46.6511464,-46.5752707,-46.6724233,-46.6341114,-46.622235,-46.5198252,-46.5426888,-46.702101,-46.7041659,-46.652742,-46.6115469,-46.7048926,-46.6402724,-46.7624952,-46.678413,-46.637764,-46.7785894,-46.6533613,-46.6747363,-46.693907],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.681394,-23.4622515],&#34;lng&#34;:[-46.7816035,-46.5029179]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;delegacias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Delegacias&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;delegacia&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-0eca1ff6147565d625e6&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-0eca1ff6147565d625e6&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5383123,-23.5297102,-23.5491121,-23.5661229,-23.5688572,-23.4833831,-23.5818477,-23.5298608,-23.5676202,-23.5736771,-23.6227807,-23.4973232,-23.5480212,-23.6791763,-23.5307283,-23.5232008,-23.4783837,-23.601847,-23.5539712,-23.536114,-23.6017882,-23.5098708,-23.4947088,-23.4828219,-23.540883,-23.4673945,-23.6708491,-23.6724756,-23.5987292,-23.5618211,-23.5005049,-23.5568327,-23.653363,-23.5384537,-23.5282851,-23.530853,-23.6468868,-23.6741719,-23.5176746,-23.672469,-23.621305,-23.4731505,-23.6544644,-23.5677311,-23.5384589,-23.6631936,-23.4536045,-23.5489679,-23.5587444,-23.5483289,-23.5459635,-23.5330143,-23.5582539,-23.6737026,-23.5618494,-23.5384554,-23.5231331,-23.579318,-23.6038083,-23.5004539,-23.593785,-23.5361383,-23.6084084,-23.6044058,-23.6565533,-23.5618494,-23.6152646,-23.5500639,-23.5539385,-23.517843,-23.5393787,-23.5023122,-23.6536219,-23.5370451,-23.4947663,-23.6851638,-23.6244069,-23.579318,-23.6717429,-23.5704692,-23.6082049,-23.5353879,-23.579318,-23.4986159,-23.5436404,-23.667303,-23.639554,-23.5393787,-23.5624913,-23.5032441,-23.6153852,-23.6015128,-23.4819928,-23.5459648,-23.5630819,-23.6082362,-23.5388766,-23.5880807,-23.4722036,-23.5289099,-23.6620073,-23.639544,-23.5791521,-23.563454,-23.5430169,-23.6526437,-23.5590782,-23.4556602,-23.6661731,-23.5361564,-23.5311036,-23.5397311,-23.6629003,-23.5310719,-23.536939,-23.5569805,-23.6074999,-23.6567851,-23.5898128,-23.5905868,-23.494313,-23.5587444,-23.4586306,-23.675735,-23.5224255,-23.671542,-23.4536083,-23.53119,-23.5703925,-23.5866997,-23.5054754,-23.6417051,-23.645051,-23.6560117,-23.496984,-23.6219196,-23.6238475,-23.4691728,-23.5282622,-23.5655047,-23.6391001,-23.5126143,-23.469647,-23.5308639,-23.4821316,-23.5361804,-23.5550709,-23.5633395,-23.5382476,-23.5020195,-23.607243,-23.4697691,-23.6741952,-23.4826847,-23.5548435,-23.5120658,-23.4632301,-23.61534,-23.5291141,-23.5234202,-23.6623062,-23.5480535,-23.5384403,-23.532582,-23.5470754,-23.4457197,-23.4635218,-23.5914264,-23.6592795,-23.5351522,-23.6527115,-23.6652897,-23.5377226,-23.6329062,-23.53297,-23.552832,-23.538416,-23.5480557,-23.6673949,-23.5280618,-23.524188,-23.4881236],[-46.6352041,-46.6123622,-46.6374832,-46.6693192,-46.5845768,-46.5899152,-46.6745046,-46.6124474,-46.6237268,-46.5576533,-46.6021564,-46.7457932,-46.6315625,-46.7126109,-46.6427928,-46.6443684,-46.6211789,-46.6377563,-46.4922562,-46.7751834,-46.6377661,-46.4978574,-46.6976676,-46.7280477,-46.6295377,-46.5225908,-46.5476651,-46.6057142,-46.5332901,-46.6912479,-46.64915,-46.6342131,-46.5509209,-46.6350792,-46.7685576,-46.7811049,-46.7074536,-46.5414885,-46.772271,-46.6057579,-46.5578478,-46.5443008,-46.5434002,-46.6717472,-46.6350712,-46.7562845,-46.5554563,-46.537173,-46.7467745,-46.5937954,-46.6350048,-46.6452216,-46.5701152,-46.6598129,-46.6913228,-46.6350996,-46.5187069,-46.5176508,-46.5949903,-46.6492117,-46.5671434,-46.5634063,-46.7360393,-46.6929346,-46.6138111,-46.6913228,-46.6749929,-46.5677175,-46.4922485,-46.5848652,-46.6396037,-46.6156983,-46.6332473,-46.5266046,-46.6977393,-46.6374671,-46.5275439,-46.5176508,-46.5129268,-46.5916434,-46.5710604,-46.5845374,-46.5176508,-46.7710681,-46.7772102,-46.6089909,-46.5626729,-46.6396037,-46.5452257,-46.6129232,-46.67501,-46.637479,-46.7252233,-46.6350021,-46.6544211,-46.5008084,-46.7310141,-46.7268396,-46.5356924,-46.5547585,-46.6869911,-46.6432063,-46.6508845,-46.6978678,-46.6439468,-46.574482,-46.4887345,-46.5131197,-46.586866,-46.5633416,-46.7750776,-46.6452333,-46.7561995,-46.7815275,-46.6653663,-46.6343713,-46.75687,-46.6690569,-46.5532082,-46.6087861,-46.6779309,-46.7467745,-46.5852411,-46.7122978,-46.7058875,-46.5132349,-46.555436,-46.7749852,-46.5915033,-46.5802153,-46.6281239,-46.5288368,-46.525143,-46.5453301,-46.74604,-46.5202035,-46.5369112,-46.6897364,-46.7686436,-46.6380865,-46.5596799,-46.7690733,-46.5378169,-46.7810029,-46.7253273,-46.5634639,-46.6617883,-46.6966132,-46.6341476,-46.6269636,-46.7378895,-46.5241902,-46.5413976,-46.5385258,-46.4922591,-46.6224467,-46.5029513,-46.5723998,-46.7730005,-46.7104606,-46.6869197,-46.6485013,-46.6350638,-46.660818,-46.6332689,-46.717044,-46.6788482,-46.6069425,-46.5263037,-46.57783,-46.5334081,-46.5242607,-46.5291609,-46.7704662,-46.5260099,-46.7738949,-46.6348528,-46.7615798,-46.608524,-46.7100248,-46.688206,-46.5492603],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6851638,-23.4457197],&#34;lng&#34;:[-46.7815275,-46.4887345]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;bombeiros&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bombeiros&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;delegacia&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-66bb9da59c307d7e0bea&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-66bb9da59c307d7e0bea&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.5383123,-23.5297102,-23.5491121,-23.5661229,-23.5688572,-23.4833831,-23.5818477,-23.5298608,-23.5676202,-23.5736771,-23.6227807,-23.4973232,-23.5480212,-23.6791763,-23.5307283,-23.5232008,-23.4783837,-23.601847,-23.5539712,-23.536114,-23.6017882,-23.5098708,-23.4947088,-23.4828219,-23.540883,-23.4673945,-23.6708491,-23.6724756,-23.5987292,-23.5618211,-23.5005049,-23.5568327,-23.653363,-23.5384537,-23.5282851,-23.530853,-23.6468868,-23.6741719,-23.5176746,-23.672469,-23.621305,-23.4731505,-23.6544644,-23.5677311,-23.5384589,-23.6631936,-23.4536045,-23.5489679,-23.5587444,-23.5483289,-23.5459635,-23.5330143,-23.5582539,-23.6737026,-23.5618494,-23.5384554,-23.5231331,-23.579318,-23.6038083,-23.5004539,-23.593785,-23.5361383,-23.6084084,-23.6044058,-23.6565533,-23.5618494,-23.6152646,-23.5500639,-23.5539385,-23.517843,-23.5393787,-23.5023122,-23.6536219,-23.5370451,-23.4947663,-23.6851638,-23.6244069,-23.579318,-23.6717429,-23.5704692,-23.6082049,-23.5353879,-23.579318,-23.4986159,-23.5436404,-23.667303,-23.639554,-23.5393787,-23.5624913,-23.5032441,-23.6153852,-23.6015128,-23.4819928,-23.5459648,-23.5630819,-23.6082362,-23.5388766,-23.5880807,-23.4722036,-23.5289099,-23.6620073,-23.639544,-23.5791521,-23.563454,-23.5430169,-23.6526437,-23.5590782,-23.4556602,-23.6661731,-23.5361564,-23.5311036,-23.5397311,-23.6629003,-23.5310719,-23.536939,-23.5569805,-23.6074999,-23.6567851,-23.5898128,-23.5905868,-23.494313,-23.5587444,-23.4586306,-23.675735,-23.5224255,-23.671542,-23.4536083,-23.53119,-23.5703925,-23.5866997,-23.5054754,-23.6417051,-23.645051,-23.6560117,-23.496984,-23.6219196,-23.6238475,-23.4691728,-23.5282622,-23.5655047,-23.6391001,-23.5126143,-23.469647,-23.5308639,-23.4821316,-23.5361804,-23.5550709,-23.5633395,-23.5382476,-23.5020195,-23.607243,-23.4697691,-23.6741952,-23.4826847,-23.5548435,-23.5120658,-23.4632301,-23.61534,-23.5291141,-23.5234202,-23.6623062,-23.5480535,-23.5384403,-23.532582,-23.5470754,-23.4457197,-23.4635218,-23.5914264,-23.6592795,-23.5351522,-23.6527115,-23.6652897,-23.5377226,-23.6329062,-23.53297,-23.552832,-23.538416,-23.5480557,-23.6673949,-23.5280618,-23.524188,-23.4881236],[-46.6352041,-46.6123622,-46.6374832,-46.6693192,-46.5845768,-46.5899152,-46.6745046,-46.6124474,-46.6237268,-46.5576533,-46.6021564,-46.7457932,-46.6315625,-46.7126109,-46.6427928,-46.6443684,-46.6211789,-46.6377563,-46.4922562,-46.7751834,-46.6377661,-46.4978574,-46.6976676,-46.7280477,-46.6295377,-46.5225908,-46.5476651,-46.6057142,-46.5332901,-46.6912479,-46.64915,-46.6342131,-46.5509209,-46.6350792,-46.7685576,-46.7811049,-46.7074536,-46.5414885,-46.772271,-46.6057579,-46.5578478,-46.5443008,-46.5434002,-46.6717472,-46.6350712,-46.7562845,-46.5554563,-46.537173,-46.7467745,-46.5937954,-46.6350048,-46.6452216,-46.5701152,-46.6598129,-46.6913228,-46.6350996,-46.5187069,-46.5176508,-46.5949903,-46.6492117,-46.5671434,-46.5634063,-46.7360393,-46.6929346,-46.6138111,-46.6913228,-46.6749929,-46.5677175,-46.4922485,-46.5848652,-46.6396037,-46.6156983,-46.6332473,-46.5266046,-46.6977393,-46.6374671,-46.5275439,-46.5176508,-46.5129268,-46.5916434,-46.5710604,-46.5845374,-46.5176508,-46.7710681,-46.7772102,-46.6089909,-46.5626729,-46.6396037,-46.5452257,-46.6129232,-46.67501,-46.637479,-46.7252233,-46.6350021,-46.6544211,-46.5008084,-46.7310141,-46.7268396,-46.5356924,-46.5547585,-46.6869911,-46.6432063,-46.6508845,-46.6978678,-46.6439468,-46.574482,-46.4887345,-46.5131197,-46.586866,-46.5633416,-46.7750776,-46.6452333,-46.7561995,-46.7815275,-46.6653663,-46.6343713,-46.75687,-46.6690569,-46.5532082,-46.6087861,-46.6779309,-46.7467745,-46.5852411,-46.7122978,-46.7058875,-46.5132349,-46.555436,-46.7749852,-46.5915033,-46.5802153,-46.6281239,-46.5288368,-46.525143,-46.5453301,-46.74604,-46.5202035,-46.5369112,-46.6897364,-46.7686436,-46.6380865,-46.5596799,-46.7690733,-46.5378169,-46.7810029,-46.7253273,-46.5634639,-46.6617883,-46.6966132,-46.6341476,-46.6269636,-46.7378895,-46.5241902,-46.5413976,-46.5385258,-46.4922591,-46.6224467,-46.5029513,-46.5723998,-46.7730005,-46.7104606,-46.6869197,-46.6485013,-46.6350638,-46.660818,-46.6332689,-46.717044,-46.6788482,-46.6069425,-46.5263037,-46.57783,-46.5334081,-46.5242607,-46.5291609,-46.7704662,-46.5260099,-46.7738949,-46.6348528,-46.7615798,-46.608524,-46.7100248,-46.688206,-46.5492603],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6851638,-23.4457197],&#34;lng&#34;:[-46.7815275,-46.4887345]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;hamburguerias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hamburguerias&lt;/h3&gt;
&lt;p&gt;Repare que o único local na região mais central de SP em que você pode ficar a mais de um quilômetro de uma hamburgueria é no meio do parque Ibirapuera.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;hamburguer&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4ec25b0a5211993292ef&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4ec25b0a5211993292ef&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.591146,-23.5336461,-23.5838986,-23.5503624,-23.6592217,-23.542275,-23.5797476,-23.596576,-23.5338269,-23.4733347,-23.5266223,-23.5665607,-23.6085312,-23.5553724,-23.506423,-23.4543601,-23.504678,-23.573054,-23.4381869,-23.6018597,-23.578114,-23.485509,-23.5634841,-23.580141,-23.5010416,-23.5346422,-23.5041882,-23.5355418,-23.6089377,-23.5132051,-23.562808,-23.5852957,-23.5613203,-23.5711904,-23.616063,-23.6531883,-23.5090555,-23.5689164,-23.5793803,-23.6262204,-23.5627803,-23.5971131,-23.5678876,-23.628948,-23.5734327,-23.5648008,-23.6009047,-23.556679,-23.6463528,-23.5527839,-23.5465054,-23.5629637,-23.5850463,-23.5599597,-23.6012908,-23.5884194,-23.6240267,-23.566246,-23.5353525,-23.573761,-23.5514768,-23.5373816,-23.5653794,-23.588201,-23.5865903,-23.564753,-23.5147827,-23.5840682,-23.588146,-23.5658447,-23.490545,-23.5821723,-23.592777,-23.6104166,-23.6283446,-23.5389528,-23.5265647,-23.5909182,-23.5578,-23.5742941,-23.5838378,-23.6221529,-23.6448208,-23.595291,-23.6205597,-23.5854537,-23.5543718,-23.5416911,-23.5496606,-23.6532202,-23.5277805,-23.5951434,-23.559425,-23.5553229,-23.5640467,-23.5527584,-23.4836366,-23.5644229,-23.548505,-23.6317016,-23.5638728,-23.5390531,-23.603755,-23.5443723,-23.5828457,-23.5072434,-23.5569599,-23.5805003,-23.5610006,-23.5750971,-23.60095,-23.5693968,-23.616657,-23.58057,-23.5249596,-23.4888868,-23.5895836,-23.6477982,-23.5030827,-23.5700128,-23.5017743,-23.601558,-23.6027181,-23.6059682,-23.568254,-23.4576,-23.5629422,-23.582909,-23.5861822,-23.5934347,-23.5754347,-23.5562148,-23.5398958,-23.5453293,-23.4571858,-23.5831264,-23.5842987,-23.5939793,-23.663584,-23.585636,-23.4581943,-23.5837427,-23.561829,-23.572453,-23.6571708,-23.6107976,-23.653277,-23.5524716,-23.5955253,-23.628859,-23.5879004,-23.504576,-23.595446,-23.6605752,-23.5807706,-23.6136682,-23.535474,-23.5840187,-23.5735392,-23.6126085,-23.5348174,-23.6775988,-23.581018,-23.6324146,-23.5733291,-23.5667822,-23.5571388,-23.5938663,-23.5476359,-23.557399,-23.4595221,-23.5354543,-23.5581649,-23.591519,-23.6570493,-23.539445,-23.591926,-23.5552675,-23.5606171,-23.5604561,-23.5272591,-23.603121,-23.6838816,-23.4943751,-23.4888327,-23.5388857,-23.6083724,-23.4916797,-23.5545398,-23.6454166,-23.5753351,-23.5705675,-23.5739331,-23.5776088,-23.5850495],[-46.606932,-46.6789657,-46.6715329,-46.721243,-46.691653,-46.671616,-46.6401764,-46.645059,-46.6765012,-46.6181558,-46.6809673,-46.6847769,-46.6689898,-46.6672214,-46.6050108,-46.5086841,-46.766024,-46.6957717,-46.5103477,-46.6856274,-46.5864917,-46.6099852,-46.6526611,-46.594538,-46.6234912,-46.6803639,-46.6397583,-46.6682289,-46.6380647,-46.6634067,-46.664692,-46.6851425,-46.6940645,-46.6562935,-46.637284,-46.5741857,-46.6272089,-46.6489332,-46.6749766,-46.6716679,-46.5933429,-46.6679397,-46.6887612,-46.735678,-46.6559783,-46.6813804,-46.6591207,-46.6585153,-46.5411584,-46.6604487,-46.6488861,-46.6671203,-46.67572,-46.6966738,-46.6481923,-46.7178619,-46.6707122,-46.6891856,-46.674463,-46.643287,-46.6512416,-46.6717551,-46.6660143,-46.6070784,-46.6748572,-46.596838,-46.586678,-46.6798554,-46.6807579,-46.6828788,-46.650642,-46.6835917,-46.620418,-46.7270365,-46.6884155,-46.7059855,-46.7087878,-46.680252,-46.6482,-46.5862013,-46.6726088,-46.6716779,-46.7167793,-46.686661,-46.6722255,-46.6884378,-46.6574396,-46.6581628,-46.5732107,-46.715117,-46.6858916,-46.6864676,-46.69182,-46.6671431,-46.6791396,-46.5878087,-46.6142181,-46.6650737,-46.68556,-46.7356058,-46.6955912,-46.7065395,-46.637025,-46.662176,-46.6699937,-46.5891467,-46.6365449,-46.6748554,-46.6978423,-46.6231729,-46.66784,-46.7790474,-46.5617949,-46.639328,-46.5484904,-46.632508,-46.6771678,-46.5330954,-46.6331541,-46.5918849,-46.7387239,-46.645919,-46.6365449,-46.6716015,-46.663007,-46.5035,-46.6689186,-46.649674,-46.6801062,-46.6378852,-46.6214206,-46.6874742,-46.5722354,-46.5662897,-46.5375642,-46.6762251,-46.6812884,-46.6893669,-46.5278969,-46.6844028,-46.6163259,-46.5746757,-46.663569,-46.696094,-46.692626,-46.6857479,-46.715073,-46.5732339,-46.6703355,-46.7323372,-46.6340808,-46.6404152,-46.6665919,-46.5382408,-46.6386028,-46.661306,-46.774918,-46.5787994,-46.6317331,-46.6674626,-46.6967788,-46.6979911,-46.676953,-46.7067056,-46.6896656,-46.5041049,-46.6590561,-46.684693,-46.5405164,-46.6616889,-46.5255218,-46.6584795,-46.6795316,-46.690243,-46.6794921,-46.6815967,-46.689909,-46.6630835,-46.6776155,-46.6536749,-46.6747875,-46.667028,-46.5576865,-46.622905,-46.5485872,-46.7810428,-46.6707483,-46.5789318,-46.6886172,-46.6725334,-46.6232265,-46.6435321,-46.6052905,-46.6863864,-46.6849714],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6838816,-23.4381869],&#34;lng&#34;:[-46.7810428,-46.5035]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;pizzarias&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pizzarias&lt;/h3&gt;
&lt;p&gt;Se a busca devolvesse todos os resultados possíveis, esse mapa teria um círculo azul com ~15 km de raio formado por milhares de círculos menores. =D&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_places %&amp;gt;% 
  dplyr::filter(place == &amp;quot;pizza&amp;quot;) %&amp;gt;% 
  leaflet %&amp;gt;% 
  addTiles() %&amp;gt;%
  addCircles(lng = ~long, lat = ~lat, weight = 5,
             radius = 1000, color = &amp;quot;blue&amp;quot;, fillOpacity = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-96b6491c5b7076e85bb5&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-96b6491c5b7076e85bb5&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircles&#34;,&#34;args&#34;:[[-23.6377832,-23.4462145,-23.5424359,-23.4774627,-23.5419111,-23.6024847,-23.541106,-23.6457094,-23.509009,-23.553901,-23.50269,-23.5329118,-23.5422104,-23.5661403,-23.5452462,-23.5577665,-23.6636748,-23.493779,-23.5705867,-23.6504283,-23.5802283,-23.5569862,-23.6518754,-23.430156,-23.6023253,-23.5556,-23.6132131,-23.5295159,-23.640748,-23.477944,-23.6220978,-23.646009,-23.5600239,-23.5594337,-23.602824,-23.5436359,-23.6852789,-23.5517875,-23.5513039,-23.625363,-23.5396657,-23.5358895,-23.5517621,-23.564383,-23.5506128,-23.5412163,-23.5582873,-23.5303699,-23.564862,-23.532627,-23.5895741,-23.5433224,-23.5949926,-23.602252,-23.5004078,-23.4821581,-23.4982069,-23.5071623,-23.5126657,-23.611988,-23.5372528,-23.5590171,-23.5220143,-23.5770825,-23.6637534,-23.6503046,-23.5190645,-23.4820189,-23.5194119,-23.5653705,-23.584995,-23.6172893,-23.6474922,-23.570713,-23.5295945,-23.5665179,-23.6149595,-23.569128,-23.5835924,-23.605047,-23.5478937,-23.583501,-23.5393727,-23.4732888,-23.549809,-23.4895174,-23.5631008,-23.4927203,-23.532557,-23.587089,-23.5419694,-23.6456114,-23.6209898,-23.6148053,-23.5539137,-23.5500438,-23.5640781,-23.5990557,-23.5821783,-23.6150855,-23.4411447,-23.5683413,-23.5727553,-23.523788,-23.5494877,-23.5123431,-23.5295488,-23.5065289,-23.54339,-23.532351,-23.5834382,-23.5567547,-23.4434337,-23.5572059,-23.6359365,-23.5311848,-23.5795604,-23.5719321,-23.6100783,-23.5974629,-23.6101259,-23.4717705,-23.487415,-23.5819812,-23.5553385,-23.466982,-23.5284249,-23.6332724,-23.547883,-23.599827,-23.4674635,-23.5919894,-23.560073,-23.562154,-23.6185319,-23.6157414,-23.5624923,-23.492689,-23.5444475,-23.5317319,-23.637594,-23.5927858,-23.6131211,-23.4502679,-23.6304068,-23.4431003,-23.5411737,-23.5452338,-23.5595533,-23.574389,-23.5397174,-23.5108,-23.654038,-23.6449382,-23.6230042,-23.5696743,-23.5264596,-23.6101022,-23.5266181,-23.604193,-23.5354641,-23.6452682,-23.547914,-23.5420478,-23.5650258,-23.645387,-23.618032,-23.6227371,-23.6043214,-23.533478,-23.5430459,-23.4996677,-23.607763,-23.6800724,-23.5299556,-23.525889,-23.572832,-23.5466296,-23.5405145,-23.6241098,-23.5338992,-23.4963454,-23.5866832,-23.5518073,-23.4958908,-23.6381805,-23.4663278,-23.5352615,-23.6037182,-23.5991756,-23.5346009,-23.6614632,-23.5608229,-23.5001646],[-46.6547524,-46.5332262,-46.657693,-46.620587,-46.5588801,-46.6198086,-46.569886,-46.6078521,-46.777435,-46.754586,-46.584696,-46.6912456,-46.7707031,-46.652538,-46.7628693,-46.6591531,-46.688653,-46.631612,-46.6434567,-46.5388143,-46.5943854,-46.6326943,-46.5349826,-46.656682,-46.6719859,-46.647515,-46.495481,-46.6857871,-46.6409195,-46.545149,-46.5743651,-46.545329,-46.6636453,-46.6728148,-46.6932222,-46.5619613,-46.562003,-46.544057,-46.5627324,-46.58666,-46.4884504,-46.4974936,-46.5959409,-46.547359,-46.5647461,-46.7437258,-46.6753184,-46.5162473,-46.594627,-46.6897196,-46.6317874,-46.6728329,-46.6313316,-46.661709,-46.6213143,-46.5832032,-46.76981,-46.6708127,-46.6618355,-46.588661,-46.52505,-46.5979523,-46.5220586,-46.5876893,-46.5279125,-46.5389086,-46.7807405,-46.6222273,-46.6763059,-46.6827195,-46.618676,-46.6738651,-46.5161353,-46.6260225,-46.6791571,-46.6542167,-46.7427533,-46.6889177,-46.6889935,-46.66462,-46.5664101,-46.685952,-46.5892121,-46.5448818,-46.6450709,-46.5945648,-46.5476234,-46.7153071,-46.659038,-46.633976,-46.5479707,-46.5073347,-46.67349,-46.7669403,-46.6891084,-46.554711,-46.6795783,-46.6373388,-46.6792503,-46.6675042,-46.5564483,-46.6578993,-46.69551,-46.693134,-46.6458761,-46.5147357,-46.5274241,-46.7184862,-46.7687562,-46.685107,-46.7505034,-46.7531604,-46.5441554,-46.7486309,-46.7121613,-46.6827964,-46.7386436,-46.6268869,-46.6882732,-46.7317588,-46.666563,-46.6373485,-46.6332363,-46.7327819,-46.5880192,-46.6034698,-46.5271221,-46.7049679,-46.657564,-46.6728546,-46.5160969,-46.643832,-46.698603,-46.646222,-46.571754,-46.6435343,-46.6676688,-46.629935,-46.6214891,-46.7177885,-46.5468276,-46.6449969,-46.5762207,-46.5443476,-46.7359753,-46.5493277,-46.5896285,-46.6518954,-46.6816634,-46.726939,-46.7796091,-46.508914,-46.534698,-46.7149926,-46.5726881,-46.5456595,-46.7669566,-46.5324295,-46.6966314,-46.669199,-46.7124692,-46.5933522,-46.753617,-46.7776072,-46.6809555,-46.5742119,-46.6789757,-46.639773,-46.7494812,-46.704333,-46.5526644,-46.6438895,-46.573151,-46.6550872,-46.7284971,-46.687889,-46.540983,-46.6387818,-46.6509312,-46.5578388,-46.6931313,-46.7255467,-46.5805153,-46.7500256,-46.6669341,-46.5434583,-46.5601988,-46.5096595,-46.6580583,-46.6116123,-46.64933,-46.6946439,-46.5846951,-46.5243514],1000,null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;blue&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;blue&#34;,&#34;fillOpacity&#34;:0.5,&#34;dashArray&#34;:null},null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-23.6852789,-23.430156],&#34;lng&#34;:[-46.7807405,-46.4884504]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Sem dúvidas, a utilização dos dados aqui foi bem superficial, apenas ilustrativa. O ideal seria juntar essas informações de geolocalização com dados de criminalidade, saúde pública, socioeconômicos, consumo etc. Dependendo da disponibilidade de dados, há espaço para muitas análises interessantes utilizando essas informações do Google Maps. Com certeza voltaremos neste assunto em posts futuros. =)&lt;/p&gt;
&lt;p&gt;Comentários? Sugestões? Críticas? Você está a menos de um quilômetro dos comentários! Deixe a sua mensagem!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Knitr: mudando o diretório de trabalho</title>
      <link>http://curso-r.com/blog/2017/03/25/2017-03-25-knitr-mudando-diretorio-de-trabalho/</link>
      <pubDate>Sat, 25 Mar 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/25/2017-03-25-knitr-mudando-diretorio-de-trabalho/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;O pacote &lt;code&gt;knitr&lt;/code&gt; é um mecanismo rápido, elegante e flexível para gerar relatórios dinâmicos no R. Ele trabalha lado a lado com o &lt;code&gt;rmarkdown&lt;/code&gt; para transformar arquivos &lt;code&gt;.Rmd&lt;/code&gt; em diversos formatos, como html, pdf e até mesmo word. Misturando &lt;em&gt;chunks&lt;/em&gt; de código em R com texto puro, LaTeX e html, a tarefa de criar outputs para análises estatísticas no R ficou muito mais simples.&lt;/p&gt;
&lt;p&gt;Quando estamos trabalhando com arquivos Rmarkdown no Rstudio, o diretório de trabalho é a própria pasta onde o &lt;code&gt;Rmd&lt;/code&gt; está salvo. Assim, se o nosso relatório tem algum input (banco de dados, arquivos com código em R ou imagens, por exemplo), esses arquivos precisam estar nessa pasta. Isso pode ser uma chateação se você está dentro de um projeto e organizou os arquivos de forma diferente: banco de dados em uma pasta, &lt;code&gt;.R&lt;/code&gt; em outra, imagens em outra, outputs em outra…&lt;/p&gt;
&lt;p&gt;A primeira ideia que vem à cabeça é usar a função &lt;code&gt;setwd()&lt;/code&gt; dentro de algum chunk para mudar o diretório de trabalho dentro do arquivo &lt;code&gt;Rmd&lt;/code&gt;. No entanto, se fizermos isso, o diretório de trabalho será mudado para aquele chunk, mas voltará a ser a pasta do arquivo &lt;code&gt;.Rmd&lt;/code&gt; após a sua execução. Veja o &lt;code&gt;warning&lt;/code&gt; abaixo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;#39;../&amp;#39;)

# Warning message: you changed the working directory 
# to C:/novo_diretorio (probably via setwd()). 
# It will be restored to C:/diretorio_do_Rdm. 
# See the Note section in ?knitr::knit.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lendo a seção “Note” do &lt;code&gt;?knitr:knit&lt;/code&gt;, verificamos que mudar o diretório de trabalho via &lt;code&gt;setwd()&lt;/code&gt; pode levar a &lt;strong&gt;terríveis consequências&lt;/strong&gt;. Basicamente, figuras e arquivos de cache podem ser salvos no lugar errado, e o seu relatório não será gerado corretamente. Ainda lendo a seção “Note”, encontramos a maneira correta de mudar o diretório de trabalho: setar a opção &lt;code&gt;opts_knit$set(root.dir = ...)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;opts_knit$set(root.dir = &amp;#39;../&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vale ainda ressaltar que a mudança do diretório só vai ser definida para os chunks seguintes, isto é, se você fizer a mudança &lt;code&gt;opts_knit$set(root.dir = &#39;../&#39;)&lt;/code&gt; e, no mesmo chunk, tentar ler um arquivo no diretório pai (&lt;code&gt;source(input.R)&lt;/code&gt;, por exemplo), o arquivo não vai ser encontrado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Porta dos Fundos está em decadência?</title>
      <link>http://curso-r.com/blog/2017/03/20/2017-03-20-porta-dos-fundos-decadencia/</link>
      <pubDate>Mon, 20 Mar 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/20/2017-03-20-porta-dos-fundos-decadencia/</guid>
      <description>&lt;p&gt;Há alguns anos eu acompanho o canal Porta dos fundos no YouTube, assistindo os vídeos quase sempre no dia de lançamento. Mesmo dividido entre esquetes boas e ruins, me considero um fã da trupe de humoristas (e do Totoro também), principalmente pelo humor sarcástico e pela satirização de diversos tabus da nossa sociedade.&lt;/p&gt;
&lt;p&gt;Nos últimos meses, no entanto, meu entusiasmo com o canal vem diminuindo. A necessidade de postar três vídeos por semana para se manter relevante no sistema de recomendações do YouTube, o que mantém o canal rentável, me faz perdoar um ou outro conteúdo sem graça ou rasteiro, mas sinto que o que era exceção começou a virar regra.&lt;/p&gt;
&lt;p&gt;Não sei se eu que fiquei chato ou se outras pessoas compartilham a minha opinião. Então resolvi scrapear informações do canal e montar algumas visualizações para tirar essa dúvida.&lt;/p&gt;
&lt;p&gt;Segue um passo a passo de como fiz isso utilizando o R.&lt;/p&gt;
&lt;div id=&#34;passo-1-instalar-e-configurar-o-pacote-tuber&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 1: instalar e configurar o pacote &lt;code&gt;tuber&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;O pacote &lt;code&gt;tuber&lt;/code&gt; contém funções que permitem acessar a API do YouTube utilizando o R. Assim, podemos ter acesso a diversas estatísticas como número de likes, número de views, comentários de vídeos, entre outras.&lt;/p&gt;
&lt;p&gt;Para instalar o pacote, rode o código &lt;code&gt;install.packages(&amp;quot;tuber&amp;quot;)&lt;/code&gt; ou &lt;code&gt;devtools::install_github(&amp;quot;soodoku/tuber&amp;quot;, build_vignettes = TRUE)&lt;/code&gt; para baixar a versão de desenvolvimento mais recente.&lt;/p&gt;
&lt;p&gt;Para utilizar o &lt;code&gt;tuber&lt;/code&gt; é preciso um &lt;em&gt;id&lt;/em&gt; e um &lt;em&gt;secret&lt;/em&gt; do &lt;a href=&#34;https://developers.google.com/youtube/v3/getting-started&#34;&gt;Console de Desenvolvimento da Google&lt;/a&gt;. Após criar uma conta, basta habilitar todas as APIs do YouTube e a Freebase API.&lt;/p&gt;
&lt;p&gt;Feito isso, rode o código abaixo com o &lt;em&gt;id&lt;/em&gt; e &lt;em&gt;secret&lt;/em&gt; obtidos pela plataforma para configurar o acesso do &lt;code&gt;tuber&lt;/code&gt; à API.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tuber)

yt_oauth(app_id = &amp;quot;seu_app_id&amp;quot;, 
         app_secret = &amp;quot;seu_app_secret&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se tudo foi configurado corretamente, ele abrirá uma aba no seu navegador confirmando a autenticação, e você poderá voltar ao R para começar a scrapear.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-2-buscar-o-id-dos-videos-do-canal&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 2: buscar o id dos vídeos do canal&lt;/h1&gt;
&lt;p&gt;Para organizar as informações dos vídeos em um banco de dados e gerar as visualizações, vamos utilizar as seguintes bibliotecas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)          # Manipulação de dados
library(tidyr)          # Manipulação de dados
library(tibble)         # Criação de dataframes
library(lubridate)      # Manipulação de datas
library(purrr)          # Funcionais
library(ggplot2)        # Gráficos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Precisamos do &lt;em&gt;id&lt;/em&gt; de cada vídeo do Porta dos Fundos para baixar as suas estatísticas. A função &lt;code&gt;tuber::yt_search()&lt;/code&gt; pesquisa por vídeos e suas informações. Rodando &lt;code&gt;yt_search(term = &amp;quot;Porta dos fundos&amp;quot;)&lt;/code&gt;, obtemos informações de alguns vídeos do canal, inclusive que o seu &lt;em&gt;channel id&lt;/em&gt; é “UCEWHPFNilsT0IfQfutVzsag”. O &lt;em&gt;channel id&lt;/em&gt; é essencial para obtermos todos os vídeos do Porta.&lt;/p&gt;
&lt;p&gt;Por default, a função &lt;code&gt;yt_search()&lt;/code&gt; retorna no máximo 50 resultados. Contudo, se setarmos os parâmetros &lt;code&gt;type = &amp;quot;video&amp;quot;&lt;/code&gt; e &lt;code&gt;channal_id = &amp;quot;id_de_algum_canal&amp;quot;&lt;/code&gt;, o número máximo passa a ser 500 resultados.&lt;/p&gt;
&lt;p&gt;Para facilitar o trabalho, eu criei a função &lt;code&gt;get_videos_porta()&lt;/code&gt;. Ela recebe uma data de início e de término (em um dataframe com apenas uma linha) e devolve todos os vídeos do canal Porta dos Fundos nesse período.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_videos_porta &amp;lt;- function(dates) {
  
  yt_search(term = &amp;quot;&amp;quot;, 
            type = &amp;quot;video&amp;quot;,
            channel_id = &amp;quot;UCEWHPFNilsT0IfQfutVzsag&amp;quot;,
            published_after = dates$start,
            published_before = dates$end)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada linha do dataframe de datas a seguir representa períodos de um ano, de 2012 a 2017. Isso implica que, em cada busca, vou receber os vídeos do Porta dos Fundos para cada um desses anos. O mutate formata as datas no padrão exigido pela função &lt;code&gt;yt_search()&lt;/code&gt;. Veja &lt;code&gt;help(yt_search)&lt;/code&gt; para mais informações.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dates &amp;lt;- tibble(start = seq(ymd(&amp;quot;2012-01-01&amp;quot;), ymd(&amp;quot;2017-01-01&amp;quot;), by = &amp;quot;years&amp;quot;),
                        end = seq(ymd(&amp;quot;2012-12-31&amp;quot;), ymd(&amp;quot;2017-12-31&amp;quot;), by = &amp;quot;years&amp;quot;)) %&amp;gt;% 
  mutate(start = paste(start, &amp;quot;T0:00:00Z&amp;quot;, sep = &amp;quot;&amp;quot;),
         end = paste(end, &amp;quot;T0:00:00Z&amp;quot;, sep = &amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por fim, atribuímos ao objeto &lt;code&gt;videos&lt;/code&gt; as informações de todos os videos do canal de 2012 a 2017.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
videos &amp;lt;- by_row(.d = dates, ..f = get_videos_porta, .to = &amp;quot;videos_info&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-3-pegar-as-estatisticas-de-cada-video&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 3: pegar as estatísticas de cada vídeo&lt;/h1&gt;
&lt;p&gt;Para facilitar essa etapa, eu criei a função &lt;code&gt;get_videos_stats()&lt;/code&gt;, que recebe um dataframe de uma linha contendo uma coluna &lt;code&gt;$video_id&lt;/code&gt; e, usando a função &lt;code&gt;tuber::get_stats()&lt;/code&gt;, faz o scrape das estatísticas do vídeo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_videos_stats &amp;lt;- function(df_row) {
  
  get_stats(video_id = df_row$video_id)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada elemento da coluna &lt;code&gt;$video_info&lt;/code&gt; contém um dataframe com as informações dos vídeos de um determinado ano. Com a função &lt;code&gt;dplyr::bind_rows()&lt;/code&gt;, juntamos esses dataframes em um só. Então selecionamos as colunas de interesse: &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;publishedAt&lt;/em&gt; e &lt;em&gt;video_id&lt;/em&gt;. Por fim, utilizamos os &lt;em&gt;id’s&lt;/em&gt; para baixar as estatísticas de cada vídeo usando a função &lt;code&gt;get_videos_stats()&lt;/code&gt;. As estatísticas são salvas na coluna &lt;code&gt;$videos_stats&lt;/code&gt; do objeto &lt;code&gt;dados&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados &amp;lt;- bind_rows(videos$videos_info) %&amp;gt;% 
  select(title, publishedAt, video_id) %&amp;gt;%
  by_row(..f = get_videos_stats, .to = &amp;quot;videos_stats&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;passo-4-as-visualizacoes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passo 4: as visualizações&lt;/h1&gt;
&lt;p&gt;A primeira visualização que resolvi fazer foi um gráfico do número de visualizações pela data de publicação. Uma análise descuidada desse gráfico pode indicar uma clara redução dos números de views ao longo do tempo. No entanto, é preciso levar em conta que vídeos mais antigos tendem a ter mais views por simplesmente estarem disponíveis há mais tempo. Apesar disso, dois fatores me fazem acreditar que a magnitude do número de views de um vídeo é alcançada nos primeiros dias após o lançamento. O primeiro se deve ao sistema de recomendações do YouTube. Na página inicial, nem sempre os vídeos recomendados são dos canais que você se inscreveu. Na página de canais inscritos, se você tiver muitas inscrições, é fácil perder um vídeo ou outro de um dos canais que acompanha. O segundo se deve à enorme quantidade de conteúdo disponível hoje em dia, muito² maior do que há quatro, cinco anos. Eu, por exemplo, sou inscrito em mais de vinte canais e não consigo acompanhar nem cinco deles. Para quem não pode ficar o dia todo vendo vídeos, realmente há muita competição por espaço no YouTube.&lt;/p&gt;
&lt;p&gt;E apresento ainda um terceiro fator, contrariando a expectativa de existirem apenas dois. Vivemos na era do &lt;em&gt;hype&lt;/em&gt;. O que é velho, o que é notícia da semana passada, já não interessa mais.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;% 
  mutate(views = map(videos_stats, .f = &amp;#39;viewCount&amp;#39;)) %&amp;gt;% 
  unnest(views) %&amp;gt;% 
  mutate(views = as.numeric(views),
         publishedAt = as_date(publishedAt)) %&amp;gt;% 
  ggplot(aes(x = publishedAt, y = views)) +
  geom_line(aes(y = 1000000, colour = &amp;quot;1 Milhão&amp;quot;)) +
  geom_line(aes(y = 10000000, colour = &amp;#39;10 Milhões&amp;#39;)) +
  geom_line(aes(y = 20000000, colour = &amp;#39;20 Milhões&amp;#39;)) +
  geom_line() +
  labs(x = &amp;quot;Data de publicação&amp;quot;, y = &amp;quot;Visualizações&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-20-porta-dos-fundos-decadencia_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Também fiz um gráfico da proporção likes/dislikes pela data de publicação do vídeo. Parece haver uma leve redução dessa proporção no último ano, mas é arriscado tirar uma conclusão. Refazendo essa análise no fim de 2017, talvez fique mais claro se o público do canal concorda comigo sobre a qualidade do conteúdo nos últimos tempos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dados %&amp;gt;% 
  mutate(likes = map(videos_stats, .f = &amp;#39;likeCount&amp;#39;),
         dislikes = map(videos_stats, .f = &amp;#39;dislikeCount&amp;#39;)) %&amp;gt;% 
  unnest(likes, dislikes) %&amp;gt;% 
  mutate(likes = as.numeric(likes),
         dislikes = as.numeric(dislikes),
         publishedAt = as_date(publishedAt),
         prop = likes/dislikes) %&amp;gt;% 
  ggplot(aes(x = publishedAt)) +
  geom_line(aes(y = prop)) +
  labs(x = &amp;quot;Data de publicação&amp;quot;, y = &amp;quot;Likes/Dislikes&amp;quot;) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-03-20-porta-dos-fundos-decadencia_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;4800&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O Porta dos Fundos é sem dúvida um gigante no YouTube, mas os indícios dessa sucinta análise colaboram com a minha opinião de que o canal já viveu dias (bem) melhores. Apesar de essa decadência poder ser só uma fase ruim, nunca é cedo para se reinventar, ter novas ideias, definir as regras do jogo, assim como eles fizeram no início.&lt;/p&gt;
&lt;p&gt;E se faltar ideias, vídeos com o Totoro são sempre uma boa alternativa.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>O que é um gráfico estatístico?</title>
      <link>http://curso-r.com/blog/2017/02/20/2017-02-20-o-que-e-um-grafico-estatistico/</link>
      <pubDate>Mon, 20 Feb 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/02/20/2017-02-20-o-que-e-um-grafico-estatistico/</guid>
      <description>&lt;p&gt;Os gráficos são técnicas de visualização de dados amplamente utilizadas em todas as áreas da pesquisa. A sua popularidade se deve à maneira como elucidam informações que estavam escondidas nas colunas do banco de dados, sendo que muitos deles podem ser compreendidos até mesmo por leigos no assunto que está sendo discutido.&lt;/p&gt;
&lt;p&gt;Mas será que podemos definir formalmente o que é um gráfico estatístico?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-02-20-o-que-e-um-grafico-estatistico_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Graças ao estatístico norte-americano Leland Wilkinson, a resposta é sim.&lt;/p&gt;
&lt;p&gt;Em 2005, Leland publicou o livro &lt;em&gt;The Grammar of Graphics&lt;/em&gt;, uma fonte de princípios fundamentais para a construção de gráficos estatísticos. No livro, ele defende que um gráfico é o mapeamento dos dados a partir de atributos estéticos (posição, cor, forma, tamanho) de objetos geométricos (pontos, linhas, barras, caixas). Simples assim.&lt;/p&gt;
&lt;p&gt;Além de responder a pergunta levantada nesse post, os conceitos de Leland tiveram outra grande importância para a visualização de dados. Alguns anos mais tarde, o seu trabalho inspirou Hadley Wickham a criar o pacote &lt;code&gt;ggplot2&lt;/code&gt;, que enterrou com muitas pás de terra as funções gráficas do R base.&lt;/p&gt;
&lt;p&gt;Em &lt;em&gt;A Layered Grammar of Graphics&lt;/em&gt;, Hadley sugeriu que os principais aspectos de um gráfico (dados, sistema de coordenadas, rótulos e anotações) podiam ser divididos em camadas, construídas uma a uma na elaboração do gráfico. Essa é a essência do &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No gráfico abaixo, temos informação de 32 carros com respeito a 4 variáveis: milhas por galão, tonelagem, transmissão e número de cilindros. O objeto geométrico escolhido para representar os dados foi o &lt;strong&gt;ponto&lt;/strong&gt;. As posições dos pontos no eixo xy mapeia a associação entre a tonelagem e a quantidade de milhas por galão. A cor dos pontos mapeia o número de cilindros de cada carro, enquanto a forma dos pontos mapeia o tipo de transmissão. Observando o código, fica claro como cada linha/camada representa um aspecto diferente do gráfico.&lt;/p&gt;
&lt;p&gt;Os conceitos criados por Leland e Hadley defendem que essa estrutura pode ser utilizada para construir e entender qualquer tipo de gráfico, dando a eles, dessa maneira, a sua definição formal.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mtcars) +
  geom_point(aes(x = disp, y = mpg, shape = as.factor(am), color = cyl)) +
  labs(x = &amp;quot;Tonelagem&amp;quot;, y = &amp;quot;Milhas por galão&amp;quot;, 
       shape = &amp;quot;Transmissão&amp;quot;, color = &amp;quot;Cilindros&amp;quot;) +
  scale_shape_discrete(labels = c(&amp;quot;Automática&amp;quot;,&amp;quot;Manual&amp;quot;)) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-02-20-o-que-e-um-grafico-estatistico_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Por fim, é preciso frisar que, apesar de a gramática prover uma forte fundação para a construção de gráficos, ela não indica qual gráfico deve ser usado ou como ele deve parecer. Essas escolhas, fundamentadas na pergunta a ser respondida, nem sempre são triviais, e negligenciá-las pode gerar gráficos mal construídos e conclusões equivocadas. Cabe a nós, estatísticos, desenvolver, aprimorar e divulgar as técnicas de visualização adequadas para cada tipo de variável, assim como apontar ou denunciar os usos incorretos e mal-intencionados. Mas, em um mundo cuja veracidade das notícias é cada vez menos importante, é papel de todos ter senso crítico para entender e julgar as informações trazidas por um gráfico.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O blog do Curso R</title>
      <link>http://curso-r.com/blog/2017/02/15/2017-02-15-blog-curso-r/</link>
      <pubDate>Wed, 15 Feb 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/02/15/2017-02-15-blog-curso-r/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Esse é o blog do Curso-R. Nós somos o Athos, Daniel, Fernando, Julio e William e seremos os autores dos posts desse blog. Aqui, vamos divulgar pequenas análises, novidades sobre o R e pequenas descobertas sobre estatística e Data Science. Sinta-se a vontade para comentar no espaço abaixo. Adoramos comentários! Também fique a vontade para compartilhar os nossos posts.&lt;/p&gt;
&lt;p&gt;O Curso-R surgiu em 2015 no programa de verão do Instituto de Matemática e Estatística da Universidade de São Paulo (IME-USP). o curso foi chamado de “Programação em R: do casual ao avançado”. Desde o começo, nós abraçamos a filosofia &lt;em&gt;Open Source&lt;/em&gt; - todo material que desenvolvemos fica disponível em nossa conta do &lt;a href=&#34;https://github.com/curso-r/&#34;&gt;Github&lt;/a&gt; de forma aberta para quem quiser usar. Em 2016 e 2017, ministramos novamente o curso no programa de verão e, depois de mais de 100 alunos formados, decidimos aumentar a gama de cursos e a frequência de ocorrência para que possamos atingir muito mais pessoas com essas tecnologias, pelas quais nós somos apaixonados.&lt;/p&gt;
&lt;p&gt;Esperamos que aprendam bastante e, principalmente, divirtam-se bastante lendo este blog!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>