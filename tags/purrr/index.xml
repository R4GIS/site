<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Purrr on Curso-R</title>
    <link>http://curso-r.com/tags/purrr/</link>
    <description>Recent content in Purrr on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Apr 2017 13:07:31 +0200</lastBuildDate>
    
	<atom:link href="http://curso-r.com/tags/purrr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tratando erros: the tidy way</title>
      <link>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</link>
      <pubDate>Thu, 20 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</guid>
      <description>Tratar erros no R é importante para identificar problemas nos códigos e evitar retrabalho. Quem nunca rodou um algoritmo pesadíssimo que deu errado na última iteração? Nesse artigo, veremos como trabalhar com erros no R e a versão tidy dessas soluções.
Usando try() e tryCatch() A forma tradicional de tratar erros no R é com a função tryCatch(). Essa função tem como primeiro argumento uma expressão a ser avaliada e argumentos diversos para trabalhar com os erros.</description>
    </item>
    
    <item>
      <title>Medidas-resumo no tidyverse</title>
      <link>http://curso-r.com/blog/2017/03/11/2017-02-20-quartis/</link>
      <pubDate>Sat, 11 Mar 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/03/11/2017-02-20-quartis/</guid>
      <description>Hoje estava fazendo uma análise exploratória e precisava estudar os quartis de uma variável contínua. A solução usando o tidyverse é tão elegante que valeu um post no blog.
Usaremos os pacotes tibble, dplyr, tidyr e purrr:
library(tibble) library(dplyr) library(tidyr) library(purrr) Nesse exemplo, usamos a famosa base mtcars
tab &amp;lt;- mtcars %&amp;gt;% group_by(am, vs) %&amp;gt;% nest() %&amp;gt;% mutate(quartis = map(data, ~enframe(quantile(.x$mpg, 1:3 / 4)))) %&amp;gt;% unnest(quartis) %&amp;gt;% spread(name, value) tab ## # A tibble: 4 x 5 ## am vs `25%` `50%` `75%` ## * &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; ## 1 0 0 14.</description>
    </item>
    
  </channel>
</rss>