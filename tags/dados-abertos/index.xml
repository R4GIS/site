<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dados Abertos on Curso-R</title>
    <link>http://curso-r.com/tags/dados-abertos/index.xml</link>
    <description>Recent content in Dados Abertos on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <atom:link href="http://curso-r.com/tags/dados-abertos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web scraping do site da Secretaria de Segurança Pública de São Paulo</title>
      <link>http://curso-r.com/blog/2017/05/19/2017-05-19-scrapper-ssp/</link>
      <pubDate>Fri, 19 May 2017 23:26:00 +0300</pubDate>
      
      <guid>http://curso-r.com/blog/2017/05/19/2017-05-19-scrapper-ssp/</guid>
      <description>&lt;p&gt;Quando eu trabalhei no Núcleo de Estudos da Violência da USP, obter informações da Secretaria de Segurança Pública de São Paulo (SSP) era uma tarefa meio esotérica. Coletávamos os dados de todos os DP’s de São Paulo, que são aproximadamente 100, e, como fazer isso manualmente era demorado, aplicávamos uma solução automática em dois passos. Primeiro &lt;em&gt;raspávamos&lt;/em&gt; o site da SSP em Python&lt;!--, com um script desenvolvido antes da minha entrada,--&gt; e depois rodávamos uma macro em VBA chamada “Mestre Dos Magos”, que era responsável por consolidar as séries históricas em excel. Eu achava o procedimento um pouco hermético porque nenhum deles tinha sido feito por mim ou pela minha equipe, era uma herança que a gente não sabia como consertar se desse algum problema. Para dar um exemplo, no final da minha breve estadia no NEV o script não funcionava mais, então era necessário baixar tudo manualmente.&lt;/p&gt;
&lt;p&gt;Depois dessa época eu nunca mais mexi com esses dados. Eu sempre tive vontade de implementar uma solução em R, mas sempre faltou motivação. Felizmente, na ultima semana minha namorada precisou dos dados da SSP para um trabalho que está fazendo, só que dessa vez o interesse era em todos os 645 municípios do estado de São Paulo nos anos entre 2013 a 2016. Como não há como baixar todas essas informações de uma vez e downloads individuais tomam muito tempo, eu me senti motivado o suficiente para atacar o problema.&lt;!--Pensamos um pouco e construímos um _scrapper_ da SSP em R.--&gt;&lt;/p&gt;
&lt;p&gt;Pra ser sincero, foi bem mais fácil do que eu achei que seria. A construção do programa foi tão simples que cabe até mesmo neste post de blog, mas não é só por isso que ela está aqui. &lt;!--De fato, _scrappers_ não vêm em muitas dificuldades (ou são ou muito fáceis, ou são muito difíceis),--&gt; Esse é um exemplo minimal de todas as fases de construção de um &lt;em&gt;scraper&lt;/em&gt;.&lt;!--e neste post vou mostrar como raspar o site da SSP de São Paulo em R.--&gt;&lt;/p&gt;
&lt;div id=&#34;os-quatro-passo-para-construir-um-scraper&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Os quatro passo para construir um &lt;em&gt;scraper&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Em um esquema aproximado, eu acredito que raspar (ou &lt;em&gt;scrappear&lt;/em&gt;) um site pode ser feito em 4 passos:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Defina a página que você quer raspar;&lt;/li&gt;
&lt;li&gt;Identifique &lt;em&gt;exatamente&lt;/em&gt; que requisições que produzem o que você quer;&lt;/li&gt;
&lt;li&gt;Construa um programa que &lt;em&gt;imite&lt;/em&gt; as requisições que você faria manualmente;&lt;/li&gt;
&lt;li&gt;Repita o passo 3. quantas vezes quiser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mesmo que existam &lt;em&gt;scrapers&lt;/em&gt; mais complicados, é verdade que seguir esses passos pelo menos te ajuda a chegar mais perto do que você realmente precisará fazer depois.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defina-o-que-voce-quer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Defina o que você quer&lt;/h2&gt;
&lt;p&gt;Tanto o NEV quanto a minha namorada tinham interesse nas tabelas que apareciam numa URL específica do site: &lt;a href=&#34;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&#34; class=&#34;uri&#34;&gt;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&lt;/a&gt;. A lógica por trás da divulgação dessas informações é a seguinte: você escolhe um ano, uma localidade geográfica/administrativa e um tipo de informação e ele te devolve uma tabela. Os anos disponíveis são os anos de 2001 a 2017, as localidades são os cruzamentos entre Municípios, Regiões e Delegacias (notando que você sempre pode escolher “Todos”) e os tipos de informação são taxas de delito, ocorrências registradas por ano, ocorrências registradas por mês e produtividade policial. Nesta aplicação vamos procurar contagens de ocorrências registradas por mês.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;identifique-o-que-o-site-faz-por-tras&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Identifique o que o site faz por trás&lt;/h2&gt;
&lt;p&gt;Identificar o que o site faz por trás provavelmente é a fase mais complicada da construção de um &lt;em&gt;scraper&lt;/em&gt;. A dificuldade é que não existe um algoritmo que faça isso pra você. Normalmente eu sigo alguns passos, mas eles exigem uma dose de &lt;em&gt;insight&lt;/em&gt; para funcionar, o que implica que talvez não seja possível seguir todos os passos em sequência.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Entre na página imediatamente anterior à página que você quer acessar.&lt;/li&gt;
&lt;li&gt;Abra as ferramentas de desenvolvedor dos seu navegador (isso normalmente é equivalente à “aperte F12”).&lt;/li&gt;
&lt;li&gt;Selecione a aba “Network” (ou “Rede”) na caixa de ferramentas do desenvolvedor.&lt;/li&gt;
&lt;li&gt;Vá para a página que você quer.&lt;/li&gt;
&lt;li&gt;Na lista de requisições que o site fez ao servidor, identifique aquela(s) que é(são) relevante(s) a sua pesquisa.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Parece muito louco né? No geral, é muito louco sim, mas quando você dá sorte é fácil. Vou mostrar o que acontece no nosso exemplo:&lt;/p&gt;
&lt;div id=&#34;a-pagina-imediatamente-anterior&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A página imediatamente anterior&lt;/h3&gt;
&lt;p&gt;Eu quero a url &lt;a href=&#34;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&#34; class=&#34;uri&#34;&gt;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&lt;/a&gt; com alguma seleção, então pra realizar o primeiro passo basta entrar em &lt;a href=&#34;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&#34; class=&#34;uri&#34;&gt;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ferramentas-do-desenvolvedor-e-aba-network&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ferramentas do desenvolvedor e aba “Network”&lt;/h3&gt;
&lt;p&gt;Em qualquer navegador, as ferramentas do desenvolvedor mostram o &lt;em&gt;background&lt;/em&gt; do que aparece na tela. Se estiver nessa aba, quando você entrar em &lt;a href=&#34;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&#34; class=&#34;uri&#34;&gt;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&lt;/a&gt; e apertar F5, vai encontrar uma tela mais ou menos parecida com a tela abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-05-19-scrapper-ssp_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cada linha representa uma requisição, que é essencialmente o envio de um arquivo .html ao servidor. O conteúdo que visualizamos na tela é o resultado de todas essas requisições e, se destrincharmos cada uma delas, podemos identificar aquelas que são relevantes para o nosso problema.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-requisicao&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A requisição&lt;/h3&gt;
&lt;p&gt;O próximo passo é identificar o que é que o navegador pede ao servidor quando te devolve o que você quer. Se você escolher o ano de 2017 na caixa de seleção de anos, por exemplo, vai encontrar uma tela parecida com essa aqui.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-05-19-scrapper-ssp_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Antes de prosseguir, é necessário fazer uma inspeção meticulosa de todas as requisições que aparecem, mas vou encurtar a discussão afirmando que a primeira delas é a mais importante. Existem muitas maneiras de deduzir que ela é uma boa candidata, como por exemplo olhando que ela é a única requisição &lt;em&gt;relevante&lt;/em&gt; que recebe html, mas vou pular essa parte.&lt;/p&gt;
&lt;p&gt;Segundo o nosso dedo duro, a requisição utiliza o método “POST” e, quando clicamos nela, temos informações sobre ela no painel ao lado. Como eu falei acima, uma requisição é um arquivo .html que “pede” alguma ao servidor com base no seu conteúdo. No geral, um bom lugar para procurar o que a requisição está pedindo é o seu conjunto de parâmetros, na aba “Params” do painel de detalhamento da requisição.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-05-19-scrapper-ssp_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Quando inspecionamos essa requisição “POST”, identificamos que as coisas que são relevantes para o conteúdo da página estão nesses parâmetros. De fato, pensando ingenuamente, clicar apenas em “2017” deve mexer nos parâmetros que tem a ver com isso mas deve deixar os demais parâmetros fixos. Por sorte, os parâmetros observados batem com essa expectativa: “__EVENTTARGET&amp;quot; é &lt;code&gt;ctl00$conteudo$$ddlAnos&lt;/code&gt; é um &lt;em&gt;placeholder&lt;/em&gt; que tem a ver com a caixa de seleção em que mexemos, os dois próximos parâmetros estão zerados, “__VIEWSTATE&amp;quot; e “__EVENTVALIDATION&amp;quot; são parâmetros da sessão, e, por fim, temos os parâmetros da consulta, que estão todos zerados com exceção de &lt;code&gt;ctl00$conteudo$$ddlAnos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Parece que os parâmetros tem tudo a ver com a saída. Será que mexer apenas neles basta para copiar a requisição do navegador?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;crie-um-robo-que-imita-o-que-um-humano-faria&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Crie um robô que imita o que um humano faria&lt;/h2&gt;
&lt;p&gt;Agora que sabemos um pouco mais sobre como as requisições funcionam, vamos tentar fazer o POST mais simples de todos: ele só tem os parâmetros da última imagem. Em R, o jeito mais fácil de fazer requisições é usando o pacote &lt;code&gt;httr&lt;/code&gt;. Ele é bem intuitivo e flexível, de tal forma que fazer um POST é feito simplesmente chamando a função &lt;code&gt;httr::POST&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url &amp;lt;- &amp;#39;http://www.ssp.sp.gov.br/Estatistica/Pesquisa.aspx&amp;#39;
#código para dar um POST vazio no site
httr::POST(url)
#o resultado é simplesmente o resultado original da página&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para colocar parâmetros num POST, basta usar o parâmetro &lt;code&gt;body&lt;/code&gt;. Antes de complicar, vamos tentar o conjunto de parâmetros mais simples de todos: vamos ignorar tudo que a gente não sabe exatamente o que é e preencher só o que sabemos:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;params &amp;lt;- list(`__EVENTTARGET` = &amp;quot;ctl00$conteudo$$ddlAnos&amp;quot;,
               `__EVENTARGUMENT` = &amp;quot;&amp;quot;,
               `__LASTFOCUS` = &amp;quot;&amp;quot;,
               `__VIEWSTATE` = &amp;quot;&amp;quot;,
               `__EVENTVALIDATION` = &amp;quot;&amp;quot;,
               `ctl00$conteudo$ddlAnos` = &amp;quot;2015&amp;quot;,
               `ctl00$conteudo$ddlRegioes` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlMunicipios` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlDelegacias` = &amp;quot;0&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora vamos fazer a requisição. O passo seguinte é apenas pra traduzir o resultado pra um formato mais fácil de mexer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resposta &amp;lt;- httr::POST(url,
                       body = params,
                       encode = &amp;#39;form&amp;#39;) %&amp;gt;% 
    xml2::read_html()
    # traduz o resultado&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vamos saber se deu certo? Existem vários jeitos, mas, por simplicidade, aqui vamos apenas checar se alguma tabela contida em &lt;code&gt;resposta&lt;/code&gt; é igual à tabela que extraímos manualmente do site. Vamos fazer isso usando a função &lt;code&gt;rvest::html_table()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resposta %&amp;gt;% 
  rvest::html_table()
# extrai todas as tabelas de um código em html.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como se vê acima, nada que &lt;em&gt;se parece&lt;/em&gt; com uma tabela na resposta da nossa requisição é a tabelinha que identificamos no site. Muita coisa pode ter dado errado, mas vamos começar pelo que é mais evidente: nós ignoramos os parâmetros &lt;code&gt;__VIEWSTATE&lt;/code&gt; e &lt;code&gt;__EVENTVALIDATION&lt;/code&gt;. Em última instância, nos vamos precisar &lt;em&gt;entender&lt;/em&gt; o que esses parâmetros significam, mas primeiro vamos tentar simplesmente obter uma cópia desses valores diretamente do site. Dando um ctrl+f no painel de ferramentas de desenvolvedor identificamos que o valores dessa variáveis sai de umas tags &lt;code&gt;input&lt;/code&gt; nomeadas de acordo com o parâmetro que representam.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;view_state &amp;lt;- httr::POST(url) %&amp;gt;% 
  xml2::read_html() %&amp;gt;% 
  rvest::html_nodes(&amp;quot;input[name=&amp;#39;__VIEWSTATE&amp;#39;]&amp;quot;) %&amp;gt;% 
  rvest::html_attr(&amp;quot;value&amp;quot;)

event_validation &amp;lt;- httr::POST(url) %&amp;gt;% 
  xml2::read_html() %&amp;gt;% 
  rvest::html_nodes(&amp;quot;input[name=&amp;#39;__EVENTVALIDATION&amp;#39;]&amp;quot;) %&amp;gt;% 
  rvest::html_attr(&amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com os nossos embustes em mãos, basta pular para a próxima etapa: tentar simular um clique no site. Nosso novo conjunto de parâmetros fica:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;params &amp;lt;- list(`__EVENTTARGET` = &amp;quot;ctl00$conteudo$$ddlAnos&amp;quot;,
               `__EVENTARGUMENT` = &amp;quot;&amp;quot;,
               `__LASTFOCUS` = &amp;quot;&amp;quot;,
               `__VIEWSTATE` = view_state,
               `__EVENTVALIDATION` = event_validation,
               `ctl00$conteudo$ddlAnos` = &amp;quot;2015&amp;quot;,
               `ctl00$conteudo$ddlRegioes` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlMunicipios` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlDelegacias` = &amp;quot;0&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E o código da requisição fica:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resposta &amp;lt;- httr::POST(url,
                       body = params,
                       encode = &amp;#39;form&amp;#39;) %&amp;gt;% 
    xml2::read_html() %&amp;gt;% 
  rvest::html_table()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exatamente a tabelinha que queríamos! Entretanto, nem tudo são flores. Como eu mencionei ali em cima, tanto a minha namorada quanto o NEV tinham interesse no número de BO’s, que não é o que obtivemos fazendo a requisição via R. Fuçando um pouco, é fácil ver que o que obtivemos são os números de produtividade policial. Será que é fácil mexer nos parâmetros pra obter os números de BO’s?&lt;/p&gt;
&lt;p&gt;Felizmente, a resposta é sim, mas não é tão simples quanto parece. Se de outra tela qualquer você clicar em “Ocorrências Registradas por Mês” você vai perceber que o “__EVENTTARGET&amp;quot; mudou para &lt;code&gt;ctl00$conteudo$$btnMes&lt;/code&gt;, mas, a despeito do que se poderia imaginar, os outros parâmetros permaneceram com os nomes intactos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-05-19-scrapper-ssp_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Como essa requisição sugere, você consegue variar os tipos de informação simplesmente variando o “__EVENTTARGET“. Com isso, uma requisição para obter as”Ocorrências Registradas por Mês&amp;quot; ficaria:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;params &amp;lt;- list(`__EVENTTARGET` = &amp;quot;ctl00$conteudo$$ddlAnos&amp;quot;,
               `__EVENTARGUMENT` = &amp;quot;&amp;quot;,
               `__LASTFOCUS` = &amp;quot;&amp;quot;,
               `__VIEWSTATE` = view_state,
               `__EVENTVALIDATION` = event_validation,
               `ctl00$conteudo$ddlAnos` = &amp;quot;2015&amp;quot;,
               `ctl00$conteudo$ddlRegioes` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlMunicipios` = &amp;quot;0&amp;quot;,
               `ctl00$conteudo$ddlDelegacias` = &amp;quot;0&amp;quot;)

resposta &amp;lt;- httr::POST(url,
                       body = params,
                       encode = &amp;#39;form&amp;#39;) %&amp;gt;% 
    xml2::read_html()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É importante notar que cada vez que vamos um POST desse, é como se estivessemos entrando na página novamente, de tal forma que as informações que a página tem quando damos vários cliques seguidos são diferentes das informações de quando acessamos a página pelo R. Por exemplo, quando estamos navegando pela página pelos links, o “__EVENTTARGET&amp;quot; volta para &lt;code&gt;ctl00$conteudo$$ddlAnos&lt;/code&gt; se você trocar de página &lt;em&gt;saindo&lt;/em&gt; de uma página de “Ocorrências Registradas por Mês”, mas o tipo de informação vêm corretamente. Isso acontece porque, se você acessar várias páginas em sequência, a página sabe de onde você veio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;repita-quantas-vezes-quiser&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Repita quantas vezes quiser&lt;/h2&gt;
&lt;p&gt;Agora vem a repetição, o passo final da raspagem. Antes de qualquer coisa precisamos de duas pequenas generalizações: queremos baixar vários anos e vários municípios. Isso é fácil de fazer pois os índices dos municípios são as suas posições em ordem alfabética. Dessa forma, é possível fazer uma função que baixa as “Ocorrências Registradas por Mês” de um município em um determinado ano:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;baixa_bo_municipio_ano &amp;lt;- function(ano, municipio){
pivot &amp;lt;- httr::GET(url)
#serve apenas para pegarmos um view_state e um event_validation valido
  
view_state &amp;lt;- pivot %&amp;gt;% 
  xml2::read_html() %&amp;gt;% 
  rvest::html_nodes(&amp;quot;input[name=&amp;#39;__VIEWSTATE&amp;#39;]&amp;quot;) %&amp;gt;% 
  rvest::html_attr(&amp;quot;value&amp;quot;)

event_validation &amp;lt;- pivot %&amp;gt;% 
  xml2::read_html() %&amp;gt;% 
  rvest::html_nodes(&amp;quot;input[name=&amp;#39;__EVENTVALIDATION&amp;#39;]&amp;quot;) %&amp;gt;% 
  rvest::html_attr(&amp;quot;value&amp;quot;)

params &amp;lt;- list(`__EVENTTARGET` = &amp;quot;ctl00$conteudo$$btnMes&amp;quot;,
             `__EVENTARGUMENT` = &amp;quot;&amp;quot;,
             `__LASTFOCUS` = &amp;quot;&amp;quot;,
             `__VIEWSTATE` = view_state,
             `__EVENTVALIDATION` = event_validation,
             `ctl00$conteudo$ddlAnos` = &amp;quot;2015&amp;quot;,
             `ctl00$conteudo$ddlRegioes` = &amp;quot;0&amp;quot;,
             `ctl00$conteudo$ddlMunicipios` = municipio,
             `ctl00$conteudo$ddlDelegacias` = &amp;quot;0&amp;quot;)

 httr::POST(url, body = params, encode = &amp;#39;form&amp;#39;) %&amp;gt;% 
  xml2::read_html() %&amp;gt;% 
  rvest::html_table() %&amp;gt;% 
  dplyr::first() %&amp;gt;% 
  #&amp;#39; serve pra pegar apenas a primeira tabela da página,
  #&amp;#39; se houver mais do que uma. Estou assumindo que a 
  #&amp;#39; tabela que eu quero é sempre a primeira.
  dplyr::mutate(municipio = municipio,
                ano = ano) 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pra ilustar um grande loop, vamos baixar os BO’s de todos os municípios, no ano de 2016. A função demora um pouco pra rodar, então quem quiser ver como fica o resultado final pode clicar &lt;a href=&#34;https://github.com/curso-r/site/blob/master/content/blog/2017-05-19-scrapper-ssp/dados_ssp.rds&#34;&gt;neste link&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GRID &amp;lt;- expand.grid(municipio = 1:645, ano = &amp;#39;2016&amp;#39;, stringsAsFactors = F)

D &amp;lt;- purrr::by_row(GRID, baixa_bo_municipio_ano, .to = &amp;quot;ocorrencias&amp;quot;) %&amp;gt;% 
  tidyr::unnest(ocorrencias)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;resultados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;Com esses dados dá pra fazer muitas coisas legais. É possível, por exemplo, fazer mapas como esse, que representa o número de homicídios em 2016, por município. Ele foi feito em R, mas como fazê-lo é assunto pra outro post!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-05-19-scrapper-ssp_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Multas em São Paulo</title>
      <link>http://curso-r.com/blog/2017/04/01/2017-04-01-multas-em-sp/</link>
      <pubDate>Sat, 01 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/01/2017-04-01-multas-em-sp/</guid>
      <description>&lt;p&gt;Há bastante tempo tenho vontade de fazer análises usando dados de multas de São Paulo. O problema é: estes dados estão disponíveis? Na teoria, sim. Os dados de multas, como quantidade de multas por tipo de infração, dia e horário, e outros são divulgados no &lt;a href=&#34;http://mobilidadesegura.prefeitura.sp.gov.br/QvAJAXZfc/opendoc.htm?document=Painel_Mobilidade_Segura.qvw&amp;amp;host=QVS%40c65v27i&amp;amp;anonymous=true&#34;&gt;portal da Mobilidade Segura&lt;/a&gt; da Prefeitura de São Paulo. Na prática, é um pouco diferente. Apesar do site fornecer uma opção de exportação, a tabela exportada não é completa e muitas informações ficam faltando. Dá bastante trabalho para exportar todas as informações.&lt;/p&gt;
&lt;p&gt;Para não ter o trabalho de exportar tabela por tabela, fiz uma requisição para a prefeitura, por meio da Lei de Acesso à Informação, pedindo acesso direto ao banco de dados que fornece as informações para o Portal. A resposta foi a seguinte:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prezado Senhor Daniel, Agradecemos o contato e informamos que o seu pedido foi indeferido com fundamento no art. 16, inciso III, do Decreto nº 53.623/2012, pois a base de dados contém informações pessoais que não podem ser disponibilizadas a terceiros. Os demais dados encontram-se inseridos no Painel Mobilidade Segura para consulta pelos interessados com a possibilidade de exportar arquivos. Informamos ainda que na época da sua solicitação, os painéis se encontravam atualizados, visto que a atualização mensal ocorre após os 70 dias da data da infração&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A resposta ao meu ver é totalmente contraditória: ao mesmo tempo que eu não posso receber os dados porque eles são confidenciais, eu posso obtê-los pelo site, que “oferece possibilidade de exportação de arquivos”. (???)&lt;/p&gt;
&lt;p&gt;Antes mesmo de pedir acesso ao banco de dados tinha pensado em desenvolver um webscrapper para fazer o download automático das planilhas, mas a tecnologia com a qual o portal foi desenvolvido (QlikView) dificulta muito o desenvolviento.&lt;/p&gt;
&lt;p&gt;Sobrou fazer o download manual mesmo. Até agora fiz o download de todos as planilhas de 2014 a 2016 contendo infrações capturadas tanto eletrônica quanto manualmente de carros (ainda faltam ônibus, utilitários, etc.) por hora do dia. Isso quer dizer que já temos planilhas suficientes para criar uma tabela:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tipo de veículo (sempre seria carro)&lt;/li&gt;
&lt;li&gt;data (2014 a 2016)&lt;/li&gt;
&lt;li&gt;hora do dia&lt;/li&gt;
&lt;li&gt;eletronica/manual&lt;/li&gt;
&lt;li&gt;motivo da multa&lt;/li&gt;
&lt;li&gt;localizacao da multa (quando for um radar)&lt;/li&gt;
&lt;li&gt;quantidade de multas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disponibilizei esses dados &lt;a href=&#34;https://github.com/dfalbel/spmultas&#34;&gt;neste repositório&lt;/a&gt; do Github.&lt;/p&gt;
&lt;p&gt;Agora com as análises a seguir, espero criar curiosidade e interesse para que mais pessoas possam ajudar no download completo dos dados. Na página inicial do repositório, adicionei, um mini-tutorial de como você pode ajudar fazendo os downloads.&lt;/p&gt;
&lt;p&gt;Vamos às análises.&lt;/p&gt;
&lt;div id=&#34;obter-os-dados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obter os dados&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://github.com/dfalbel/spmultas/raw/master/data/carros_eletronicas.rda&amp;quot;, &amp;quot;carros_eletronicas.rda&amp;quot;)
load(&amp;quot;carros_eletronicas.rda&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A partir de agora, você possui carregado um &lt;code&gt;data.frame&lt;/code&gt; chamado &lt;code&gt;carros_eletronicas&lt;/code&gt; que possui as informações das multas para carros de forma eletrônica.&lt;/p&gt;
&lt;p&gt;Em primeiro lugar, vamos analisar a quantidade de multas por dia em São Paulo desde 2014.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizar-a-serie&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizar a série&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;%
  group_by(data) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(data, qtd)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vemos nesse gráfico que o número de multas (por radar) era sempre por volta de 10.000 durante 2014, em 2015 foi aumentando bastante durante o ano e em 2016 se estabilizou. Vamos ver agora, por tipo de enquadramento, isto é, por motivo da multa.&lt;/p&gt;
&lt;p&gt;Existem 11 tipos de enquadramentos eletrônicos. Para a visualização ficar mais fácil, vamos primeiro agrupar em grandes temas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avançar o sinal vermelho&lt;/li&gt;
&lt;li&gt;Executar conversão proibida&lt;/li&gt;
&lt;li&gt;Parar sobre faixa de pedestres&lt;/li&gt;
&lt;li&gt;Rodízio&lt;/li&gt;
&lt;li&gt;Velocidade&lt;/li&gt;
&lt;li&gt;Transitar em faixa de ônibus ou exclusiva p/ determinado veículo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O agrupamento final ficou assim:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;depara &amp;lt;- carros_eletronicas %&amp;gt;%
  group_by(enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;% 
  arrange(qtd) %&amp;gt;%
  select(-qtd)
depara$agrup_enquadramento &amp;lt;- c(&amp;quot;Conversão proibida&amp;quot;, &amp;quot;Velocidade&amp;quot;, &amp;quot;Faixa de Pedestres&amp;quot;, 
                                &amp;quot;Faixa de ônibus&amp;quot;, &amp;quot;Sinal vermelho&amp;quot;, &amp;quot;Faixa de ônibus&amp;quot;,
                                &amp;quot;Conversão proibida&amp;quot;, &amp;quot;Faixa de ônibus&amp;quot;, &amp;quot;Velocidade&amp;quot;,
                                &amp;quot;Rodízio&amp;quot;, &amp;quot;Velocidade&amp;quot;
                                )

depara %&amp;gt;% knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;enquadramento&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;agrup_enquadramento&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Executar Operacao De Conversao A Esquerda Em Local Proibido Pela Sinalizacao&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Conversão proibida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Mais De 50%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Parar Sobre Faixa De Pedestres Na Mudanca De Sinal Luminoso (Fisc Eletronica)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de Pedestres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa/Pista Da Esquerda Regul Circulacao Exclusiva Determ Veiculo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avancar O Sinal Vermelho Do Semaforo - Fiscalizacao Eletronica&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sinal vermelho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa/Pista Da Direita Regul Circulacao Exclusiva Determ Veiculo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Executar Operacao De Conversao A Direita Em Local Proibido Pela Sinalizacao&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Conversão proibida&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Na Faixa Ou Via Exclusiva Regulam P/Transp Publ Coletivo Passag&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Faixa de ônibus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Mais De 20% Ate 50%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Local/Horario Nao Permitido Pela Regulamentacao - Rodizio&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Rodízio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Transitar Em Velocidade Superior A Maxima Permitida Em Ate 20%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Velocidade&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;%
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(data, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(data, qtd, color = agrup_enquadramento)) +
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No gráfico, vemos que em 2015, o tipo de multa que mais aumentou em quantidade foi velocidade e rodízio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;curiosidades&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Curiosidades&lt;/h2&gt;
&lt;p&gt;Anteriormente vimos como se comportou o número de multas de maneira geral na cidade. Vamos agora matar algumas curiosidades.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Quais são os horários com mais multas em SP?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  group_by(hora) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = hora, y = qtd)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notamos que o maior número de multas ocorre justamente na hora do rush. Isto é, entre 7 e 10 da manhã e 17h e 19h. Isso até faz sentido, mas nessas horas o trânsito da cidade está todo parado. Será que a distribuição fica diferente por tipo de multa? Principalmente as de velocidade.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(hora, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = hora, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Veja que interessante! O grande responsável pelo pico da hora do rush é o rodízio. (Essa é justamente a hora em que ele está valendo.) As multas de velocidade diminuem um pouco durante o trânsito e acontecem mais durante o dia e não durante a noite como poderíamos imaginar. Vemos também que as multas de farol vermelho acontecem mais durante a madrugada.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Qual é o dia da semana com mais multas?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;carros_eletronicas %&amp;gt;% 
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  group_by(dia_da_semana = wday(data), agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = dia_da_semana, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O dia da semana com mais multas é quinta feira. Nos finais de semana, aumenta muito o número de multas por excesso de velocidade (claro, as ruas estão mais vazias).&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Quais são os radares que mais multam em SP? E porque?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top10_locais &amp;lt;- carros_eletronicas %&amp;gt;%
  group_by(local) %&amp;gt;%
  summarise(n = sum(qtd)) %&amp;gt;%
  arrange(desc(n)) %&amp;gt;%
  slice(1:10)
knitr::kable(top10_locais)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;local&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avenida Assis Chateaubriand X Acesso Pte Das Bandeiras, A.Sen/C. Bran&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;321629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Avenida Assis Chateaubriand (A. Senna/C. Branco), Alca Da Ponte Das Bandeiras&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;318745&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Dos Bandeirantes(Marginal/Imigrantes) A Mais 34 Metros Da Av Washington Luis&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;291277&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Das Nacoes Unidas-Pista Central-(Interlagos/C.Branco) A Menos 7,3m Do Km 5,5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;162318&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Morvan D De Figueiredo (As/Cb), A Mais 3m R Amazonas Da Silva-Fx Excl Onibus&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;153131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Rua Hungria (Interlagos/Castelo Branco) A Menos 20 Metros Da Avenida Reboucas&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;139048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Morvan Dias De Figueiredo (As/Cb),A Mais 3m R Amazonas Da Silva&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;137064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Rodovia Presidente Dutra (As/Cb), A Menos 75m Da Pte Pr J Quadros&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;134454&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Aricanduva (Bairro/Centro), A Mais15m Da Av Matapi - Fx Exclusiva De Onibus&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;127690&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Av Embaixador Macedo Soares, Sob Ponte Nova Fepasa, Sentido C. Branco/A. Senna&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;124927&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Agora vamos ver os motivos, em cada um desses lugares.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top10_locais %&amp;gt;%
  left_join(carros_eletronicas, by = &amp;quot;local&amp;quot;) %&amp;gt;%
  left_join(depara, by = &amp;quot;enquadramento&amp;quot;) %&amp;gt;%
  mutate(local = stringr::str_wrap(local, width = 20) %&amp;gt;% 
           forcats::fct_reorder(-n)) %&amp;gt;%
  group_by(local, agrup_enquadramento) %&amp;gt;%
  summarise(qtd = sum(qtd)) %&amp;gt;%
  ggplot(aes(x = local, y = qtd, fill = agrup_enquadramento)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1000px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Por incrível que pareça, nos dois radares com mais multas, o motivo da multa é conversão proibida. A foto de onde fica esse radar saiu em uma &lt;a href=&#34;http://www1.folha.uol.com.br/cotidiano/2015/07/1660793-radar-campeao-aplica-375-mil-multas-em-um-ano-na-ponte-das-bandeiras.shtml&#34;&gt;notícia sobre o mesmo tema&lt;/a&gt; na Folha de São Paulo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-01-multas-em-sp_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>