<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erro on Curso-R</title>
    <link>http://curso-r.com/tags/erro/index.xml</link>
    <description>Recent content in Erro on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <atom:link href="http://curso-r.com/tags/erro/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tratando erros: the tidy way</title>
      <link>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</link>
      <pubDate>Thu, 20 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/20/2017-04-09-try/</guid>
      <description>&lt;p&gt;Tratar erros no R é importante para identificar problemas nos códigos e evitar retrabalho. Quem nunca rodou um algoritmo pesadíssimo que deu errado na última iteração? Nesse artigo, veremos como trabalhar com erros no R e a versão &lt;code&gt;tidy&lt;/code&gt; dessas soluções.&lt;/p&gt;
&lt;div id=&#34;usando-try-e-trycatch&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usando &lt;code&gt;try()&lt;/code&gt; e &lt;code&gt;tryCatch()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A forma tradicional de tratar erros no R é com a função &lt;code&gt;tryCatch()&lt;/code&gt;. Essa função tem como primeiro argumento uma expressão a ser avaliada e argumentos diversos para trabalhar com os erros. A versão mais compacta do &lt;code&gt;tryCatch()&lt;/code&gt; é escrita assim:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tryCatch(sqrt(1), error = function(e) e)
## [1] 1
tryCatch(sqrt(&amp;#39;a&amp;#39;), error = function(e) e)
## &amp;lt;simpleError in sqrt(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O &lt;code&gt;try()&lt;/code&gt; é uma simplificação de &lt;code&gt;tryCatch()&lt;/code&gt; que assume que não estamos interessados no erro, mas sim no resultado da função quando ela dá certo. O código abaixo não trava:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try(sqrt(1))
## [1] 1
try(sqrt(&amp;#39;a&amp;#39;))
## Error in sqrt(&amp;quot;a&amp;quot;) : non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existe até mesmo uma versão quieta do &lt;code&gt;try()&lt;/code&gt;, usando o parâmetro &lt;code&gt;silent =&lt;/code&gt;. Quando a expressão dá um erro, o &lt;code&gt;try()&lt;/code&gt; retorna a mensagem de erro de forma invisível, ou seja, sem mostrar explicitamente para o usuário.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- try(sqrt(&amp;#39;a&amp;#39;), silent = TRUE)
x
## [1] &amp;quot;Error in sqrt(\&amp;quot;a\&amp;quot;) : non-numeric argument to mathematical function\n&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;try-error&amp;quot;
## attr(,&amp;quot;condition&amp;quot;)
## &amp;lt;simpleError in sqrt(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usando-adverbios-do-purrr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usando advérbios do &lt;code&gt;purrr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Hoje em dia, o jeito mais arrumado de tratar erros é usando as funções &lt;code&gt;purrr::possibly()&lt;/code&gt; e suas amigas, &lt;code&gt;quietly()&lt;/code&gt; e &lt;code&gt;safely()&lt;/code&gt;. Note que todas essas palavras são advérbios: o objetivo delas é alterar o comportamento de outros verbos (outras funções). Essa forma de pensar nos nomes das funções (funções são verbos, modificadores de funções são advérbios) faz parte do &lt;a href=&#34;http://curso-r.com/blog/2017/02/15/2017-02-16-manifesto-tidy/&#34;&gt;princípio tidy&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safely()&lt;/code&gt; retorna uma lista com elementos &lt;code&gt;result&lt;/code&gt; e &lt;code&gt;error&lt;/code&gt;. Quando a função não dá erro, &lt;code&gt;error&lt;/code&gt; fica igual a &lt;code&gt;NULL&lt;/code&gt;. Quando a função dá erro, &lt;code&gt;error&lt;/code&gt; guarda a mensagem de erro e &lt;code&gt;result&lt;/code&gt; guarda o valor do parâmetro &lt;code&gt;otherwise =&lt;/code&gt;, que por padrão é &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;possibly()&lt;/code&gt; é uma versão mais otimista do &lt;code&gt;safely()&lt;/code&gt;, que exige a definição de &lt;code&gt;otherwise =&lt;/code&gt; e não guarda as mensagens de erro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quietly()&lt;/code&gt; não trata erros (ou seja, ela trava quando dá erro), mas guarda informações sobre &lt;em&gt;warnings&lt;/em&gt; e &lt;em&gt;messages&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-5&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-try_files/figure-html/unnamed-chunk-5-1.png&#34; alt=&#34;Admita, você não imaginava que teria de pensar em gramática para programar em R.&#34; width=&#34;768&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Admita, você não imaginava que teria de pensar em gramática para programar em R.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vamos ver as três funções colocadas em prática. Como exemplo usaremos a função &lt;code&gt;log&lt;/code&gt;, que i) retorna um número quando a entrada é um número positivo, ii) dá um warning quando a entrada é um número menor ou igual a zero, e iii) dá um erro se a entrada não é um número.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log(10)
## [1] 2.302585
log(-1)
## Warning in log(-1): NaNs produced
## [1] NaN
log(&amp;#39;a&amp;#39;)
## Error in log(&amp;quot;a&amp;quot;): non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos fazer as versões modificadas de &lt;code&gt;log&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)
safe_log &amp;lt;- safely(log) # outra forma fancy de escrever isso: log %&amp;gt;% safely()
possible_log &amp;lt;- possibly(log, otherwise = &amp;#39;putz&amp;#39;)
quiet_log &amp;lt;- quietly(log)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos mapear os seguintes elementos nessas funções:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;entradas &amp;lt;- list(10, -1, &amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, os resultados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Esse código vai travar
map(entradas, log) 
## Warning in .f(.x[[i]], ...): NaNs produced
## Error in .f(.x[[i]], ...): non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safely()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Retorna uma lista com erros e resultados NULL
map(entradas, safe_log)
## Warning in .f(...): NaNs produced
## [[1]]
## [[1]]$result
## [1] 2.302585
## 
## [[1]]$error
## NULL
## 
## 
## [[2]]
## [[2]]$result
## [1] NaN
## 
## [[2]]$error
## NULL
## 
## 
## [[3]]
## [[3]]$result
## NULL
## 
## [[3]]$error
## &amp;lt;simpleError in .f(...): non-numeric argument to mathematical function&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;possibly()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Retorna uma lista com os resultados que deram certo
map(entradas, possible_log)
## Warning in .f(...): NaNs produced
## [[1]]
## [1] 2.302585
## 
## [[2]]
## [1] NaN
## 
## [[3]]
## [1] &amp;quot;putz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quietly()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Também trava, mesmo problema de log
map(entradas, quiet_log) 
## Error in .f(...): non-numeric argument to mathematical function

## Quando funciona, retorna todos os warnings e messages
map(entradas[1:2], quiet_log)
## [[1]]
## [[1]]$result
## [1] 2.302585
## 
## [[1]]$output
## [1] &amp;quot;&amp;quot;
## 
## [[1]]$warnings
## character(0)
## 
## [[1]]$messages
## character(0)
## 
## 
## [[2]]
## [[2]]$result
## [1] NaN
## 
## [[2]]$output
## [1] &amp;quot;&amp;quot;
## 
## [[2]]$warnings
## [1] &amp;quot;NaNs produced&amp;quot;
## 
## [[2]]$messages
## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;combo-com-purrr-e-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combo com &lt;code&gt;purrr&lt;/code&gt; e &lt;code&gt;tibble&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Um combo que eu gosto bastante de usar é adicionar erros do código retornado por &lt;code&gt;safely()&lt;/code&gt; dentro de uma &lt;code&gt;tibble&lt;/code&gt;. Uma forma de fazer isso é com o código abaixo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)

# adiciona um resultado default caso dê erro. No caso, NA.
safe_log2 &amp;lt;- log %&amp;gt;% safely(otherwise = NA_real_)

d_result &amp;lt;- entradas %&amp;gt;% 
  map(safe_log2) %&amp;gt;% 
  # ao invés de uma lista de tamanho 3 com 2 elementos (result e error),
  # temos uma lista de tamanho 2 (result e error) com 3 elementos.
  transpose() %&amp;gt;%    
  # simplifica o vetor de resultados
  simplify_all() %&amp;gt;% 
  # converte para data frame
  as_tibble()

d_result
## # A tibble: 3 x 2
##     result             error
##      &amp;lt;dbl&amp;gt;            &amp;lt;list&amp;gt;
## 1 2.302585            &amp;lt;NULL&amp;gt;
## 2      NaN            &amp;lt;NULL&amp;gt;
## 3       NA &amp;lt;S3: simpleError&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assim, é possível guardar as informações dos erros de forma concisa, sem perder a informação dos erros.&lt;/p&gt;
&lt;p&gt;E é isso. Happy coding ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Até pouco tempo atrás eu usava a função &lt;code&gt;dplyr::failwith()&lt;/code&gt; para fazer o mesmo que &lt;code&gt;possibly()&lt;/code&gt;. Porém, descobri que essa função &lt;a href=&#34;https://github.com/tidyverse/dplyr/blob/master/NEWS.md#deprecated-and-defunct&#34;&gt;será retirada do &lt;code&gt;dplyr&lt;/code&gt; no futuro&lt;/a&gt;. Então se você é um usuário de &lt;code&gt;failwith()&lt;/code&gt;, está na hora de mudar!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Análise das emoções de Aécio Neves</title>
      <link>http://curso-r.com/blog/2017/04/15/2017-04-09-aecio/</link>
      <pubDate>Sat, 15 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>http://curso-r.com/blog/2017/04/15/2017-04-09-aecio/</guid>
      <description>&lt;p&gt;Aécio Neves é um político importante no Brasil. Por muito pouco não foi eleito Presidente da República em 2014 e é certamente um nome bem influente na atualidade. Mas sério, toda vez que eu vejo esse cara falando, não dou a mínima para quem ele é. Eu apenas fico pensando: ‘Por que ele sempre faz tanta cara de dor?’&lt;/p&gt;
&lt;p&gt;Pensando nisso, decidi pegar algumas fotos famosas dele e aplicar um algoritmo de Inteligência Artificial para reconhecimento de emoções. Se minha hipótese estiver correta, provavelmente esse algoritmo retornaria emoções como “dor”, “tristeza” ou “descontentamento”.&lt;/p&gt;
&lt;p&gt;A API escolhida para essa tarefa foi a &lt;a href=&#34;https://www.microsoft.com/cognitive-services/en-us/emotion-api&#34;&gt;Microsoft Emotions API&lt;/a&gt;. O motivo por trás da escolha não é nada especial: foi o primeiro resultado que apareceu no Google para mim!&lt;/p&gt;
&lt;p&gt;As imagens utilizadas para testar o algoritmo contra minha hipótese são essas aqui:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-4.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-5.png&#34; width=&#34;33%&#34; /&gt;&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/unnamed-chunk-2-6.png&#34; width=&#34;33%&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;obtencao-das-emocoes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obtenção das emoções&lt;/h2&gt;
&lt;p&gt;Pacotes carregados para essa análise:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(httr)
library(forcats)
library(grid)
library(gridExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obter os resultados, foi necessário entrar na &lt;a href=&#34;https://www.microsoft.com/cognitive-services/en-us/emotion-api&#34;&gt;página de APIs de visão da Microsoft&lt;/a&gt; e obter uma chave de acesso, guardando-a no objeto &lt;code&gt;key&lt;/code&gt;. Depois disso, montei a função &lt;code&gt;pegar_emocoes()&lt;/code&gt;, que recebe a URL de uma imagem da internet e uma chave de acesso, e retorna uma &lt;code&gt;tibble&lt;/code&gt; com as proporções das emoções em cada coluna.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pegar_emocoes &amp;lt;- function(u_img, key) {
  u_api &amp;lt;- &amp;#39;https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize&amp;#39;
  result &amp;lt;- httr::POST(
    url = u_api,
    httr::content_type(&amp;#39;application/json&amp;#39;), 
    httr::add_headers(.headers = c(&amp;#39;Ocp-Apim-Subscription-Key&amp;#39; = key)),
    body = list(url = u_img),
    encode = &amp;#39;json&amp;#39;
  )
  tibble::as_tibble(httr::content(result, &amp;#39;parsed&amp;#39;)[[1]]$scores)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente, apliquei a função num vetor de links usando o funcional &lt;code&gt;purrr::map_df&lt;/code&gt;. Como resultado, temos essa base de dados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d_emocoes &amp;lt;- map_df(u_imagens, pegar_emocoes, key = key, .id = &amp;#39;id&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;anger&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;contempt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;disgust&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;fear&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;happiness&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;neutral&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sadness&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;surprise&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0004080&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000004&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9994901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000025&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1466579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1385524&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1392320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000411&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2569676&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3143989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0032987&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008515&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0759952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0321533&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0072514&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000727&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0007214&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6251250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2585501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0001311&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0772784&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1994352&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0216270&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008681&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0124632&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6709319&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0042846&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0131115&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0476197&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0467561&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0026372&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000568&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008743&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8483697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0532359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0004504&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2786264&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0922678&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0087203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0119777&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0000222&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4820632&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0069891&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1193333&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;resultados&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:media&#34;&gt;1&lt;/a&gt; mostra a média de cada emoção nas seis fotos. Para minha surpresa, a emoção com maior proporção média foi “neutro”, com peso de quase 50%. As emoções seguintes são “felicidade”, “raiva” e “desdém”. A emoção “tristeza”, que achei que seria frequente por conta da cara de dor do Aécio, ficou com uma proporção média de apenas 5,5%.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:media&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/media-1.png&#34; alt=&#34;Média de cada emoção nas seis fotos baixadas.&#34; width=&#34;864&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Média de cada emoção nas seis fotos baixadas.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A Figura &lt;a href=&#34;#fig:each&#34;&gt;2&lt;/a&gt; mostra os resultados individuais das imagens. O primeiro resultado faz sentido, já que o Aécio está nitidamente rindo. Em todos os casos, é possível interpretar os resultados olhando a imagem. Por exemplo, o caso com “tristeza” mais alto é o que observamos as sombrancelhas mais caídas.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:each&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;http://curso-r.com/blog/2017-04-09-aecio_files/figure-html/each-1.png&#34; alt=&#34;Emoções do Aécio em cada imagem.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Emoções do Aécio em cada imagem.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusao&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Aparentemente minha hipótese estava errada. Aécio é um cara neutro e feliz, com acessos raiva de vez em quando (por favor, não interprete isso seriamente, é uma brincadeira!). Mas, sinceramente, achei que faltou na API uma emoção “cara de dor” para captar perfeitamente a expressão do Aécio. De qualquer forma, foi uma análise rápida e muito divertida de fazer. Se quiser replicá-la para outras imagens, acesse o &lt;a href=&#34;https://github.com/curso-r/site&#34;&gt;código fonte no repositório do GitHub que gera esse site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É isso. Happy coding ;)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>