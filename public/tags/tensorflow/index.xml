<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tensorflow on Curso-R</title>
    <link>/tags/tensorflow/index.xml</link>
    <description>Recent content in Tensorflow on Curso-R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright (c) 2016 - 2017, Curso-R; all rights reserved.</copyright>
    <atom:link href="/tags/tensorflow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como usar Estimators do TensorFlow no R</title>
      <link>/blog/2017/04/02/2017-04-02-estimator-api-tensorflow/</link>
      <pubDate>Sun, 02 Apr 2017 13:07:31 +0200</pubDate>
      
      <guid>/blog/2017/04/02/2017-04-02-estimator-api-tensorflow/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;Quem já usou TensorFlow sabe que uma das partes mais difíceis é organizar o seu código de forma que os &lt;code&gt;tensors&lt;/code&gt; não se misturem de uma sessão para a outra, você não tenha que repetir intermináveis loops de treino do modelo e etc.&lt;/p&gt;
&lt;p&gt;Para ajudar nisso, foi desenvolvida uma API chamada &lt;code&gt;Estimators&lt;/code&gt; que nos permite organizar os modelos de forma bem intuitiva. Para quem se interessar, vale a pena começar por &lt;a href=&#34;https://www.youtube.com/watch?v=t64ortpgS-E&#34;&gt;esse vídeo&lt;/a&gt;, que é uma apresentação do Martin Wicke na TensorFlow Dev Summit.&lt;/p&gt;
&lt;p&gt;Nesse post vou implementar uma regressão linear simples usando o TensorFlow apenas para mostrar como funciona a organização do código usando a Estimator API que por enquanto não é oficial, mas será na versão 1.2.&lt;/p&gt;
&lt;p&gt;Para usar o TensorFlow pelo R, a melhor forma é usar o pacote &lt;a href=&#34;https://github.com/rstudio/tensorflow&#34;&gt;&lt;code&gt;tensorflow&lt;/code&gt;&lt;/a&gt; A instalação não é muito simples, pois é necessário, ter o python e o TensorFlow para o python configurados, para depois instalar o pacote. Não vou entrar em detalhes da instalação, mas no &lt;a href=&#34;https://github.com/rstudio/tensorflow&#34;&gt;README no pacote&lt;/a&gt; tem uma descrição de como instalar.&lt;/p&gt;
&lt;p&gt;Um bom tutorial de como implementar o seu próprio &lt;code&gt;Estimator&lt;/code&gt; está disponível &lt;a href=&#34;https://www.tensorflow.org/extend/estimators&#34;&gt;neste link&lt;/a&gt;. Basicamente, para tudo funcionar precisamos definir uma função chamada &lt;code&gt;model_fn&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;definindo-o-modelo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Definindo o modelo&lt;/h2&gt;
&lt;p&gt;A função &lt;code&gt;model_fn&lt;/code&gt; tem, em python, o seguinte formato:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def model_fn(features, targets, mode, params):
   # Logic to do the following:
   # 1. Configure the model via TensorFlow operations
   # 2. Define the loss function for training/evaluation
   # 3. Define the training operation/optimizer
   # 4. Generate predictions
   # 5. Return predictions/loss/train_op/eval_metric_ops in ModelFnOps object
   return ModelFnOps(mode, predictions, loss, train_op, eval_metric_ops)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou seja, a função recebe os argumentos &lt;code&gt;features&lt;/code&gt;, &lt;code&gt;targets&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt; e &lt;code&gt;params&lt;/code&gt; e configura o modelo, usando as operações do TensorFlow, define a função de perda, define a operação de treino e gera as predições.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tensorflow)
model_fn_lib &amp;lt;- tf$contrib$learn$python$learn$estimators$model_fn
model_fn &amp;lt;- function(features = NULL, targets = NULL, mode = NULL, params = NULL){
  
  output &amp;lt;- tf$contrib$layers$linear(features, 1L)
  
  predictions &amp;lt;- tf$reshape(output, shape(-1L))
  predictions_dict &amp;lt;- dict(predictions = predictions)
  
  loss &amp;lt;- tf$losses$mean_squared_error(targets, predictions)
  
  eval_metric_ops &amp;lt;- dict(
    rmse = tf$metrics$root_mean_squared_error(tf$cast(targets, tf$float64), predictions) 
  )
  
  train_op &amp;lt;- tf$contrib$layers$optimize_loss(
    loss = loss,
    global_step = tf$contrib$framework$get_global_step(),
    learning_rate = params[[&amp;quot;learning_rate&amp;quot;]],
    optimizer = &amp;quot;SGD&amp;quot;
  )
          
  model_fn_lib$ModelFnOps(
      mode = mode,
      predictions = predictions_dict,
      loss = loss,
      train_op = train_op,
      eval_metric_ops = eval_metric_ops
  )
}

tf_lm &amp;lt;- tf$contrib$learn$Estimator(model_fn = model_fn, params = dict(learning_rate = 0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- matrix(model.matrix(~ disp + hp + drat, data = mtcars), nrow = 32)
y &amp;lt;- mtcars$mpg
x &amp;lt;- tf$constant(x)
y &amp;lt;- tf$constant(y)

tf_lm$fit(x = x, y = y, steps = 100)
tf_lm$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>